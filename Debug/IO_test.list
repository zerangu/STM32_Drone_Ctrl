
IO_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc00  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800cd10  0800cd10  0001cd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d678  0800d678  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d678  0800d678  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d678  0800d678  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d678  0800d678  0001d678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d67c  0800d67c  0001d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800d680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000020c  0800d88c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800d88c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120bc  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260b  00000000  00000000  000322f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001200  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bf5  00000000  00000000  00036bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd47  00000000  00000000  0004d7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dcde  00000000  00000000  0005a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd4  00000000  00000000  000d8290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ccf8 	.word	0x0800ccf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800ccf8 	.word	0x0800ccf8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  //HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001124:	1d39      	adds	r1, r7, #4
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	2201      	movs	r2, #1
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <__io_putchar+0x20>)
 800112e:	f007 fc55 	bl	80089dc <HAL_UART_Transmit>

  return ch;
 8001132:	687b      	ldr	r3, [r7, #4]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200002ec 	.word	0x200002ec

08001140 <joystick_init>:
        //printf("adc0: %i adc1:%i\r\n",servo_out,servo2_out);
        //printf("sys_time_ms:%i\r\n",sys_time_ms);

}

void joystick_init(void){
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af02      	add	r7, sp, #8
	printf("calibrating middle point\n");
 8001146:	483a      	ldr	r0, [pc, #232]	; (8001230 <joystick_init+0xf0>)
 8001148:	f008 fafc 	bl	8009744 <puts>
	//printf("adc_read: %i %i\r\n", adc_reading[0], adc_reading[1]);
	for(int i=0; i<100; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e051      	b.n	80011f6 <joystick_init+0xb6>
		joystick_x = (float) adc_reading[0]/4096;
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <joystick_init+0xf4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd9c 	bl	8000c94 <__aeabi_ui2f>
 800115c:	4603      	mov	r3, r0
 800115e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fea2 	bl	8000eac <__aeabi_fdiv>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <joystick_init+0xf8>)
 800116e:	601a      	str	r2, [r3, #0]
		joystick_y = (float) adc_reading[1]/4096;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <joystick_init+0xf4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fd8d 	bl	8000c94 <__aeabi_ui2f>
 800117a:	4603      	mov	r3, r0
 800117c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe93 	bl	8000eac <__aeabi_fdiv>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <joystick_init+0xfc>)
 800118c:	601a      	str	r2, [r3, #0]
	    x_mid_val = x_mid_val*0.8f + joystick_x*0.2f;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <joystick_init+0x100>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	492c      	ldr	r1, [pc, #176]	; (8001244 <joystick_init+0x104>)
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fdd5 	bl	8000d44 <__aeabi_fmul>
 800119a:	4603      	mov	r3, r0
 800119c:	461c      	mov	r4, r3
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <joystick_init+0xf8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4929      	ldr	r1, [pc, #164]	; (8001248 <joystick_init+0x108>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fdcd 	bl	8000d44 <__aeabi_fmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fcc0 	bl	8000b34 <__addsf3>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <joystick_init+0x100>)
 80011ba:	601a      	str	r2, [r3, #0]
	    y_mid_val = y_mid_val*0.8f + joystick_y*0.2f;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <joystick_init+0x10c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4920      	ldr	r1, [pc, #128]	; (8001244 <joystick_init+0x104>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fdbe 	bl	8000d44 <__aeabi_fmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461c      	mov	r4, r3
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <joystick_init+0xfc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	491d      	ldr	r1, [pc, #116]	; (8001248 <joystick_init+0x108>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fdb6 	bl	8000d44 <__aeabi_fmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	4619      	mov	r1, r3
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fca9 	bl	8000b34 <__addsf3>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <joystick_init+0x10c>)
 80011e8:	601a      	str	r2, [r3, #0]
	    HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f002 fba6 	bl	800393c <HAL_Delay>
	for(int i=0; i<100; i++) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b63      	cmp	r3, #99	; 0x63
 80011fa:	ddaa      	ble.n	8001152 <joystick_init+0x12>
	}
	printf("mid_x:%.4f mid_y:%.4f \n",x_mid_val,y_mid_val);
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <joystick_init+0x100>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f911 	bl	8000428 <__aeabi_f2d>
 8001206:	4605      	mov	r5, r0
 8001208:	460e      	mov	r6, r1
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <joystick_init+0x10c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f90a 	bl	8000428 <__aeabi_f2d>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	e9cd 3400 	strd	r3, r4, [sp]
 800121c:	462a      	mov	r2, r5
 800121e:	4633      	mov	r3, r6
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <joystick_init+0x110>)
 8001222:	f008 fa1b 	bl	800965c <iprintf>
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	0800cd10 	.word	0x0800cd10
 8001234:	20000398 	.word	0x20000398
 8001238:	20000234 	.word	0x20000234
 800123c:	20000238 	.word	0x20000238
 8001240:	20000488 	.word	0x20000488
 8001244:	3f4ccccd 	.word	0x3f4ccccd
 8001248:	3e4ccccd 	.word	0x3e4ccccd
 800124c:	2000056c 	.word	0x2000056c
 8001250:	0800cd2c 	.word	0x0800cd2c

08001254 <CAN_BUS_init>:


void CAN_BUS_init(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	// can bus filter setting
	pHeader.DLC = 8;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <CAN_BUS_init+0x70>)
 800125a:	2208      	movs	r2, #8
 800125c:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <CAN_BUS_init+0x70>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <CAN_BUS_init+0x70>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x321;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <CAN_BUS_init+0x70>)
 800126c:	f240 3221 	movw	r2, #801	; 0x321
 8001270:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <CAN_BUS_init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x245<<5;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <CAN_BUS_init+0x74>)
 800127a:	f644 02a0 	movw	r2, #18592	; 0x48a0
 800127e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <CAN_BUS_init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <CAN_BUS_init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <CAN_BUS_init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <CAN_BUS_init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <CAN_BUS_init+0x74>)
 800129a:	2201      	movs	r2, #1
 800129c:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <CAN_BUS_init+0x74>)
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <CAN_BUS_init+0x78>)
 80012a2:	f003 f824 	bl	80042ee <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan);
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <CAN_BUS_init+0x78>)
 80012a8:	f003 f8ea 	bl	8004480 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ac:	2102      	movs	r1, #2
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <CAN_BUS_init+0x78>)
 80012b0:	f003 fb15 	bl	80048de <HAL_CAN_ActivateNotification>
	HAL_CAN_AddTxMessage(&hcan, &pHeader, aData, &pTxMailbox);
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <CAN_BUS_init+0x7c>)
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <CAN_BUS_init+0x80>)
 80012b8:	4902      	ldr	r1, [pc, #8]	; (80012c4 <CAN_BUS_init+0x70>)
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <CAN_BUS_init+0x78>)
 80012bc:	f003 f924 	bl	8004508 <HAL_CAN_AddTxMessage>
	  //while(HAL_CAN_IsTxMessagePending(&hcan, &pTxMailbox));
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200005b4 	.word	0x200005b4
 80012c8:	20000298 	.word	0x20000298
 80012cc:	200003a0 	.word	0x200003a0
 80012d0:	200002e8 	.word	0x200002e8
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_TIM_IC_CaptureCallback>:
int32_t		ic_value1 = 0;
int32_t 	ic_value2 = 0;
int32_t 	ic_value_difference = 0;
uint16_t 	channel_pulse[8] = {0,0,0,0,0,0,0,0};
uint8_t		channel_number = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // if the source is channel 1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7f1b      	ldrb	r3, [r3, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d15d      	bne.n	80013a4 <HAL_TIM_IC_CaptureCallback+0xcc>

		ic_value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f006 fec2 	bl	8008074 <HAL_TIM_ReadCapturedValue>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 80012f6:	601a      	str	r2, [r3, #0]
		ic_value_difference = ic_value2-ic_value1;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001304:	6013      	str	r3, [r2, #0]
		ic_value1 = ic_value2;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800130c:	6013      	str	r3, [r2, #0]

		if (ic_value2 > ic_value1){
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	dd07      	ble.n	800132a <HAL_TIM_IC_CaptureCallback+0x52>
			ic_value_difference = ic_value2-ic_value1;
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e013      	b.n	8001352 <HAL_TIM_IC_CaptureCallback+0x7a>
		}
		else if(ic_value2 < ic_value1){// you know
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	da0b      	bge.n	800134e <HAL_TIM_IC_CaptureCallback+0x76>
			ic_value_difference = ((0xffff-ic_value1)+ic_value2)+1;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800133e:	33ff      	adds	r3, #255	; 0xff
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4413      	add	r3, r2
 8001346:	3301      	adds	r3, #1
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e001      	b.n	8001352 <HAL_TIM_IC_CaptureCallback+0x7a>
		}
		else{
			//printf("PPM_error\n\r");
			Error_Handler();
 800134e:	f001 fe29 	bl	8002fa4 <Error_Handler>
		}
			// process captured time
		if (ic_value_difference > 6000){
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f241 7270 	movw	r2, #6000	; 0x1770
 800135a:	4293      	cmp	r3, r2
 800135c:	dd03      	ble.n	8001366 <HAL_TIM_IC_CaptureCallback+0x8e>
			channel_number = 0;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
			}
		}else{
			channel_number ++;
		}
	}
}
 8001364:	e01e      	b.n	80013a4 <HAL_TIM_IC_CaptureCallback+0xcc>
		}else if(ic_value_difference > 800){
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800136e:	dd13      	ble.n	8001398 <HAL_TIM_IC_CaptureCallback+0xc0>
			if(channel_number<9){
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d815      	bhi.n	80013a4 <HAL_TIM_IC_CaptureCallback+0xcc>
				channel_pulse[channel_number] = ic_value_difference;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	b289      	uxth	r1, r1
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				channel_number ++;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	e005      	b.n	80013a4 <HAL_TIM_IC_CaptureCallback+0xcc>
			channel_number ++;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000244 	.word	0x20000244
 80013b0:	20000240 	.word	0x20000240
 80013b4:	20000248 	.word	0x20000248
 80013b8:	2000025c 	.word	0x2000025c
 80013bc:	2000024c 	.word	0x2000024c

080013c0 <MPU6050_Read_Accel>:
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

void MPU6050_Read_Accel(void){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	//Read 6 byte of data starting from accel_xout_h register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2306      	movs	r3, #6
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	463b      	mov	r3, r7
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	223b      	movs	r2, #59	; 0x3b
 80013d8:	21d0      	movs	r1, #208	; 0xd0
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <MPU6050_Read_Accel+0xc0>)
 80013dc:	f004 fe6e 	bl	80060bc <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80013e0:	783b      	ldrb	r3, [r7, #0]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	787b      	ldrb	r3, [r7, #1]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MPU6050_Read_Accel+0xc4>)
 80013f0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80013f2:	78bb      	ldrb	r3, [r7, #2]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MPU6050_Read_Accel+0xc8>)
 8001402:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MPU6050_Read_Accel+0xcc>)
 8001414:	801a      	strh	r2, [r3, #0]
	Ax = (float)Accel_X_RAW/4096.0;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MPU6050_Read_Accel+0xc4>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fc3d 	bl	8000c9c <__aeabi_i2f>
 8001422:	4603      	mov	r3, r0
 8001424:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd3f 	bl	8000eac <__aeabi_fdiv>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MPU6050_Read_Accel+0xd0>)
 8001434:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/4096.0;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MPU6050_Read_Accel+0xc8>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fc2d 	bl	8000c9c <__aeabi_i2f>
 8001442:	4603      	mov	r3, r0
 8001444:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fd2f 	bl	8000eac <__aeabi_fdiv>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MPU6050_Read_Accel+0xd4>)
 8001454:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/4096.0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MPU6050_Read_Accel+0xcc>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fc1d 	bl	8000c9c <__aeabi_i2f>
 8001462:	4603      	mov	r3, r0
 8001464:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd1f 	bl	8000eac <__aeabi_fdiv>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MPU6050_Read_Accel+0xd8>)
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000330 	.word	0x20000330
 8001484:	200002cc 	.word	0x200002cc
 8001488:	200003d4 	.word	0x200003d4
 800148c:	2000042c 	.word	0x2000042c
 8001490:	200004ec 	.word	0x200004ec
 8001494:	20000418 	.word	0x20000418
 8001498:	20000508 	.word	0x20000508

0800149c <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	//Read 6 byte of data starting from accel_xout_h register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2306      	movs	r3, #6
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	463b      	mov	r3, r7
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2243      	movs	r2, #67	; 0x43
 80014b4:	21d0      	movs	r1, #208	; 0xd0
 80014b6:	4827      	ldr	r0, [pc, #156]	; (8001554 <MPU6050_Read_Gyro+0xb8>)
 80014b8:	f004 fe00 	bl	80060bc <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80014bc:	783b      	ldrb	r3, [r7, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	787b      	ldrb	r3, [r7, #1]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MPU6050_Read_Gyro+0xbc>)
 80014cc:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80014ce:	78bb      	ldrb	r3, [r7, #2]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MPU6050_Read_Gyro+0xc0>)
 80014de:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MPU6050_Read_Gyro+0xc4>)
 80014f0:	801a      	strh	r2, [r3, #0]
	Gx = (float)Gyro_X_RAW/65.5;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MPU6050_Read_Gyro+0xbc>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbcf 	bl	8000c9c <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4918      	ldr	r1, [pc, #96]	; (8001564 <MPU6050_Read_Gyro+0xc8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fcd2 	bl	8000eac <__aeabi_fdiv>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MPU6050_Read_Gyro+0xcc>)
 800150e:	601a      	str	r2, [r3, #0]
	Gy = (float)Gyro_Y_RAW/65.5;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MPU6050_Read_Gyro+0xc0>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fbc0 	bl	8000c9c <__aeabi_i2f>
 800151c:	4603      	mov	r3, r0
 800151e:	4911      	ldr	r1, [pc, #68]	; (8001564 <MPU6050_Read_Gyro+0xc8>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fcc3 	bl	8000eac <__aeabi_fdiv>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MPU6050_Read_Gyro+0xd0>)
 800152c:	601a      	str	r2, [r3, #0]
	Gz = (float)Gyro_Z_RAW/65.5;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MPU6050_Read_Gyro+0xc4>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbb1 	bl	8000c9c <__aeabi_i2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4909      	ldr	r1, [pc, #36]	; (8001564 <MPU6050_Read_Gyro+0xc8>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fcb4 	bl	8000eac <__aeabi_fdiv>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MPU6050_Read_Gyro+0xd4>)
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000330 	.word	0x20000330
 8001558:	2000038e 	.word	0x2000038e
 800155c:	200005cc 	.word	0x200005cc
 8001560:	20000504 	.word	0x20000504
 8001564:	42830000 	.word	0x42830000
 8001568:	200002c8 	.word	0x200002c8
 800156c:	2000043c 	.word	0x2000043c
 8001570:	200005d8 	.word	0x200005d8

08001574 <MPU6050_Init>:

void MPU6050_Init(void ){//MPU6050_START
 8001574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001578:	b091      	sub	sp, #68	; 0x44
 800157a:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t check, Data;
	//check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2301      	movs	r3, #1
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f107 0313 	add.w	r3, r7, #19
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	2275      	movs	r2, #117	; 0x75
 8001590:	21d0      	movs	r1, #208	; 0xd0
 8001592:	484c      	ldr	r0, [pc, #304]	; (80016c4 <MPU6050_Init+0x150>)
 8001594:	f004 fd92 	bl	80060bc <HAL_I2C_Mem_Read>
	if (check == 104){
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b68      	cmp	r3, #104	; 0x68
 800159c:	f040 8258 	bne.w	8001a50 <MPU6050_Init+0x4dc>
		printf("mpu6050 check passed! \r\n");
 80015a0:	4849      	ldr	r0, [pc, #292]	; (80016c8 <MPU6050_Init+0x154>)
 80015a2:	f008 f8cf 	bl	8009744 <puts>
		printf("reset mpu6050...\r\n");
 80015a6:	4849      	ldr	r0, [pc, #292]	; (80016cc <MPU6050_Init+0x158>)
 80015a8:	f008 f8cc 	bl	8009744 <puts>
		Data = 0x80;// power management register 0x6b we should write 0x80 to reset the sensor
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f107 0312 	add.w	r3, r7, #18
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	226b      	movs	r2, #107	; 0x6b
 80015c4:	21d0      	movs	r1, #208	; 0xd0
 80015c6:	483f      	ldr	r0, [pc, #252]	; (80016c4 <MPU6050_Init+0x150>)
 80015c8:	f004 fc7e 	bl	8005ec8 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f002 f9b5 	bl	800393c <HAL_Delay>

		printf("set clock to 8khz and wake up mpu6050...\r\n");
 80015d2:	483f      	ldr	r0, [pc, #252]	; (80016d0 <MPU6050_Init+0x15c>)
 80015d4:	f008 f8b6 	bl	8009744 <puts>
		Data = 0;// power management register 0x6b we should write all 0's to wake the sensor up
 80015d8:	2300      	movs	r3, #0
 80015da:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 0312 	add.w	r3, r7, #18
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	226b      	movs	r2, #107	; 0x6b
 80015f0:	21d0      	movs	r1, #208	; 0xd0
 80015f2:	4834      	ldr	r0, [pc, #208]	; (80016c4 <MPU6050_Init+0x150>)
 80015f4:	f004 fc68 	bl	8005ec8 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f002 f99f 	bl	800393c <HAL_Delay>

		// set low pass filter
		printf("set low pass filter on mpu6050...\r\n");
 80015fe:	4835      	ldr	r0, [pc, #212]	; (80016d4 <MPU6050_Init+0x160>)
 8001600:	f008 f8a0 	bl	8009744 <puts>
		Data = 0x01; //Bandwidth(Hz) 0=260A_256G 1=184A_188G 2=94A_98G 3=44A_42G 4=21A_20G 5=10A_10G 6=5A_5G
 8001604:	2301      	movs	r3, #1
 8001606:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 0312 	add.w	r3, r7, #18
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	221a      	movs	r2, #26
 800161c:	21d0      	movs	r1, #208	; 0xd0
 800161e:	4829      	ldr	r0, [pc, #164]	; (80016c4 <MPU6050_Init+0x150>)
 8001620:	f004 fc52 	bl	8005ec8 <HAL_I2C_Mem_Write>

		// set data rate of 8khz by writing SMPLRT_DIV register
		printf("set sample rate to 8khz on mpu6050...\r\n");
 8001624:	482c      	ldr	r0, [pc, #176]	; (80016d8 <MPU6050_Init+0x164>)
 8001626:	f008 f88d 	bl	8009744 <puts>
		Data = 0x00; // 7=1khz  0=8khz
 800162a:	2300      	movs	r3, #0
 800162c:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f107 0312 	add.w	r3, r7, #18
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	2219      	movs	r2, #25
 8001642:	21d0      	movs	r1, #208	; 0xd0
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <MPU6050_Init+0x150>)
 8001646:	f004 fc3f 	bl	8005ec8 <HAL_I2C_Mem_Write>

		printf("set accelerometer to 8g on mpu6050...\r\n");
 800164a:	4824      	ldr	r0, [pc, #144]	; (80016dc <MPU6050_Init+0x168>)
 800164c:	f008 f87a 	bl	8009744 <puts>
		// set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +/- 2g , 10 = 8g
		Data = 0x10;
 8001650:	2310      	movs	r3, #16
 8001652:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2301      	movs	r3, #1
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f107 0312 	add.w	r3, r7, #18
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	221c      	movs	r2, #28
 8001668:	21d0      	movs	r1, #208	; 0xd0
 800166a:	4816      	ldr	r0, [pc, #88]	; (80016c4 <MPU6050_Init+0x150>)
 800166c:	f004 fc2c 	bl	8005ec8 <HAL_I2C_Mem_Write>

		printf("set gyroscope to 500deg/sec on mpu6050...\r\n");
 8001670:	481b      	ldr	r0, [pc, #108]	; (80016e0 <MPU6050_Init+0x16c>)
 8001672:	f008 f867 	bl	8009744 <puts>
		// set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST,YG_ST,ZG_ST=0, FS_SEL=0 -> +/- 250 Deg/s , 8=500deg/s
		Data = 0x08;
 8001676:	2308      	movs	r3, #8
 8001678:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	f107 0312 	add.w	r3, r7, #18
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	221b      	movs	r2, #27
 800168e:	21d0      	movs	r1, #208	; 0xd0
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <MPU6050_Init+0x150>)
 8001692:	f004 fc19 	bl	8005ec8 <HAL_I2C_Mem_Write>


		printf("calibrating IMU in 2...\r\n");
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MPU6050_Init+0x170>)
 8001698:	f008 f854 	bl	8009744 <puts>
		HAL_Delay(1000);
 800169c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a0:	f002 f94c 	bl	800393c <HAL_Delay>
		printf("calibrating IMU in 1...\r\n");
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <MPU6050_Init+0x174>)
 80016a6:	f008 f84d 	bl	8009744 <puts>
		HAL_Delay(1000);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f002 f945 	bl	800393c <HAL_Delay>
		printf("calibrating IMU in 0...\r\n");
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MPU6050_Init+0x178>)
 80016b4:	f008 f846 	bl	8009744 <puts>
		printf("start calibration ... \r\n");
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MPU6050_Init+0x17c>)
 80016ba:	f008 f843 	bl	8009744 <puts>

		for(int i=0; i<2000; i++){
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e069      	b.n	8001798 <MPU6050_Init+0x224>
 80016c4:	20000330 	.word	0x20000330
 80016c8:	0800cd44 	.word	0x0800cd44
 80016cc:	0800cd5c 	.word	0x0800cd5c
 80016d0:	0800cd70 	.word	0x0800cd70
 80016d4:	0800cd9c 	.word	0x0800cd9c
 80016d8:	0800cdc0 	.word	0x0800cdc0
 80016dc:	0800cde8 	.word	0x0800cde8
 80016e0:	0800ce10 	.word	0x0800ce10
 80016e4:	0800ce3c 	.word	0x0800ce3c
 80016e8:	0800ce58 	.word	0x0800ce58
 80016ec:	0800ce74 	.word	0x0800ce74
 80016f0:	0800ce90 	.word	0x0800ce90
			MPU6050_Read_Accel();
 80016f4:	f7ff fe64 	bl	80013c0 <MPU6050_Read_Accel>
			MPU6050_Read_Gyro();
 80016f8:	f7ff fed0 	bl	800149c <MPU6050_Read_Gyro>
			Accel_X_CAL += Ax;
 80016fc:	4b9b      	ldr	r3, [pc, #620]	; (800196c <MPU6050_Init+0x3f8>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b9b      	ldr	r3, [pc, #620]	; (8001970 <MPU6050_Init+0x3fc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f7ff fa14 	bl	8000b34 <__addsf3>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <MPU6050_Init+0x3f8>)
 8001712:	601a      	str	r2, [r3, #0]
			Accel_Y_CAL += Ay;
 8001714:	4b97      	ldr	r3, [pc, #604]	; (8001974 <MPU6050_Init+0x400>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b97      	ldr	r3, [pc, #604]	; (8001978 <MPU6050_Init+0x404>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff fa08 	bl	8000b34 <__addsf3>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <MPU6050_Init+0x400>)
 800172a:	601a      	str	r2, [r3, #0]
			Accel_Z_CAL += Az;
 800172c:	4b93      	ldr	r3, [pc, #588]	; (800197c <MPU6050_Init+0x408>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b93      	ldr	r3, [pc, #588]	; (8001980 <MPU6050_Init+0x40c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f7ff f9fc 	bl	8000b34 <__addsf3>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b8e      	ldr	r3, [pc, #568]	; (800197c <MPU6050_Init+0x408>)
 8001742:	601a      	str	r2, [r3, #0]
			Gyro_X_CAL += Gx;
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <MPU6050_Init+0x410>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <MPU6050_Init+0x414>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f7ff f9f0 	bl	8000b34 <__addsf3>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b8a      	ldr	r3, [pc, #552]	; (8001984 <MPU6050_Init+0x410>)
 800175a:	601a      	str	r2, [r3, #0]
			Gyro_Y_CAL += Gy;
 800175c:	4b8b      	ldr	r3, [pc, #556]	; (800198c <MPU6050_Init+0x418>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b8b      	ldr	r3, [pc, #556]	; (8001990 <MPU6050_Init+0x41c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f7ff f9e4 	bl	8000b34 <__addsf3>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b86      	ldr	r3, [pc, #536]	; (800198c <MPU6050_Init+0x418>)
 8001772:	601a      	str	r2, [r3, #0]
			Gyro_Z_CAL += Gz;
 8001774:	4b87      	ldr	r3, [pc, #540]	; (8001994 <MPU6050_Init+0x420>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b87      	ldr	r3, [pc, #540]	; (8001998 <MPU6050_Init+0x424>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f7ff f9d8 	bl	8000b34 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b82      	ldr	r3, [pc, #520]	; (8001994 <MPU6050_Init+0x420>)
 800178a:	601a      	str	r2, [r3, #0]
			HAL_Delay(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f002 f8d5 	bl	800393c <HAL_Delay>
		for(int i=0; i<2000; i++){
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800179e:	dba9      	blt.n	80016f4 <MPU6050_Init+0x180>
		}
		Accel_X_CAL /= 2000;
 80017a0:	4b72      	ldr	r3, [pc, #456]	; (800196c <MPU6050_Init+0x3f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	497d      	ldr	r1, [pc, #500]	; (800199c <MPU6050_Init+0x428>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb80 	bl	8000eac <__aeabi_fdiv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b6e      	ldr	r3, [pc, #440]	; (800196c <MPU6050_Init+0x3f8>)
 80017b2:	601a      	str	r2, [r3, #0]
	    Accel_Y_CAL /= 2000;
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <MPU6050_Init+0x400>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4978      	ldr	r1, [pc, #480]	; (800199c <MPU6050_Init+0x428>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb76 	bl	8000eac <__aeabi_fdiv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <MPU6050_Init+0x400>)
 80017c6:	601a      	str	r2, [r3, #0]
	    Accel_Z_CAL /= 2000;
 80017c8:	4b6c      	ldr	r3, [pc, #432]	; (800197c <MPU6050_Init+0x408>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4973      	ldr	r1, [pc, #460]	; (800199c <MPU6050_Init+0x428>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fb6c 	bl	8000eac <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <MPU6050_Init+0x408>)
 80017da:	601a      	str	r2, [r3, #0]
	    Gyro_X_CAL /= 2000;
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <MPU6050_Init+0x410>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	496e      	ldr	r1, [pc, #440]	; (800199c <MPU6050_Init+0x428>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb62 	bl	8000eac <__aeabi_fdiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b65      	ldr	r3, [pc, #404]	; (8001984 <MPU6050_Init+0x410>)
 80017ee:	601a      	str	r2, [r3, #0]
	    Gyro_Y_CAL /= 2000;
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <MPU6050_Init+0x418>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4969      	ldr	r1, [pc, #420]	; (800199c <MPU6050_Init+0x428>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fb58 	bl	8000eac <__aeabi_fdiv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b62      	ldr	r3, [pc, #392]	; (800198c <MPU6050_Init+0x418>)
 8001802:	601a      	str	r2, [r3, #0]
	    Gyro_Z_CAL /= 2000;
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <MPU6050_Init+0x420>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4964      	ldr	r1, [pc, #400]	; (800199c <MPU6050_Init+0x428>)
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fb4e 	bl	8000eac <__aeabi_fdiv>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <MPU6050_Init+0x420>)
 8001816:	601a      	str	r2, [r3, #0]

	    printf("calibration finished! \r\n");
 8001818:	4861      	ldr	r0, [pc, #388]	; (80019a0 <MPU6050_Init+0x42c>)
 800181a:	f007 ff93 	bl	8009744 <puts>
	    printf("ax:%f ay:%f az:%f gx:%f gy:%f gz:%f\r\n",Accel_X_CAL,Accel_Y_CAL,Accel_Z_CAL,Gyro_X_CAL,Gyro_Y_CAL,Gyro_Z_CAL);
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <MPU6050_Init+0x3f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe00 	bl	8000428 <__aeabi_f2d>
 8001828:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <MPU6050_Init+0x400>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fdf9 	bl	8000428 <__aeabi_f2d>
 8001836:	4604      	mov	r4, r0
 8001838:	460d      	mov	r5, r1
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <MPU6050_Init+0x408>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fdf2 	bl	8000428 <__aeabi_f2d>
 8001844:	4680      	mov	r8, r0
 8001846:	4689      	mov	r9, r1
 8001848:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <MPU6050_Init+0x410>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdeb 	bl	8000428 <__aeabi_f2d>
 8001852:	4682      	mov	sl, r0
 8001854:	468b      	mov	fp, r1
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <MPU6050_Init+0x418>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fde4 	bl	8000428 <__aeabi_f2d>
 8001860:	e9c7 0100 	strd	r0, r1, [r7]
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <MPU6050_Init+0x420>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001876:	e9d7 1200 	ldrd	r1, r2, [r7]
 800187a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800187e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001882:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001886:	e9cd 4500 	strd	r4, r5, [sp]
 800188a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800188e:	4845      	ldr	r0, [pc, #276]	; (80019a4 <MPU6050_Init+0x430>)
 8001890:	f007 fee4 	bl	800965c <iprintf>
//	    pitch_est = -atan2(Accel_X_CAL,Accel_Z_CAL)*rad2deg;
//	    roll_est = atan2(Accel_Y_CAL,Accel_Z_CAL)*rad2deg;
//	    pitch_est_rad = -atan2(Accel_X_CAL,Accel_Z_CAL);
//	    roll_est_rad = atan2(Accel_Y_CAL,Accel_Z_CAL);

	    pitch_est_rad = -atan(Accel_X_CAL/sqrt(Accel_Z_CAL*Accel_Z_CAL + Accel_Y_CAL*Accel_Y_CAL));
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <MPU6050_Init+0x3f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fdc5 	bl	8000428 <__aeabi_f2d>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <MPU6050_Init+0x408>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <MPU6050_Init+0x408>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fa49 	bl	8000d44 <__aeabi_fmul>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461e      	mov	r6, r3
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <MPU6050_Init+0x400>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <MPU6050_Init+0x400>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f7ff fa3f 	bl	8000d44 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4630      	mov	r0, r6
 80018cc:	f7ff f932 	bl	8000b34 <__addsf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fda8 	bl	8000428 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f00a f850 	bl	800b984 <sqrt>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe ff1e 	bl	800072c <__aeabi_ddiv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	f009 fdea 	bl	800b4d0 <atan>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4618      	mov	r0, r3
 8001902:	4621      	mov	r1, r4
 8001904:	f7ff f8c0 	bl	8000a88 <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <MPU6050_Init+0x434>)
 8001910:	6013      	str	r3, [r2, #0]
	    roll_est_rad = atan(Accel_Y_CAL/sqrt(Accel_Z_CAL*Accel_Z_CAL + Accel_X_CAL*Accel_X_CAL));
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MPU6050_Init+0x400>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MPU6050_Init+0x408>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MPU6050_Init+0x408>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff fa0a 	bl	8000d44 <__aeabi_fmul>
 8001930:	4603      	mov	r3, r0
 8001932:	461e      	mov	r6, r3
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MPU6050_Init+0x3f8>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MPU6050_Init+0x3f8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f7ff fa00 	bl	8000d44 <__aeabi_fmul>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4630      	mov	r0, r6
 800194a:	f7ff f8f3 	bl	8000b34 <__addsf3>
 800194e:	4603      	mov	r3, r0
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd69 	bl	8000428 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f00a f811 	bl	800b984 <sqrt>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	e01f      	b.n	80019ac <MPU6050_Init+0x438>
 800196c:	20000494 	.word	0x20000494
 8001970:	200004ec 	.word	0x200004ec
 8001974:	2000047c 	.word	0x2000047c
 8001978:	20000418 	.word	0x20000418
 800197c:	20000390 	.word	0x20000390
 8001980:	20000508 	.word	0x20000508
 8001984:	200002e0 	.word	0x200002e0
 8001988:	200002c8 	.word	0x200002c8
 800198c:	200002d4 	.word	0x200002d4
 8001990:	2000043c 	.word	0x2000043c
 8001994:	200004e4 	.word	0x200004e4
 8001998:	200005d8 	.word	0x200005d8
 800199c:	44fa0000 	.word	0x44fa0000
 80019a0:	0800cea8 	.word	0x0800cea8
 80019a4:	0800cec0 	.word	0x0800cec0
 80019a8:	20000388 	.word	0x20000388
 80019ac:	f7fe febe 	bl	800072c <__aeabi_ddiv>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	4618      	mov	r0, r3
 80019b6:	4621      	mov	r1, r4
 80019b8:	f009 fd8a 	bl	800b4d0 <atan>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	f7ff f860 	bl	8000a88 <__aeabi_d2f>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <MPU6050_Init+0x4f4>)
 80019cc:	601a      	str	r2, [r3, #0]

	    yaw_est_rad = 0;
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <MPU6050_Init+0x4f8>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

	    pitch_est = pitch_est_rad*rad2deg;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MPU6050_Init+0x4fc>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <MPU6050_Init+0x500>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f7ff f9af 	bl	8000d44 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <MPU6050_Init+0x504>)
 80019ec:	601a      	str	r2, [r3, #0]
	    roll_est = roll_est_rad*rad2deg;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MPU6050_Init+0x4f4>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MPU6050_Init+0x500>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff f9a3 	bl	8000d44 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MPU6050_Init+0x508>)
 8001a04:	601a      	str	r2, [r3, #0]
	    yaw_est = yaw_est_rad*rad2deg;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MPU6050_Init+0x4f8>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MPU6050_Init+0x500>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7ff f997 	bl	8000d44 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MPU6050_Init+0x50c>)
 8001a1c:	601a      	str	r2, [r3, #0]


	    printf("PE:%f PR:%f\r\n",pitch_est,roll_est);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MPU6050_Init+0x504>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd00 	bl	8000428 <__aeabi_f2d>
 8001a28:	4605      	mov	r5, r0
 8001a2a:	460e      	mov	r6, r1
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MPU6050_Init+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fcf9 	bl	8000428 <__aeabi_f2d>
 8001a36:	4603      	mov	r3, r0
 8001a38:	460c      	mov	r4, r1
 8001a3a:	e9cd 3400 	strd	r3, r4, [sp]
 8001a3e:	462a      	mov	r2, r5
 8001a40:	4633      	mov	r3, r6
 8001a42:	4810      	ldr	r0, [pc, #64]	; (8001a84 <MPU6050_Init+0x510>)
 8001a44:	f007 fe0a 	bl	800965c <iprintf>

		mpu6050_ini = 1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MPU6050_Init+0x514>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
	}else{
		printf("problem checking mpu6050 \r\n");
		mpu6050_ini = 0;
	}
}
 8001a4e:	e005      	b.n	8001a5c <MPU6050_Init+0x4e8>
		printf("problem checking mpu6050 \r\n");
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MPU6050_Init+0x518>)
 8001a52:	f007 fe77 	bl	8009744 <puts>
		mpu6050_ini = 0;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MPU6050_Init+0x514>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	20000430 	.word	0x20000430
 8001a6c:	200002dc 	.word	0x200002dc
 8001a70:	20000388 	.word	0x20000388
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000500 	.word	0x20000500
 8001a7c:	20000428 	.word	0x20000428
 8001a80:	20000424 	.word	0x20000424
 8001a84:	0800cee8 	.word	0x0800cee8
 8001a88:	20000260 	.word	0x20000260
 8001a8c:	0800cef8 	.word	0x0800cef8

08001a90 <Drone_Control_quad>:
	//htim3.Instance ->CCR3 = pitch_input;
	//htim3.Instance ->CCR4 = pitch_input;
}
int16_t   	motor_quad_1, motor_quad_2, motor_quad_3, motor_quad_4;

void Drone_Control_quad(void){//DRONE_CONTROL
 8001a90:	b598      	push	{r3, r4, r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	// FR SKY
	pitch_input = channel_pulse[2]-1500;
 8001a94:	4b97      	ldr	r3, [pc, #604]	; (8001cf4 <Drone_Control_quad+0x264>)
 8001a96:	889b      	ldrh	r3, [r3, #4]
 8001a98:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b95      	ldr	r3, [pc, #596]	; (8001cf8 <Drone_Control_quad+0x268>)
 8001aa2:	801a      	strh	r2, [r3, #0]
	yaw_input = -channel_pulse[3] + 1500;
 8001aa4:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <Drone_Control_quad+0x264>)
 8001aa6:	88db      	ldrh	r3, [r3, #6]
 8001aa8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001aac:	3304      	adds	r3, #4
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <Drone_Control_quad+0x26c>)
 8001ab4:	801a      	strh	r2, [r3, #0]
	throttle_input = channel_pulse[0];
 8001ab6:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <Drone_Control_quad+0x264>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <Drone_Control_quad+0x270>)
 8001abe:	801a      	strh	r2, [r3, #0]
	roll_input = channel_pulse[1] - 1500;
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <Drone_Control_quad+0x264>)
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <Drone_Control_quad+0x274>)
 8001ace:	801a      	strh	r2, [r3, #0]
	//pitch_input = channel_pulse[1]-1500;
	//yaw_input = -channel_pulse[3] + 1500;
	//throttle_input = channel_pulse[2];
	//roll_input = channel_pulse[0] - 1500;

	pitch_tar = (float) pitch_input/10;
 8001ad0:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <Drone_Control_quad+0x268>)
 8001ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f8e0 	bl	8000c9c <__aeabi_i2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	498a      	ldr	r1, [pc, #552]	; (8001d08 <Drone_Control_quad+0x278>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f9e3 	bl	8000eac <__aeabi_fdiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <Drone_Control_quad+0x27c>)
 8001aec:	601a      	str	r2, [r3, #0]
	roll_tar = (float) roll_input/10;
 8001aee:	4b85      	ldr	r3, [pc, #532]	; (8001d04 <Drone_Control_quad+0x274>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f8d1 	bl	8000c9c <__aeabi_i2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4982      	ldr	r1, [pc, #520]	; (8001d08 <Drone_Control_quad+0x278>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f9d4 	bl	8000eac <__aeabi_fdiv>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <Drone_Control_quad+0x280>)
 8001b0a:	601a      	str	r2, [r3, #0]
	if (abs(yaw_input)>100)
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <Drone_Control_quad+0x26c>)
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bfb8      	it	lt
 8001b16:	425b      	neglt	r3, r3
 8001b18:	2b64      	cmp	r3, #100	; 0x64
 8001b1a:	dd16      	ble.n	8001b4a <Drone_Control_quad+0xba>
		yaw_tar += (float) yaw_input/1000;
 8001b1c:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <Drone_Control_quad+0x26c>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f8ba 	bl	8000c9c <__aeabi_i2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	497a      	ldr	r1, [pc, #488]	; (8001d14 <Drone_Control_quad+0x284>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f9bd 	bl	8000eac <__aeabi_fdiv>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7fe fff9 	bl	8000b34 <__addsf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b74      	ldr	r3, [pc, #464]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b48:	601a      	str	r2, [r3, #0]
	if (yaw_tar < -180)
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4973      	ldr	r1, [pc, #460]	; (8001d1c <Drone_Control_quad+0x28c>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fa95 	bl	8001080 <__aeabi_fcmplt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <Drone_Control_quad+0xe0>
		yaw_tar += 360;
 8001b5c:	4b6e      	ldr	r3, [pc, #440]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	496f      	ldr	r1, [pc, #444]	; (8001d20 <Drone_Control_quad+0x290>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe ffe6 	bl	8000b34 <__addsf3>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b6e:	601a      	str	r2, [r3, #0]
	if (yaw_tar > 180)
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	496b      	ldr	r1, [pc, #428]	; (8001d24 <Drone_Control_quad+0x294>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff faa0 	bl	80010bc <__aeabi_fcmpgt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <Drone_Control_quad+0x106>
		yaw_tar -= 360;
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4966      	ldr	r1, [pc, #408]	; (8001d20 <Drone_Control_quad+0x290>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe ffd1 	bl	8000b30 <__aeabi_fsub>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b94:	601a      	str	r2, [r3, #0]

	yaw_err = yaw_tar - yaw_est;
 8001b96:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <Drone_Control_quad+0x288>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <Drone_Control_quad+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7fe ffc5 	bl	8000b30 <__aeabi_fsub>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bac:	601a      	str	r2, [r3, #0]
	// course difference
	yaw_err = fmod(yaw_err,360);
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc38 	bl	8000428 <__aeabi_f2d>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <Drone_Control_quad+0x2a0>)
 8001bbe:	f009 fe85 	bl	800b8cc <fmod>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460c      	mov	r4, r1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4621      	mov	r1, r4
 8001bca:	f7fe ff5d 	bl	8000a88 <__aeabi_d2f>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bd2:	601a      	str	r2, [r3, #0]
	if (yaw_err < -180)
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4950      	ldr	r1, [pc, #320]	; (8001d1c <Drone_Control_quad+0x28c>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa50 	bl	8001080 <__aeabi_fcmplt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <Drone_Control_quad+0x16a>
		yaw_err += 360;
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	494d      	ldr	r1, [pc, #308]	; (8001d20 <Drone_Control_quad+0x290>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ffa1 	bl	8000b34 <__addsf3>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bf8:	601a      	str	r2, [r3, #0]

	if (yaw_err > 180)
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4949      	ldr	r1, [pc, #292]	; (8001d24 <Drone_Control_quad+0x294>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa5b 	bl	80010bc <__aeabi_fcmpgt>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <Drone_Control_quad+0x190>
		yaw_err -= 360;
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4943      	ldr	r1, [pc, #268]	; (8001d20 <Drone_Control_quad+0x290>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ff8c 	bl	8000b30 <__aeabi_fsub>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001c1e:	601a      	str	r2, [r3, #0]

	pitch_err = pitch_tar - pitch_est;
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <Drone_Control_quad+0x27c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <Drone_Control_quad+0x2a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe ff80 	bl	8000b30 <__aeabi_fsub>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <Drone_Control_quad+0x2a8>)
 8001c36:	601a      	str	r2, [r3, #0]
	roll_err = roll_tar - roll_est;
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <Drone_Control_quad+0x280>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <Drone_Control_quad+0x2ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f7fe ff74 	bl	8000b30 <__aeabi_fsub>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <Drone_Control_quad+0x2b0>)
 8001c4e:	601a      	str	r2, [r3, #0]


	yaw_ctrl = (int16_t) (Gz*gain_yaw_d + yaw_err*gain_yaw_p);
 8001c50:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <Drone_Control_quad+0x2b4>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <Drone_Control_quad+0x2b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f7ff f872 	bl	8000d44 <__aeabi_fmul>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461c      	mov	r4, r3
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <Drone_Control_quad+0x29c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <Drone_Control_quad+0x2bc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f7ff f868 	bl	8000d44 <__aeabi_fmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7fe ff5b 	bl	8000b34 <__addsf3>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fa25 	bl	80010d0 <__aeabi_f2iz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <Drone_Control_quad+0x2c0>)
 8001c8c:	801a      	strh	r2, [r3, #0]
	pitch_ctrl = (int16_t) (pitch_err * gain_pitch_p + Gy*gain_pitch_d);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <Drone_Control_quad+0x2a8>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <Drone_Control_quad+0x2c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7ff f853 	bl	8000d44 <__aeabi_fmul>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461c      	mov	r4, r3
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <Drone_Control_quad+0x2c8>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <Drone_Control_quad+0x2cc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f7ff f849 	bl	8000d44 <__aeabi_fmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7fe ff3c 	bl	8000b34 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fa06 	bl	80010d0 <__aeabi_f2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <Drone_Control_quad+0x2d0>)
 8001cca:	801a      	strh	r2, [r3, #0]
	roll_ctrl = (int16_t) (roll_err*gain_roll_p + Gx*gain_roll_d);
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <Drone_Control_quad+0x2b0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <Drone_Control_quad+0x2d4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f7ff f834 	bl	8000d44 <__aeabi_fmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461c      	mov	r4, r3
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <Drone_Control_quad+0x2d8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <Drone_Control_quad+0x2dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f7ff f82a 	bl	8000d44 <__aeabi_fmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	e03d      	b.n	8001d70 <Drone_Control_quad+0x2e0>
 8001cf4:	2000024c 	.word	0x2000024c
 8001cf8:	2000038c 	.word	0x2000038c
 8001cfc:	200003cc 	.word	0x200003cc
 8001d00:	20000506 	.word	0x20000506
 8001d04:	200003d0 	.word	0x200003d0
 8001d08:	41200000 	.word	0x41200000
 8001d0c:	200004f4 	.word	0x200004f4
 8001d10:	20000444 	.word	0x20000444
 8001d14:	447a0000 	.word	0x447a0000
 8001d18:	200004e8 	.word	0x200004e8
 8001d1c:	c3340000 	.word	0xc3340000
 8001d20:	43b40000 	.word	0x43b40000
 8001d24:	43340000 	.word	0x43340000
 8001d28:	20000424 	.word	0x20000424
 8001d2c:	200002d0 	.word	0x200002d0
 8001d30:	40768000 	.word	0x40768000
 8001d34:	20000500 	.word	0x20000500
 8001d38:	20000440 	.word	0x20000440
 8001d3c:	20000428 	.word	0x20000428
 8001d40:	20000438 	.word	0x20000438
 8001d44:	200005d8 	.word	0x200005d8
 8001d48:	20000014 	.word	0x20000014
 8001d4c:	20000010 	.word	0x20000010
 8001d50:	200003ce 	.word	0x200003ce
 8001d54:	20000018 	.word	0x20000018
 8001d58:	2000043c 	.word	0x2000043c
 8001d5c:	2000001c 	.word	0x2000001c
 8001d60:	2000048c 	.word	0x2000048c
 8001d64:	20000020 	.word	0x20000020
 8001d68:	200002c8 	.word	0x200002c8
 8001d6c:	20000024 	.word	0x20000024
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe fede 	bl	8000b34 <__addsf3>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f9a8 	bl	80010d0 <__aeabi_f2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <Drone_Control_quad+0x4e0>)
 8001d86:	801a      	strh	r2, [r3, #0]

	motor_quad_1 = throttle_input + pitch_ctrl + roll_ctrl - yaw_ctrl;
 8001d88:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <Drone_Control_quad+0x4e4>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <Drone_Control_quad+0x4e8>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <Drone_Control_quad+0x4e0>)
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <Drone_Control_quad+0x4ec>)
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001db8:	801a      	strh	r2, [r3, #0]
	motor_quad_2 = throttle_input + pitch_ctrl - roll_ctrl + yaw_ctrl;
 8001dba:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <Drone_Control_quad+0x4e4>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <Drone_Control_quad+0x4e8>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <Drone_Control_quad+0x4e0>)
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <Drone_Control_quad+0x4ec>)
 8001ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001dea:	801a      	strh	r2, [r3, #0]
	motor_quad_3 = throttle_input - pitch_ctrl - roll_ctrl - yaw_ctrl;
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <Drone_Control_quad+0x4e4>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <Drone_Control_quad+0x4e8>)
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <Drone_Control_quad+0x4e0>)
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <Drone_Control_quad+0x4ec>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001e1c:	801a      	strh	r2, [r3, #0]
	motor_quad_4 = throttle_input - pitch_ctrl + roll_ctrl + yaw_ctrl;
 8001e1e:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <Drone_Control_quad+0x4e4>)
 8001e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <Drone_Control_quad+0x4e8>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <Drone_Control_quad+0x4e0>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <Drone_Control_quad+0x4ec>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001e4e:	801a      	strh	r2, [r3, #0]

	if (channel_pulse[4] > 1600){
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <Drone_Control_quad+0x500>)
 8001e52:	891b      	ldrh	r3, [r3, #8]
 8001e54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001e58:	d95c      	bls.n	8001f14 <Drone_Control_quad+0x484>
		if (motor_quad_1>2000)
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e64:	dd03      	ble.n	8001e6e <Drone_Control_quad+0x3de>
			motor_quad_1 = 2000;
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001e68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e6c:	801a      	strh	r2, [r3, #0]
		if (motor_quad_1<throttle_idel)
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001e70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <Drone_Control_quad+0x504>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	da04      	bge.n	8001e88 <Drone_Control_quad+0x3f8>
			motor_quad_1 = throttle_idel;
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <Drone_Control_quad+0x504>)
 8001e80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e84:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001e86:	801a      	strh	r2, [r3, #0]
		if (motor_quad_2 > 2000)
 8001e88:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e92:	dd03      	ble.n	8001e9c <Drone_Control_quad+0x40c>
			motor_quad_2 = 2000;
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001e96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e9a:	801a      	strh	r2, [r3, #0]
		if (motor_quad_2 < throttle_idel)
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <Drone_Control_quad+0x504>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	da04      	bge.n	8001eb6 <Drone_Control_quad+0x426>
			motor_quad_2 =throttle_idel;
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <Drone_Control_quad+0x504>)
 8001eae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001eb4:	801a      	strh	r2, [r3, #0]
		if (motor_quad_3 > 2000)
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ec0:	dd03      	ble.n	8001eca <Drone_Control_quad+0x43a>
			motor_quad_3 = 2000;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001ec4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ec8:	801a      	strh	r2, [r3, #0]
		if (motor_quad_3 < throttle_idel)
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001ecc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <Drone_Control_quad+0x504>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	da04      	bge.n	8001ee4 <Drone_Control_quad+0x454>
			motor_quad_3 =throttle_idel;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <Drone_Control_quad+0x504>)
 8001edc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001ee2:	801a      	strh	r2, [r3, #0]
		if (motor_quad_4 > 2000)
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001eee:	dd03      	ble.n	8001ef8 <Drone_Control_quad+0x468>
			motor_quad_4 = 2000;
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001ef2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ef6:	801a      	strh	r2, [r3, #0]
		if (motor_quad_4 < throttle_idel)
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001efa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <Drone_Control_quad+0x504>)
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	da19      	bge.n	8001f3c <Drone_Control_quad+0x4ac>
			motor_quad_4 =throttle_idel;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <Drone_Control_quad+0x504>)
 8001f0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001f10:	801a      	strh	r2, [r3, #0]
 8001f12:	e013      	b.n	8001f3c <Drone_Control_quad+0x4ac>
	}else{
		yaw_tar = yaw_est;
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <Drone_Control_quad+0x508>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <Drone_Control_quad+0x50c>)
 8001f1a:	6013      	str	r3, [r2, #0]
		motor_quad_1 = 1000;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f22:	801a      	strh	r2, [r3, #0]
		motor_quad_2 = 1000;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2a:	801a      	strh	r2, [r3, #0]
		motor_quad_3 = 1000;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	801a      	strh	r2, [r3, #0]
		motor_quad_4 = 1000;
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3a:	801a      	strh	r2, [r3, #0]
	}

	htim3.Instance ->CCR1 = motor_quad_1;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <Drone_Control_quad+0x4f0>)
 8001f3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <Drone_Control_quad+0x510>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance ->CCR2 = motor_quad_2;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <Drone_Control_quad+0x4f4>)
 8001f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <Drone_Control_quad+0x510>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance ->CCR3 = motor_quad_3;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <Drone_Control_quad+0x4f8>)
 8001f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <Drone_Control_quad+0x510>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance ->CCR4 = motor_quad_4;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <Drone_Control_quad+0x4fc>)
 8001f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <Drone_Control_quad+0x510>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
	//printf("pi:%i yi:%i Pi:%.2f Ro:%.2f\r\n",channel_pulse[2], channel_pulse[3],pitch_est,roll_est);

	//printf("PE:%.2f RE:%.2f\r\n", pitch_est, roll_est);
	//htim3.Instance ->CCR3 = pitch_input;
	//htim3.Instance ->CCR4 = pitch_input;
}
 8001f6c:	bf00      	nop
 8001f6e:	bd98      	pop	{r3, r4, r7, pc}
 8001f70:	2000048e 	.word	0x2000048e
 8001f74:	20000506 	.word	0x20000506
 8001f78:	2000048c 	.word	0x2000048c
 8001f7c:	200003ce 	.word	0x200003ce
 8001f80:	200003d2 	.word	0x200003d2
 8001f84:	2000041e 	.word	0x2000041e
 8001f88:	200005ea 	.word	0x200005ea
 8001f8c:	20000490 	.word	0x20000490
 8001f90:	2000024c 	.word	0x2000024c
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	20000424 	.word	0x20000424
 8001f9c:	200004e8 	.word	0x200004e8
 8001fa0:	200003d8 	.word	0x200003d8

08001fa4 <ReadTF_Luna_init>:
float 		dist_spd_lowpass = 0;
float 		dist_tfluna_f = 0;
float 		dist_tfluna_f1 = 0;
int			tf_luna_ini = 0;

void ReadTF_Luna_init(void){
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, TFLUNA_ADDR, TFLUNA_DIST_LOW, 1, &dist_low, 1, 1000);
 8001faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <ReadTF_Luna_init+0x90>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	481e      	ldr	r0, [pc, #120]	; (8002038 <ReadTF_Luna_init+0x94>)
 8001fc0:	f004 f87c 	bl	80060bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, TFLUNA_ADDR, TFLUNA_DIST_HIGH, 1, &dist_high, 1, 1000);
 8001fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <ReadTF_Luna_init+0x98>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	4817      	ldr	r0, [pc, #92]	; (8002038 <ReadTF_Luna_init+0x94>)
 8001fda:	f004 f86f 	bl	80060bc <HAL_I2C_Mem_Read>
	dist_tfluna = (uint16_t)dist_high<<8 | (dist_low);
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <ReadTF_Luna_init+0x98>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <ReadTF_Luna_init+0x90>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <ReadTF_Luna_init+0x9c>)
 8001ff4:	801a      	strh	r2, [r3, #0]
	dist_tfluna_f1 = (float)dist_tfluna/100;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <ReadTF_Luna_init+0x9c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe4a 	bl	8000c94 <__aeabi_ui2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4910      	ldr	r1, [pc, #64]	; (8002044 <ReadTF_Luna_init+0xa0>)
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ff51 	bl	8000eac <__aeabi_fdiv>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <ReadTF_Luna_init+0xa4>)
 8002010:	601a      	str	r2, [r3, #0]
	printf("TF_Luna initialization complete: %.2f \r\n", dist_tfluna_f1);
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <ReadTF_Luna_init+0xa4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa06 	bl	8000428 <__aeabi_f2d>
 800201c:	4603      	mov	r3, r0
 800201e:	460c      	mov	r4, r1
 8002020:	461a      	mov	r2, r3
 8002022:	4623      	mov	r3, r4
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <ReadTF_Luna_init+0xa8>)
 8002026:	f007 fb19 	bl	800965c <iprintf>
}
 800202a:	bf00      	nop
 800202c:	3704      	adds	r7, #4
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	20000264 	.word	0x20000264
 8002038:	20000330 	.word	0x20000330
 800203c:	20000265 	.word	0x20000265
 8002040:	20000266 	.word	0x20000266
 8002044:	42c80000 	.word	0x42c80000
 8002048:	20000280 	.word	0x20000280
 800204c:	0800cf14 	.word	0x0800cf14

08002050 <ReadTF_Luna>:

void ReadTF_Luna(void){
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af04      	add	r7, sp, #16
	delta_time_tf = sys_time_ms - prev_time_tf;
 8002056:	4b4c      	ldr	r3, [pc, #304]	; (8002188 <ReadTF_Luna+0x138>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <ReadTF_Luna+0x13c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <ReadTF_Luna+0x140>)
 8002062:	6013      	str	r3, [r2, #0]
	HAL_I2C_Mem_Read(&hi2c1, TFLUNA_ADDR, TFLUNA_DIST_LOW, 1, &dist_low, 1, 1000);
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	2301      	movs	r3, #1
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <ReadTF_Luna+0x144>)
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	2200      	movs	r2, #0
 8002076:	2120      	movs	r1, #32
 8002078:	4847      	ldr	r0, [pc, #284]	; (8002198 <ReadTF_Luna+0x148>)
 800207a:	f004 f81f 	bl	80060bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, TFLUNA_ADDR, TFLUNA_DIST_HIGH, 1, &dist_high, 1, 1000);
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2301      	movs	r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	4b44      	ldr	r3, [pc, #272]	; (800219c <ReadTF_Luna+0x14c>)
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	2201      	movs	r2, #1
 8002090:	2120      	movs	r1, #32
 8002092:	4841      	ldr	r0, [pc, #260]	; (8002198 <ReadTF_Luna+0x148>)
 8002094:	f004 f812 	bl	80060bc <HAL_I2C_Mem_Read>
	dist_tfluna = (uint16_t)dist_high<<8 | (dist_low);
 8002098:	4b40      	ldr	r3, [pc, #256]	; (800219c <ReadTF_Luna+0x14c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <ReadTF_Luna+0x144>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <ReadTF_Luna+0x150>)
 80020ae:	801a      	strh	r2, [r3, #0]
	dist_tfluna_f = (float)dist_tfluna/100;
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <ReadTF_Luna+0x150>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fded 	bl	8000c94 <__aeabi_ui2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4939      	ldr	r1, [pc, #228]	; (80021a4 <ReadTF_Luna+0x154>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fef4 	bl	8000eac <__aeabi_fdiv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <ReadTF_Luna+0x158>)
 80020ca:	601a      	str	r2, [r3, #0]
	//printf("Dis:%i Lo:%i Hi:%i\r\n",dist_tfluna,dist_low,dist_high);
	delta_dist = (dist_tfluna_f - dist_tfluna_f1);
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <ReadTF_Luna+0x158>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <ReadTF_Luna+0x15c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7fe fd2a 	bl	8000b30 <__aeabi_fsub>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <ReadTF_Luna+0x160>)
 80020e2:	601a      	str	r2, [r3, #0]
	dist_spd = delta_dist/(float)delta_time_tf*1000;
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <ReadTF_Luna+0x160>)
 80020e6:	681c      	ldr	r4, [r3, #0]
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <ReadTF_Luna+0x140>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fdd1 	bl	8000c94 <__aeabi_ui2f>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7fe fed8 	bl	8000eac <__aeabi_fdiv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	492d      	ldr	r1, [pc, #180]	; (80021b4 <ReadTF_Luna+0x164>)
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fe1f 	bl	8000d44 <__aeabi_fmul>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <ReadTF_Luna+0x168>)
 800210c:	601a      	str	r2, [r3, #0]
	dist_spd_lowpass = dist_spd_lowpass*0.9 + dist_spd*0.1;
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <ReadTF_Luna+0x16c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f988 	bl	8000428 <__aeabi_f2d>
 8002118:	a317      	add	r3, pc, #92	; (adr r3, 8002178 <ReadTF_Luna+0x128>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f9db 	bl	80004d8 <__aeabi_dmul>
 8002122:	4603      	mov	r3, r0
 8002124:	460c      	mov	r4, r1
 8002126:	4625      	mov	r5, r4
 8002128:	461c      	mov	r4, r3
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <ReadTF_Luna+0x168>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f97a 	bl	8000428 <__aeabi_f2d>
 8002134:	a312      	add	r3, pc, #72	; (adr r3, 8002180 <ReadTF_Luna+0x130>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f9cd 	bl	80004d8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe f811 	bl	800016c <__adddf3>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	4618      	mov	r0, r3
 8002150:	4621      	mov	r1, r4
 8002152:	f7fe fc99 	bl	8000a88 <__aeabi_d2f>
 8002156:	4602      	mov	r2, r0
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <ReadTF_Luna+0x16c>)
 800215a:	601a      	str	r2, [r3, #0]
	//printf("d:%.2f s1:%.2f\r\n",dist_tfluna_f,dist_spd_lowpass);
	//printf("d:%.2f s:%.2f s1:%.2f\r\n",dist_tfluna_f,dist_spd,dist_spd_lowpass);
	//printf("Dis:%i Spd:%.2f\r\n",dist_tfluna,dist_spd);
	prev_time_tf = sys_time_ms;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <ReadTF_Luna+0x138>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <ReadTF_Luna+0x13c>)
 8002162:	6013      	str	r3, [r2, #0]
	dist_tfluna_f1 = dist_tfluna_f;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <ReadTF_Luna+0x158>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a10      	ldr	r2, [pc, #64]	; (80021ac <ReadTF_Luna+0x15c>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	cccccccd 	.word	0xcccccccd
 800217c:	3feccccc 	.word	0x3feccccc
 8002180:	9999999a 	.word	0x9999999a
 8002184:	3fb99999 	.word	0x3fb99999
 8002188:	200004f0 	.word	0x200004f0
 800218c:	2000026c 	.word	0x2000026c
 8002190:	20000270 	.word	0x20000270
 8002194:	20000264 	.word	0x20000264
 8002198:	20000330 	.word	0x20000330
 800219c:	20000265 	.word	0x20000265
 80021a0:	20000266 	.word	0x20000266
 80021a4:	42c80000 	.word	0x42c80000
 80021a8:	2000027c 	.word	0x2000027c
 80021ac:	20000280 	.word	0x20000280
 80021b0:	20000274 	.word	0x20000274
 80021b4:	447a0000 	.word	0x447a0000
 80021b8:	20000268 	.word	0x20000268
 80021bc:	20000278 	.word	0x20000278

080021c0 <VL53L1_Write>:


#define VL53L1_ADDR 							0x52// 0x29
#define VL53L1_IDENTIFICATION__MODEL_ID			0x010F

int VL53L1_Write(uint8_t *pdata, uint32_t count) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    int status;

    status = HAL_I2C_Master_Transmit(&hi2c1, VL53L1_ADDR, pdata, count, 1000);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	2152      	movs	r1, #82	; 0x52
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <VL53L1_Write+0x30>)
 80021dc:	f003 fb48 	bl	8005870 <HAL_I2C_Master_Transmit>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000330 	.word	0x20000330

080021f4 <VL53L1_Read>:

int VL53L1_Read(uint8_t *pdata, uint32_t count) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    int status;

    status = HAL_I2C_Master_Receive(&hi2c1, VL53L1_ADDR|1, pdata, count, 1000);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b29a      	uxth	r2, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	2153      	movs	r1, #83	; 0x53
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <VL53L1_Read+0x30>)
 8002210:	f003 fc2c 	bl	8005a6c <HAL_I2C_Master_Receive>
 8002214:	4603      	mov	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002218:	68fb      	ldr	r3, [r7, #12]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000330 	.word	0x20000330

08002228 <VL53L1X_init>:




void VL53L1X_init(void){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
	uint8_t 	Rec_Data[2];
	uint8_t 	Trs_Data[2] = {0x01,0x0F};
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <VL53L1X_init+0x38>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	803b      	strh	r3, [r7, #0]
	VL53L1_Write(Trs_Data, 2);
 8002234:	463b      	mov	r3, r7
 8002236:	2102      	movs	r1, #2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ffc1 	bl	80021c0 <VL53L1_Write>
	VL53L1_Read(Rec_Data,2);
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2102      	movs	r1, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ffd6 	bl	80021f4 <VL53L1_Read>

	//HAL_I2C_Mem_Read(&hi2c1, VL53L1_ADDR, Trs_Data, 2, Rec_Data, 2, 1000);
	printf("v1:%i v2:%i\r\n",Rec_Data[0],Rec_Data[1]);
 8002248:	793b      	ldrb	r3, [r7, #4]
 800224a:	4619      	mov	r1, r3
 800224c:	797b      	ldrb	r3, [r7, #5]
 800224e:	461a      	mov	r2, r3
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <VL53L1X_init+0x3c>)
 8002252:	f007 fa03 	bl	800965c <iprintf>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0800cf50 	.word	0x0800cf50
 8002264:	0800cf40 	.word	0x0800cf40

08002268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f001 fb04 	bl	8003878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002270:	f000 f862 	bl	8002338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002274:	f000 fb5e 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 8002278:	f000 fb3e 	bl	80028f8 <MX_DMA_Init>
  MX_CAN_Init();
 800227c:	f000 f922 	bl	80024c4 <MX_CAN_Init>
  MX_ADC1_Init();
 8002280:	f000 f8c4 	bl	800240c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002284:	f000 fada 	bl	800283c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002288:	f000 f98c 	bl	80025a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800228c:	f000 fa12 	bl	80026b4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002290:	f000 fb02 	bl	8002898 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002294:	f000 f952 	bl	800253c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8002298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800229c:	f001 fb4e 	bl	800393c <HAL_Delay>
  MPU6050_Init();//MPU6050_START
 80022a0:	f7ff f968 	bl	8001574 <MPU6050_Init>
  ReadTF_Luna_init();//tf_luna start
 80022a4:	f7ff fe7e 	bl	8001fa4 <ReadTF_Luna_init>
  VL53L1X_init();//VL53L1X start
 80022a8:	f7ff ffbe 	bl	8002228 <VL53L1X_init>

  CAN_BUS_init();//setup filter and send a test message
 80022ac:	f7fe ffd2 	bl	8001254 <CAN_BUS_init>

  //HAL_TIM_Base_Start_IT(&htim2);//PPM_IN
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80022b0:	2100      	movs	r1, #0
 80022b2:	481a      	ldr	r0, [pc, #104]	; (800231c <main+0xb4>)
 80022b4:	f005 fb54 	bl	8007960 <HAL_TIM_IC_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim3);//PWM_OUT
 80022b8:	4819      	ldr	r0, [pc, #100]	; (8002320 <main+0xb8>)
 80022ba:	f005 fa94 	bl	80077e6 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022be:	2100      	movs	r1, #0
 80022c0:	4817      	ldr	r0, [pc, #92]	; (8002320 <main+0xb8>)
 80022c2:	f005 fae7 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80022c6:	2104      	movs	r1, #4
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <main+0xb8>)
 80022ca:	f005 fae3 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80022ce:	2108      	movs	r1, #8
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <main+0xb8>)
 80022d2:	f005 fadf 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80022d6:	210c      	movs	r1, #12
 80022d8:	4811      	ldr	r0, [pc, #68]	; (8002320 <main+0xb8>)
 80022da:	f005 fadb 	bl	8007894 <HAL_TIM_PWM_Start>



  HAL_ADC_Start_DMA(&hadc1, adc_reading, 2);
 80022de:	2202      	movs	r2, #2
 80022e0:	4910      	ldr	r1, [pc, #64]	; (8002324 <main+0xbc>)
 80022e2:	4811      	ldr	r0, [pc, #68]	; (8002328 <main+0xc0>)
 80022e4:	f001 fc24 	bl	8003b30 <HAL_ADC_Start_DMA>
  // if using 3 channels set adc_reading as an array like this -> adc_reading[3];
  //HAL_ADC_Start_DMA(&hadc1, adc_reading, 3);
  joystick_init();//calibration find mid point, this is after ADC DMA initialization
 80022e8:	f7fe ff2a 	bl	8001140 <joystick_init>

  HAL_UART_Transmit(&huart3, aData, 8, 1000);
 80022ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f0:	2208      	movs	r2, #8
 80022f2:	490e      	ldr	r1, [pc, #56]	; (800232c <main+0xc4>)
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <main+0xc8>)
 80022f6:	f006 fb71 	bl	80089dc <HAL_UART_Transmit>
  printf("Hello, world!\r\n");
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <main+0xcc>)
 80022fc:	f007 fa22 	bl	8009744 <puts>
  printf("Hello, world!\r\n");
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <main+0xcc>)
 8002302:	f007 fa1f 	bl	8009744 <puts>
  printf("Hello, world!\r\n");
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <main+0xcc>)
 8002308:	f007 fa1c 	bl	8009744 <puts>
  HAL_UART_Transmit(&huart3, aData, 8, 1000);//test uart 3
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	2208      	movs	r2, #8
 8002312:	4906      	ldr	r1, [pc, #24]	; (800232c <main+0xc4>)
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <main+0xc8>)
 8002316:	f006 fb61 	bl	80089dc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800231a:	e7fe      	b.n	800231a <main+0xb2>
 800231c:	20000510 	.word	0x20000510
 8002320:	200003d8 	.word	0x200003d8
 8002324:	20000398 	.word	0x20000398
 8002328:	2000044c 	.word	0x2000044c
 800232c:	20000000 	.word	0x20000000
 8002330:	200002ec 	.word	0x200002ec
 8002334:	0800cf54 	.word	0x0800cf54

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	; 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002342:	2228      	movs	r2, #40	; 0x28
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f006 fd30 	bl	8008dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002368:	2301      	movs	r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800236c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002376:	2301      	movs	r3, #1
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237a:	2302      	movs	r3, #2
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002384:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002388:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238e:	4618      	mov	r0, r3
 8002390:	f004 fd2c 	bl	8006dec <HAL_RCC_OscConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <SystemClock_Config+0x6c>
  {
	printf("RCC_error_1\n\r");
 800239a:	4819      	ldr	r0, [pc, #100]	; (8002400 <SystemClock_Config+0xc8>)
 800239c:	f007 f95e 	bl	800965c <iprintf>
    Error_Handler();
 80023a0:	f000 fe00 	bl	8002fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a4:	230f      	movs	r3, #15
 80023a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2102      	movs	r1, #2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 ff93 	bl	80072ec <HAL_RCC_ClockConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <SystemClock_Config+0x9e>
  {
	printf("RCC_error_2\n\r");
 80023cc:	480d      	ldr	r0, [pc, #52]	; (8002404 <SystemClock_Config+0xcc>)
 80023ce:	f007 f945 	bl	800965c <iprintf>
    Error_Handler();
 80023d2:	f000 fde7 	bl	8002fa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023d6:	2302      	movs	r3, #2
 80023d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f005 f91e 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <SystemClock_Config+0xc0>
  {
	printf("RCC_error_3\n\r");
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <SystemClock_Config+0xd0>)
 80023f0:	f007 f934 	bl	800965c <iprintf>
    Error_Handler();
 80023f4:	f000 fdd6 	bl	8002fa4 <Error_Handler>
  }
}
 80023f8:	bf00      	nop
 80023fa:	3750      	adds	r7, #80	; 0x50
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0800cf64 	.word	0x0800cf64
 8002404:	0800cf74 	.word	0x0800cf74
 8002408:	0800cf84 	.word	0x0800cf84

0800240c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <MX_ADC1_Init+0xa4>)
 800241e:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <MX_ADC1_Init+0xa8>)
 8002420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_ADC1_Init+0xa4>)
 800242c:	2201      	movs	r2, #1
 800242e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002438:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800243c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002446:	2202      	movs	r2, #2
 8002448:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800244a:	4819      	ldr	r0, [pc, #100]	; (80024b0 <MX_ADC1_Init+0xa4>)
 800244c:	f001 fa98 	bl	8003980 <HAL_ADC_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <MX_ADC1_Init+0x54>
  {
	printf("ADC_error_1\n\r");
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <MX_ADC1_Init+0xac>)
 8002458:	f007 f900 	bl	800965c <iprintf>
    Error_Handler();
 800245c:	f000 fda2 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002460:	2304      	movs	r3, #4
 8002462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002464:	2301      	movs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002468:	2306      	movs	r3, #6
 800246a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4619      	mov	r1, r3
 8002470:	480f      	ldr	r0, [pc, #60]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002472:	f001 fc57 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <MX_ADC1_Init+0x7a>
  {
	printf("ADC_error_2\n\r");
 800247c:	480f      	ldr	r0, [pc, #60]	; (80024bc <MX_ADC1_Init+0xb0>)
 800247e:	f007 f8ed 	bl	800965c <iprintf>
    Error_Handler();
 8002482:	f000 fd8f 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002486:	2305      	movs	r3, #5
 8002488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800248a:	2302      	movs	r3, #2
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <MX_ADC1_Init+0xa4>)
 8002494:	f001 fc46 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <MX_ADC1_Init+0x9c>
  {
	  printf("ADC_error_3\n\r");
 800249e:	4808      	ldr	r0, [pc, #32]	; (80024c0 <MX_ADC1_Init+0xb4>)
 80024a0:	f007 f8dc 	bl	800965c <iprintf>
    Error_Handler();
 80024a4:	f000 fd7e 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000044c 	.word	0x2000044c
 80024b4:	40012400 	.word	0x40012400
 80024b8:	0800cf94 	.word	0x0800cf94
 80024bc:	0800cfa4 	.word	0x0800cfa4
 80024c0:	0800cfb4 	.word	0x0800cfb4

080024c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_CAN_Init+0x6c>)
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <MX_CAN_Init+0x70>)
 80024cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_CAN_Init+0x6c>)
 80024d0:	2206      	movs	r2, #6
 80024d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_CAN_Init+0x6c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_CAN_Init+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_CAN_Init+0x6c>)
 80024e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_CAN_Init+0x6c>)
 80024ea:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80024ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_CAN_Init+0x6c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_CAN_Init+0x6c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_CAN_Init+0x6c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_CAN_Init+0x6c>)
 8002504:	2200      	movs	r2, #0
 8002506:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_CAN_Init+0x6c>)
 800250a:	2200      	movs	r2, #0
 800250c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <MX_CAN_Init+0x6c>)
 8002510:	2200      	movs	r2, #0
 8002512:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002514:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_CAN_Init+0x6c>)
 8002516:	f001 fdef 	bl	80040f8 <HAL_CAN_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <MX_CAN_Init+0x66>
  {
	  printf("CAN_error_1\n\r");
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_CAN_Init+0x74>)
 8002522:	f007 f89b 	bl	800965c <iprintf>
    Error_Handler();
 8002526:	f000 fd3d 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200003a0 	.word	0x200003a0
 8002534:	40006400 	.word	0x40006400
 8002538:	0800cfc4 	.word	0x0800cfc4

0800253c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_I2C1_Init+0x58>)
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <MX_I2C1_Init+0x5c>)
 8002544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_I2C1_Init+0x58>)
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <MX_I2C1_Init+0x60>)
 800254a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_I2C1_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_I2C1_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_I2C1_Init+0x58>)
 800255a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800255e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_I2C1_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_I2C1_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_I2C1_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_I2C1_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <MX_I2C1_Init+0x58>)
 800257a:	f003 f851 	bl	8005620 <HAL_I2C_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <MX_I2C1_Init+0x52>
  {
	  printf("I2C_err_1\n\r");
 8002584:	4806      	ldr	r0, [pc, #24]	; (80025a0 <MX_I2C1_Init+0x64>)
 8002586:	f007 f869 	bl	800965c <iprintf>
    Error_Handler();
 800258a:	f000 fd0b 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000330 	.word	0x20000330
 8002598:	40005400 	.word	0x40005400
 800259c:	00061a80 	.word	0x00061a80
 80025a0:	0800cfd4 	.word	0x0800cfd4

080025a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0318 	add.w	r3, r7, #24
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025c2:	463b      	mov	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <MX_TIM2_Init+0xf8>)
 80025d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <MX_TIM2_Init+0xf8>)
 80025d8:	2247      	movs	r2, #71	; 0x47
 80025da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b2f      	ldr	r3, [pc, #188]	; (800269c <MX_TIM2_Init+0xf8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80025e2:	4b2e      	ldr	r3, [pc, #184]	; (800269c <MX_TIM2_Init+0xf8>)
 80025e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <MX_TIM2_Init+0xf8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <MX_TIM2_Init+0xf8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f6:	4829      	ldr	r0, [pc, #164]	; (800269c <MX_TIM2_Init+0xf8>)
 80025f8:	f005 f8ca 	bl	8007790 <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <MX_TIM2_Init+0x68>
  {
	  printf("TIM2_err_1\n\r");
 8002602:	4827      	ldr	r0, [pc, #156]	; (80026a0 <MX_TIM2_Init+0xfc>)
 8002604:	f007 f82a 	bl	800965c <iprintf>
    Error_Handler();
 8002608:	f000 fccc 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	4619      	mov	r1, r3
 8002618:	4820      	ldr	r0, [pc, #128]	; (800269c <MX_TIM2_Init+0xf8>)
 800261a:	f005 fc73 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <MX_TIM2_Init+0x8a>
  {
	  printf("TIM2_err_2\n\r");
 8002624:	481f      	ldr	r0, [pc, #124]	; (80026a4 <MX_TIM2_Init+0x100>)
 8002626:	f007 f819 	bl	800965c <iprintf>
    Error_Handler();
 800262a:	f000 fcbb 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800262e:	481b      	ldr	r0, [pc, #108]	; (800269c <MX_TIM2_Init+0xf8>)
 8002630:	f005 f962 	bl	80078f8 <HAL_TIM_IC_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <MX_TIM2_Init+0xa0>
  {
	  printf("TIM2_err_3\n\r");
 800263a:	481b      	ldr	r0, [pc, #108]	; (80026a8 <MX_TIM2_Init+0x104>)
 800263c:	f007 f80e 	bl	800965c <iprintf>
    Error_Handler();
 8002640:	f000 fcb0 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	4812      	ldr	r0, [pc, #72]	; (800269c <MX_TIM2_Init+0xf8>)
 8002654:	f006 f91f 	bl	8008896 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <MX_TIM2_Init+0xc4>
  {
	  printf("TIM2_err_4\n\r");
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM2_Init+0x108>)
 8002660:	f006 fffc 	bl	800965c <iprintf>
    Error_Handler();
 8002664:	f000 fc9e 	bl	8002fa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002668:	2300      	movs	r3, #0
 800266a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800266c:	2301      	movs	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_TIM2_Init+0xf8>)
 8002680:	f005 fade 	bl	8007c40 <HAL_TIM_IC_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <MX_TIM2_Init+0xf0>
  {
	  printf("TIM2_err_5\n\r");
 800268a:	4809      	ldr	r0, [pc, #36]	; (80026b0 <MX_TIM2_Init+0x10c>)
 800268c:	f006 ffe6 	bl	800965c <iprintf>
    Error_Handler();
 8002690:	f000 fc88 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000510 	.word	0x20000510
 80026a0:	0800cfe0 	.word	0x0800cfe0
 80026a4:	0800cff0 	.word	0x0800cff0
 80026a8:	0800d000 	.word	0x0800d000
 80026ac:	0800d010 	.word	0x0800d010
 80026b0:	0800d020 	.word	0x0800d020

080026b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08e      	sub	sp, #56	; 0x38
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
 80026e0:	615a      	str	r2, [r3, #20]
 80026e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <MX_TIM3_Init+0x160>)
 80026e6:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <MX_TIM3_Init+0x164>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <MX_TIM3_Init+0x160>)
 80026ec:	2247      	movs	r2, #71	; 0x47
 80026ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <MX_TIM3_Init+0x160>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;//main timer cycle interrupt 10000-1 100hz 5000-1 200hz
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <MX_TIM3_Init+0x160>)
 80026f8:	f241 3287 	movw	r2, #4999	; 0x1387
 80026fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <MX_TIM3_Init+0x160>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <MX_TIM3_Init+0x160>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800270a:	4842      	ldr	r0, [pc, #264]	; (8002814 <MX_TIM3_Init+0x160>)
 800270c:	f005 f840 	bl	8007790 <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <MX_TIM3_Init+0x6c>
  {
	  printf("TIM3_err_1\n\r");
 8002716:	4841      	ldr	r0, [pc, #260]	; (800281c <MX_TIM3_Init+0x168>)
 8002718:	f006 ffa0 	bl	800965c <iprintf>
    Error_Handler();
 800271c:	f000 fc42 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272a:	4619      	mov	r1, r3
 800272c:	4839      	ldr	r0, [pc, #228]	; (8002814 <MX_TIM3_Init+0x160>)
 800272e:	f005 fbe9 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <MX_TIM3_Init+0x8e>
  {
	  printf("TIM3_err_2\n\r");
 8002738:	4839      	ldr	r0, [pc, #228]	; (8002820 <MX_TIM3_Init+0x16c>)
 800273a:	f006 ff8f 	bl	800965c <iprintf>
    Error_Handler();
 800273e:	f000 fc31 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002742:	4834      	ldr	r0, [pc, #208]	; (8002814 <MX_TIM3_Init+0x160>)
 8002744:	f005 f872 	bl	800782c <HAL_TIM_PWM_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <MX_TIM3_Init+0xa4>
  {
	  printf("TIM3_err_3\n\r");
 800274e:	4835      	ldr	r0, [pc, #212]	; (8002824 <MX_TIM3_Init+0x170>)
 8002750:	f006 ff84 	bl	800965c <iprintf>
    Error_Handler();
 8002754:	f000 fc26 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4619      	mov	r1, r3
 8002766:	482b      	ldr	r0, [pc, #172]	; (8002814 <MX_TIM3_Init+0x160>)
 8002768:	f006 f895 	bl	8008896 <HAL_TIMEx_MasterConfigSynchronization>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <MX_TIM3_Init+0xc8>
  {
	  printf("TIM3_err_4\n\r");
 8002772:	482d      	ldr	r0, [pc, #180]	; (8002828 <MX_TIM3_Init+0x174>)
 8002774:	f006 ff72 	bl	800965c <iprintf>
    Error_Handler();
 8002778:	f000 fc14 	bl	8002fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277c:	2360      	movs	r3, #96	; 0x60
 800277e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	4619      	mov	r1, r3
 8002794:	481f      	ldr	r0, [pc, #124]	; (8002814 <MX_TIM3_Init+0x160>)
 8002796:	f005 faef 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <MX_TIM3_Init+0xf6>
  {
	  printf("TIM3_err_5\n\r");
 80027a0:	4822      	ldr	r0, [pc, #136]	; (800282c <MX_TIM3_Init+0x178>)
 80027a2:	f006 ff5b 	bl	800965c <iprintf>
    Error_Handler();
 80027a6:	f000 fbfd 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2204      	movs	r2, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4818      	ldr	r0, [pc, #96]	; (8002814 <MX_TIM3_Init+0x160>)
 80027b2:	f005 fae1 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <MX_TIM3_Init+0x112>
  {
	  printf("TIM3_err_6\n\r");
 80027bc:	481c      	ldr	r0, [pc, #112]	; (8002830 <MX_TIM3_Init+0x17c>)
 80027be:	f006 ff4d 	bl	800965c <iprintf>
    Error_Handler();
 80027c2:	f000 fbef 	bl	8002fa4 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2208      	movs	r2, #8
 80027d0:	4619      	mov	r1, r3
 80027d2:	4810      	ldr	r0, [pc, #64]	; (8002814 <MX_TIM3_Init+0x160>)
 80027d4:	f005 fad0 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <MX_TIM3_Init+0x134>
  {
	  printf("TIM3_err_7\n\r");
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <MX_TIM3_Init+0x180>)
 80027e0:	f006 ff3c 	bl	800965c <iprintf>
    Error_Handler();
 80027e4:	f000 fbde 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	220c      	movs	r2, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4809      	ldr	r0, [pc, #36]	; (8002814 <MX_TIM3_Init+0x160>)
 80027f0:	f005 fac2 	bl	8007d78 <HAL_TIM_PWM_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <MX_TIM3_Init+0x150>
  {
	  printf("TIM3_err_8\n\r");
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <MX_TIM3_Init+0x184>)
 80027fc:	f006 ff2e 	bl	800965c <iprintf>
    Error_Handler();
 8002800:	f000 fbd0 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <MX_TIM3_Init+0x160>)
 8002806:	f000 fd71 	bl	80032ec <HAL_TIM_MspPostInit>

}
 800280a:	bf00      	nop
 800280c:	3738      	adds	r7, #56	; 0x38
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200003d8 	.word	0x200003d8
 8002818:	40000400 	.word	0x40000400
 800281c:	0800d030 	.word	0x0800d030
 8002820:	0800d040 	.word	0x0800d040
 8002824:	0800d050 	.word	0x0800d050
 8002828:	0800d060 	.word	0x0800d060
 800282c:	0800d070 	.word	0x0800d070
 8002830:	0800d080 	.word	0x0800d080
 8002834:	0800d090 	.word	0x0800d090
 8002838:	0800d0a0 	.word	0x0800d0a0

0800283c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <MX_USART2_UART_Init+0x54>)
 8002844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800284c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USART2_UART_Init+0x50>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <MX_USART2_UART_Init+0x50>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <MX_USART2_UART_Init+0x50>)
 8002874:	f006 f865 	bl	8008942 <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <MX_USART2_UART_Init+0x4c>
  {
	  printf("UART2_err_1\n\r");
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_USART2_UART_Init+0x58>)
 8002880:	f006 feec 	bl	800965c <iprintf>
    Error_Handler();
 8002884:	f000 fb8e 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000570 	.word	0x20000570
 8002890:	40004400 	.word	0x40004400
 8002894:	0800d0b0 	.word	0x0800d0b0

08002898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <MX_USART3_UART_Init+0x54>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART3_UART_Init+0x58>)
 80028a6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028bc:	220c      	movs	r2, #12
 80028be:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028cc:	4806      	ldr	r0, [pc, #24]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028ce:	f006 f838 	bl	8008942 <HAL_UART_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <MX_USART3_UART_Init+0x4a>
  {
	  printf("UART3_err_1\n\r");
 80028d8:	4806      	ldr	r0, [pc, #24]	; (80028f4 <MX_USART3_UART_Init+0x5c>)
 80028da:	f006 febf 	bl	800965c <iprintf>
    Error_Handler();
 80028de:	f000 fb61 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200002ec 	.word	0x200002ec
 80028ec:	40004800 	.word	0x40004800
 80028f0:	001e8480 	.word	0x001e8480
 80028f4:	0800d0c0 	.word	0x0800d0c0

080028f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_DMA_Init+0x38>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <MX_DMA_Init+0x38>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6153      	str	r3, [r2, #20]
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_DMA_Init+0x38>)
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	200b      	movs	r0, #11
 800291c:	f002 fb01 	bl	8004f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002920:	200b      	movs	r0, #11
 8002922:	f002 fb1a 	bl	8004f5a <HAL_NVIC_EnableIRQ>

}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000

08002934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_GPIO_Init+0x58>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <MX_GPIO_Init+0x58>)
 8002940:	f043 0320 	orr.w	r3, r3, #32
 8002944:	6193      	str	r3, [r2, #24]
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_GPIO_Init+0x58>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_GPIO_Init+0x58>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4a0d      	ldr	r2, [pc, #52]	; (800298c <MX_GPIO_Init+0x58>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6193      	str	r3, [r2, #24]
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_GPIO_Init+0x58>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_GPIO_Init+0x58>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <MX_GPIO_Init+0x58>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6193      	str	r3, [r2, #24]
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <MX_GPIO_Init+0x58>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){//TIME_INTERRUPT
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  	sys_time_up ++;
 8002998:	4bb1      	ldr	r3, [pc, #708]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4baf      	ldr	r3, [pc, #700]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80029a2:	801a      	strh	r2, [r3, #0]
 	sys_time_ms = sys_time_up * 5;
 80029a4:	4bae      	ldr	r3, [pc, #696]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4bac      	ldr	r3, [pc, #688]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80029b4:	601a      	str	r2, [r3, #0]
 	//Read_joystick();
 	if (tf_luna_ini == 1){
 80029b6:	4bac      	ldr	r3, [pc, #688]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10c      	bne.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0x48>
 		if (sys_time_ms%dist_measure_devider == 0)
 80029be:	4ba9      	ldr	r3, [pc, #676]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4aaa      	ldr	r2, [pc, #680]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80029ca:	fb02 f201 	mul.w	r2, r2, r1
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0x48>
 			ReadTF_Luna();
 80029d4:	f7ff fb3c 	bl	8002050 <ReadTF_Luna>
 	}

 	if (mpu6050_ini == 1){
 80029d8:	4ba5      	ldr	r3, [pc, #660]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 82db 	bne.w	8002f98 <HAL_TIM_PeriodElapsedCallback+0x608>
 		MPU6050_Read_Accel();
 80029e2:	f7fe fced 	bl	80013c0 <MPU6050_Read_Accel>
 		MPU6050_Read_Gyro();
 80029e6:	f7fe fd59 	bl	800149c <MPU6050_Read_Gyro>
 		Gx -= Gyro_X_CAL;
 80029ea:	4ba2      	ldr	r3, [pc, #648]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4ba2      	ldr	r3, [pc, #648]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7fe f89b 	bl	8000b30 <__aeabi_fsub>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a00:	601a      	str	r2, [r3, #0]
 		Gy -= Gyro_Y_CAL;
 8002a02:	4b9e      	ldr	r3, [pc, #632]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b9e      	ldr	r3, [pc, #632]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f7fe f88f 	bl	8000b30 <__aeabi_fsub>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b99      	ldr	r3, [pc, #612]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002a18:	601a      	str	r2, [r3, #0]
 		Gz -= Gyro_Z_CAL;
 8002a1a:	4b9a      	ldr	r3, [pc, #616]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b9a      	ldr	r3, [pc, #616]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f7fe f883 	bl	8000b30 <__aeabi_fsub>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b95      	ldr	r3, [pc, #596]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002a30:	601a      	str	r2, [r3, #0]
 		// times delta time and convert to rad
 		Gx_rad = Gx * 0.0001745329;
 8002a32:	4b90      	ldr	r3, [pc, #576]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fcf6 	bl	8000428 <__aeabi_f2d>
 8002a3c:	a386      	add	r3, pc, #536	; (adr r3, 8002c58 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fd49 	bl	80004d8 <__aeabi_dmul>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	f7fe f81b 	bl	8000a88 <__aeabi_d2f>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b8d      	ldr	r3, [pc, #564]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002a56:	601a      	str	r2, [r3, #0]
 		Gy_rad = Gy * 0.0001745329;
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fce3 	bl	8000428 <__aeabi_f2d>
 8002a62:	a37d      	add	r3, pc, #500	; (adr r3, 8002c58 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fd36 	bl	80004d8 <__aeabi_dmul>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	4618      	mov	r0, r3
 8002a72:	4621      	mov	r1, r4
 8002a74:	f7fe f808 	bl	8000a88 <__aeabi_d2f>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002a7c:	601a      	str	r2, [r3, #0]
 		Gz_rad = Gz * 0.0001745329;
 8002a7e:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fcd0 	bl	8000428 <__aeabi_f2d>
 8002a88:	a373      	add	r3, pc, #460	; (adr r3, 8002c58 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fd23 	bl	80004d8 <__aeabi_dmul>
 8002a92:	4603      	mov	r3, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f7fd fff5 	bl	8000a88 <__aeabi_d2f>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002aa2:	601a      	str	r2, [r3, #0]
 		//pitch_a = -atan2(Ax,Az)*57.2957795;
 		//roll_a = atan2(Ay,Az)*57.2957795;
 		pitch_a_rad = -atan(Ax/sqrt(Az*Az + Ay*Ay));
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fcbd 	bl	8000428 <__aeabi_f2d>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	460d      	mov	r5, r1
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7fe f941 	bl	8000d44 <__aeabi_fmul>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461e      	mov	r6, r3
 8002ac6:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7fe f937 	bl	8000d44 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4630      	mov	r0, r6
 8002adc:	f7fe f82a 	bl	8000b34 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fca0 	bl	8000428 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f008 ff48 	bl	800b984 <sqrt>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fe16 	bl	800072c <__aeabi_ddiv>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4618      	mov	r0, r3
 8002b06:	4621      	mov	r1, r4
 8002b08:	f008 fce2 	bl	800b4d0 <atan>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4618      	mov	r0, r3
 8002b12:	4621      	mov	r1, r4
 8002b14:	f7fd ffb8 	bl	8000a88 <__aeabi_d2f>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b1e:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b20:	6013      	str	r3, [r2, #0]
 		roll_a_rad = atan(Ay/sqrt(Az*Az + Ax*Ax));
 8002b22:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fc7e 	bl	8000428 <__aeabi_f2d>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	460d      	mov	r5, r1
 8002b30:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7fe f902 	bl	8000d44 <__aeabi_fmul>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461e      	mov	r6, r3
 8002b44:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7fe f8f8 	bl	8000d44 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f7fd ffeb 	bl	8000b34 <__addsf3>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fc61 	bl	8000428 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f008 ff09 	bl	800b984 <sqrt>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd fdd7 	bl	800072c <__aeabi_ddiv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460c      	mov	r4, r1
 8002b82:	4618      	mov	r0, r3
 8002b84:	4621      	mov	r1, r4
 8002b86:	f008 fca3 	bl	800b4d0 <atan>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4621      	mov	r1, r4
 8002b92:	f7fd ff79 	bl	8000a88 <__aeabi_d2f>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002b9a:	601a      	str	r2, [r3, #0]
 		//pitch_a_rad = -atan2(Ax,Az);
 		//roll_a_rad = atan2(Ay,Az);

 		cos_roll = cos(roll_est_rad);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fc41 	bl	8000428 <__aeabi_f2d>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	f008 fe19 	bl	800b7e4 <cos>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f7fd ff65 	bl	8000a88 <__aeabi_d2f>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002bc2:	601a      	str	r2, [r3, #0]
 		sin_roll = sin(roll_est_rad);
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc2d 	bl	8000428 <__aeabi_f2d>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	f008 fe3f 	bl	800b858 <sin>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	4618      	mov	r0, r3
 8002be0:	4621      	mov	r1, r4
 8002be2:	f7fd ff51 	bl	8000a88 <__aeabi_d2f>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002bea:	601a      	str	r2, [r3, #0]
 		cos_pitch = cos(pitch_est_rad);
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc19 	bl	8000428 <__aeabi_f2d>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	f008 fdf1 	bl	800b7e4 <cos>
 8002c02:	4603      	mov	r3, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	4618      	mov	r0, r3
 8002c08:	4621      	mov	r1, r4
 8002c0a:	f7fd ff3d 	bl	8000a88 <__aeabi_d2f>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c12:	601a      	str	r2, [r3, #0]
 		sin_pitch = sin(pitch_est_rad);
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc05 	bl	8000428 <__aeabi_f2d>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	460c      	mov	r4, r1
 8002c22:	4618      	mov	r0, r3
 8002c24:	4621      	mov	r1, r4
 8002c26:	f008 fe17 	bl	800b858 <sin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4621      	mov	r1, r4
 8002c32:	f7fd ff29 	bl	8000a88 <__aeabi_d2f>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c3a:	601a      	str	r2, [r3, #0]

// 		yaw_est += cos(roll_est*0.01745329)*cos(pitch_est*0.01745329)*Gz*0.01;
// 		yaw_est += sin(roll_est*0.01745329)*Gy*0.01;
// 		yaw_est -= sin(pitch_est*0.01745329)*Gx*0.01;

 		yaw_est_rad +=  cos_roll*cos_pitch*Gz_rad + sin_roll*Gy_rad - sin_pitch*Gx_rad;
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe f87c 	bl	8000d44 <__aeabi_fmul>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	e038      	b.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x334>
 8002c52:	bf00      	nop
 8002c54:	f3af 8000 	nop.w
 8002c58:	31f57c8c 	.word	0x31f57c8c
 8002c5c:	3f26e05a 	.word	0x3f26e05a
 8002c60:	2000041c 	.word	0x2000041c
 8002c64:	200004f0 	.word	0x200004f0
 8002c68:	20000284 	.word	0x20000284
 8002c6c:	20000028 	.word	0x20000028
 8002c70:	20000260 	.word	0x20000260
 8002c74:	200002c8 	.word	0x200002c8
 8002c78:	200002e0 	.word	0x200002e0
 8002c7c:	2000043c 	.word	0x2000043c
 8002c80:	200002d4 	.word	0x200002d4
 8002c84:	200005d8 	.word	0x200005d8
 8002c88:	200004e4 	.word	0x200004e4
 8002c8c:	2000050c 	.word	0x2000050c
 8002c90:	20000484 	.word	0x20000484
 8002c94:	200004dc 	.word	0x200004dc
 8002c98:	200004ec 	.word	0x200004ec
 8002c9c:	20000508 	.word	0x20000508
 8002ca0:	20000418 	.word	0x20000418
 8002ca4:	200003c8 	.word	0x200003c8
 8002ca8:	20000384 	.word	0x20000384
 8002cac:	20000430 	.word	0x20000430
 8002cb0:	200005e4 	.word	0x200005e4
 8002cb4:	200004fc 	.word	0x200004fc
 8002cb8:	20000388 	.word	0x20000388
 8002cbc:	20000294 	.word	0x20000294
 8002cc0:	20000434 	.word	0x20000434
 8002cc4:	4ba2      	ldr	r3, [pc, #648]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe f83a 	bl	8000d44 <__aeabi_fmul>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	4b9f      	ldr	r3, [pc, #636]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b9f      	ldr	r3, [pc, #636]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fe f830 	bl	8000d44 <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7fd ff23 	bl	8000b34 <__addsf3>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	4b9a      	ldr	r3, [pc, #616]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b9a      	ldr	r3, [pc, #616]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f7fe f821 	bl	8000d44 <__aeabi_fmul>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4619      	mov	r1, r3
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7fd ff12 	bl	8000b30 <__aeabi_fsub>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7fd ff0c 	bl	8000b34 <__addsf3>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002d22:	601a      	str	r2, [r3, #0]
 		roll_est_rad += cos_pitch*Gx_rad + sin_pitch*Gz_rad;
 8002d24:	4b90      	ldr	r3, [pc, #576]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7fe f808 	bl	8000d44 <__aeabi_fmul>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461c      	mov	r4, r3
 8002d38:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7fd fffe 	bl	8000d44 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7fd fef1 	bl	8000b34 <__addsf3>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7fd fee9 	bl	8000b34 <__addsf3>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002d68:	601a      	str	r2, [r3, #0]
 		pitch_est_rad += cos_roll*Gy_rad -sin_roll*Gz_rad;
 8002d6a:	4b81      	ldr	r3, [pc, #516]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b7a      	ldr	r3, [pc, #488]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f7fd ffe5 	bl	8000d44 <__aeabi_fmul>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fd ffdb 	bl	8000d44 <__aeabi_fmul>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7fd fecc 	bl	8000b30 <__aeabi_fsub>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fd fec6 	bl	8000b34 <__addsf3>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002dae:	601a      	str	r2, [r3, #0]

 		if (yaw_est_rad > 3.14159265358979)
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fb37 	bl	8000428 <__aeabi_f2d>
 8002dba:	a35d      	add	r3, pc, #372	; (adr r3, 8002f30 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <HAL_TIM_PeriodElapsedCallback+0x460>
			yaw_est_rad -= 6.28318530717959;
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fb2a 	bl	8000428 <__aeabi_f2d>
 8002dd4:	a358      	add	r3, pc, #352	; (adr r3, 8002f38 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd f9c5 	bl	8000168 <__aeabi_dsub>
 8002dde:	4603      	mov	r3, r0
 8002de0:	460c      	mov	r4, r1
 8002de2:	4618      	mov	r0, r3
 8002de4:	4621      	mov	r1, r4
 8002de6:	f7fd fe4f 	bl	8000a88 <__aeabi_d2f>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002dee:	601a      	str	r2, [r3, #0]
 		if (yaw_est_rad < -3.14159265358979)
 8002df0:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fb17 	bl	8000428 <__aeabi_f2d>
 8002dfa:	a351      	add	r3, pc, #324	; (adr r3, 8002f40 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fddc 	bl	80009bc <__aeabi_dcmplt>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <HAL_TIM_PeriodElapsedCallback+0x4a0>
			yaw_est_rad += 6.28318530717959;
 8002e0a:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb0a 	bl	8000428 <__aeabi_f2d>
 8002e14:	a348      	add	r3, pc, #288	; (adr r3, 8002f38 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd f9a7 	bl	800016c <__adddf3>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460c      	mov	r4, r1
 8002e22:	4618      	mov	r0, r3
 8002e24:	4621      	mov	r1, r4
 8002e26:	f7fd fe2f 	bl	8000a88 <__aeabi_d2f>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002e2e:	601a      	str	r2, [r3, #0]
// 		roll_est += cos(pitch_est*0.01745329)*Gx*0.01;

// 		pitch_est += -sin(roll_est*0.01745329)*Gz*0.01;//0.01*0.01745329);
// 		roll_est += sin(pitch_est*0.01745329)*Gz*0.01;//0.01*0.01745329);

 		pitch_ino = pitch_a_rad - pitch_est_rad;
 8002e30:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fd fe78 	bl	8000b30 <__aeabi_fsub>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8002e46:	601a      	str	r2, [r3, #0]
 		pitch_est_rad += pitch_ino*0.005;
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd faeb 	bl	8000428 <__aeabi_f2d>
 8002e52:	4604      	mov	r4, r0
 8002e54:	460d      	mov	r5, r1
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fae4 	bl	8000428 <__aeabi_f2d>
 8002e60:	a339      	add	r3, pc, #228	; (adr r3, 8002f48 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fb37 	bl	80004d8 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd f97b 	bl	800016c <__adddf3>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f7fd fe03 	bl	8000a88 <__aeabi_d2f>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002e86:	601a      	str	r2, [r3, #0]

 		roll_ino = roll_a_rad - roll_est_rad;
 8002e88:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7fd fe4c 	bl	8000b30 <__aeabi_fsub>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8002e9e:	601a      	str	r2, [r3, #0]
 		roll_est_rad += roll_ino*0.005;
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fabf 	bl	8000428 <__aeabi_f2d>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	460d      	mov	r5, r1
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fab8 	bl	8000428 <__aeabi_f2d>
 8002eb8:	a323      	add	r3, pc, #140	; (adr r3, 8002f48 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fb0b 	bl	80004d8 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	4629      	mov	r1, r5
 8002eca:	f7fd f94f 	bl	800016c <__adddf3>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	f7fd fdd7 	bl	8000a88 <__aeabi_d2f>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002ede:	601a      	str	r2, [r3, #0]

 		pitch_est = pitch_est_rad*rad2deg;
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7fd ff2a 	bl	8000d44 <__aeabi_fmul>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002ef6:	601a      	str	r2, [r3, #0]
 		roll_est = roll_est_rad*rad2deg;
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fd ff1e 	bl	8000d44 <__aeabi_fmul>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8002f0e:	601a      	str	r2, [r3, #0]
 		yaw_est = yaw_est_rad*rad2deg;
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f7fd ff12 	bl	8000d44 <__aeabi_fmul>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e036      	b.n	8002f98 <HAL_TIM_PeriodElapsedCallback+0x608>
 8002f2a:	bf00      	nop
 8002f2c:	f3af 8000 	nop.w
 8002f30:	54442d11 	.word	0x54442d11
 8002f34:	400921fb 	.word	0x400921fb
 8002f38:	54442d1c 	.word	0x54442d1c
 8002f3c:	401921fb 	.word	0x401921fb
 8002f40:	54442d11 	.word	0x54442d11
 8002f44:	c00921fb 	.word	0xc00921fb
 8002f48:	47ae147b 	.word	0x47ae147b
 8002f4c:	3f747ae1 	.word	0x3f747ae1
 8002f50:	200004dc 	.word	0x200004dc
 8002f54:	200004fc 	.word	0x200004fc
 8002f58:	20000484 	.word	0x20000484
 8002f5c:	20000434 	.word	0x20000434
 8002f60:	2000050c 	.word	0x2000050c
 8002f64:	200002dc 	.word	0x200002dc
 8002f68:	20000294 	.word	0x20000294
 8002f6c:	20000430 	.word	0x20000430
 8002f70:	200005e4 	.word	0x200005e4
 8002f74:	20000388 	.word	0x20000388
 8002f78:	200003c8 	.word	0x200003c8
 8002f7c:	20000420 	.word	0x20000420
 8002f80:	20000384 	.word	0x20000384
 8002f84:	200005e0 	.word	0x200005e0
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000500 	.word	0x20000500
 8002f90:	20000428 	.word	0x20000428
 8002f94:	20000424 	.word	0x20000424
 		//printf("PE:%.2f RE:%.2f\r\n", pitch_est, roll_est);
 		//printf("%.3f %.3f %.3f %.3f %.3f %.3f\r\n",Ax,Ay,Az,Gx,Gy,Gz);
 		//printf("%i %i %i %i %i %i\r\n",Accel_X_RAW,Accel_Y_RAW,Accel_Z_RAW,Gyro_X_RAW,Gyro_Y_RAW,Gyro_Z_RAW);
 	}

 	Drone_Control_quad();
 8002f98:	f7fe fd7a 	bl	8001a90 <Drone_Control_quad>
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf(error_code);
  /* USER CODE END Error_Handler_Debug */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_MspInit+0x5c>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_MspInit+0x5c>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6193      	str	r3, [r2, #24]
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_MspInit+0x5c>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_MspInit+0x5c>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_MspInit+0x5c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_MspInit+0x5c>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_MspInit+0x60>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_MspInit+0x60>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000

08003014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_ADC_MspInit+0xbc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d149      	bne.n	80030c8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_ADC_MspInit+0xc0>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003064:	2330      	movs	r3, #48	; 0x30
 8003066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003068:	2303      	movs	r3, #3
 800306a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	4619      	mov	r1, r3
 8003072:	4819      	ldr	r0, [pc, #100]	; (80030d8 <HAL_ADC_MspInit+0xc4>)
 8003074:	f002 f97a 	bl	800536c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_ADC_MspInit+0xcc>)
 800307c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 8003092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003096:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 800309a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 80030a2:	2220      	movs	r2, #32
 80030a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030ac:	480b      	ldr	r0, [pc, #44]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 80030ae:	f001 ff6f 	bl	8004f90 <HAL_DMA_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80030b8:	f7ff ff74 	bl	8002fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 80030c0:	621a      	str	r2, [r3, #32]
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_ADC_MspInit+0xc8>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40012400 	.word	0x40012400
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010800 	.word	0x40010800
 80030dc:	20000498 	.word	0x20000498
 80030e0:	40020008 	.word	0x40020008

080030e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a20      	ldr	r2, [pc, #128]	; (8003180 <HAL_CAN_MspInit+0x9c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d139      	bne.n	8003178 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 800310a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310e:	61d3      	str	r3, [r2, #28]
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_CAN_MspInit+0xa0>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4619      	mov	r1, r3
 8003148:	480f      	ldr	r0, [pc, #60]	; (8003188 <HAL_CAN_MspInit+0xa4>)
 800314a:	f002 f90f 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800314e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0310 	add.w	r3, r7, #16
 8003160:	4619      	mov	r1, r3
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <HAL_CAN_MspInit+0xa4>)
 8003164:	f002 f902 	bl	800536c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	2014      	movs	r0, #20
 800316e:	f001 fed8 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003172:	2014      	movs	r0, #20
 8003174:	f001 fef1 	bl	8004f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40006400 	.word	0x40006400
 8003184:	40021000 	.word	0x40021000
 8003188:	40010800 	.word	0x40010800

0800318c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_I2C_MspInit+0x90>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d132      	bne.n	8003212 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <HAL_I2C_MspInit+0x94>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <HAL_I2C_MspInit+0x94>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6193      	str	r3, [r2, #24]
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_I2C_MspInit+0x94>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ca:	2312      	movs	r3, #18
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	4812      	ldr	r0, [pc, #72]	; (8003224 <HAL_I2C_MspInit+0x98>)
 80031da:	f002 f8c7 	bl	800536c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_I2C_MspInit+0x9c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_I2C_MspInit+0x9c>)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_I2C_MspInit+0x94>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_I2C_MspInit+0x94>)
 8003200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_I2C_MspInit+0x94>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003212:	bf00      	nop
 8003214:	3728      	adds	r7, #40	; 0x28
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40005400 	.word	0x40005400
 8003220:	40021000 	.word	0x40021000
 8003224:	40010c00 	.word	0x40010c00
 8003228:	40010000 	.word	0x40010000

0800322c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0318 	add.w	r3, r7, #24
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d12c      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	61d3      	str	r3, [r2, #28]
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800327c:	2301      	movs	r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0318 	add.w	r3, r7, #24
 800328c:	4619      	mov	r1, r3
 800328e:	4815      	ldr	r0, [pc, #84]	; (80032e4 <HAL_TIM_Base_MspInit+0xb8>)
 8003290:	f002 f86c 	bl	800536c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2100      	movs	r1, #0
 8003298:	201c      	movs	r0, #28
 800329a:	f001 fe42 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800329e:	201c      	movs	r0, #28
 80032a0:	f001 fe5b 	bl	8004f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032a4:	e018      	b.n	80032d8 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_TIM_Base_MspInit+0xbc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d113      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	61d3      	str	r3, [r2, #28]
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_TIM_Base_MspInit+0xb4>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	201d      	movs	r0, #29
 80032ce:	f001 fe28 	bl	8004f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d2:	201d      	movs	r0, #29
 80032d4:	f001 fe41 	bl	8004f5a <HAL_NVIC_EnableIRQ>
}
 80032d8:	bf00      	nop
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010800 	.word	0x40010800
 80032e8:	40000400 	.word	0x40000400

080032ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_MspPostInit+0x88>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d12f      	bne.n	800336c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_TIM_MspPostInit+0x8c>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800333c:	23c0      	movs	r3, #192	; 0xc0
 800333e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2302      	movs	r3, #2
 8003346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f107 0310 	add.w	r3, r7, #16
 800334c:	4619      	mov	r1, r3
 800334e:	480b      	ldr	r0, [pc, #44]	; (800337c <HAL_TIM_MspPostInit+0x90>)
 8003350:	f002 f80c 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2302      	movs	r3, #2
 800335e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4619      	mov	r1, r3
 8003366:	4806      	ldr	r0, [pc, #24]	; (8003380 <HAL_TIM_MspPostInit+0x94>)
 8003368:	f002 f800 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40000400 	.word	0x40000400
 8003378:	40021000 	.word	0x40021000
 800337c:	40010800 	.word	0x40010800
 8003380:	40010c00 	.word	0x40010c00

08003384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0318 	add.w	r3, r7, #24
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a37      	ldr	r2, [pc, #220]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d130      	bne.n	8003406 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4a35      	ldr	r2, [pc, #212]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	61d3      	str	r3, [r2, #28]
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a2f      	ldr	r2, [pc, #188]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6193      	str	r3, [r2, #24]
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_UART_MspInit+0xfc>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d4:	2304      	movs	r3, #4
 80033d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 0318 	add.w	r3, r7, #24
 80033e4:	4619      	mov	r1, r3
 80033e6:	4827      	ldr	r0, [pc, #156]	; (8003484 <HAL_UART_MspInit+0x100>)
 80033e8:	f001 ffc0 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033ec:	2308      	movs	r3, #8
 80033ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 0318 	add.w	r3, r7, #24
 80033fc:	4619      	mov	r1, r3
 80033fe:	4821      	ldr	r0, [pc, #132]	; (8003484 <HAL_UART_MspInit+0x100>)
 8003400:	f001 ffb4 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003404:	e036      	b.n	8003474 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <HAL_UART_MspInit+0x104>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d131      	bne.n	8003474 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_UART_MspInit+0xfc>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_UART_MspInit+0xfc>)
 8003416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341a:	61d3      	str	r3, [r2, #28]
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <HAL_UART_MspInit+0xfc>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <HAL_UART_MspInit+0xfc>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <HAL_UART_MspInit+0xfc>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_UART_MspInit+0xfc>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344e:	f107 0318 	add.w	r3, r7, #24
 8003452:	4619      	mov	r1, r3
 8003454:	480d      	ldr	r0, [pc, #52]	; (800348c <HAL_UART_MspInit+0x108>)
 8003456:	f001 ff89 	bl	800536c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800345a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	4619      	mov	r1, r3
 800346e:	4807      	ldr	r0, [pc, #28]	; (800348c <HAL_UART_MspInit+0x108>)
 8003470:	f001 ff7c 	bl	800536c <HAL_GPIO_Init>
}
 8003474:	bf00      	nop
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40004400 	.word	0x40004400
 8003480:	40021000 	.word	0x40021000
 8003484:	40010800 	.word	0x40010800
 8003488:	40004800 	.word	0x40004800
 800348c:	40010c00 	.word	0x40010c00

08003490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034a0:	e7fe      	b.n	80034a0 <HardFault_Handler+0x4>

080034a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a6:	e7fe      	b.n	80034a6 <MemManage_Handler+0x4>

080034a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <BusFault_Handler+0x4>

080034ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b2:	e7fe      	b.n	80034b2 <UsageFault_Handler+0x4>

080034b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034dc:	f000 fa12 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <DMA1_Channel1_IRQHandler+0x10>)
 80034ea:	f001 fe0b 	bl	8005104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000498 	.word	0x20000498

080034f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80034fe:	484a      	ldr	r0, [pc, #296]	; (8003628 <USB_LP_CAN1_RX0_IRQHandler+0x130>)
 8003500:	f001 fa12 	bl	8004928 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, rxData);
 8003504:	4b49      	ldr	r3, [pc, #292]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003506:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <USB_LP_CAN1_RX0_IRQHandler+0x138>)
 8003508:	2100      	movs	r1, #0
 800350a:	4847      	ldr	r0, [pc, #284]	; (8003628 <USB_LP_CAN1_RX0_IRQHandler+0x130>)
 800350c:	f001 f8d6 	bl	80046bc <HAL_CAN_GetRxMessage>
  msgid = pRxHeader.StdId;
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <USB_LP_CAN1_RX0_IRQHandler+0x138>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a47      	ldr	r2, [pc, #284]	; (8003634 <USB_LP_CAN1_RX0_IRQHandler+0x13c>)
 8003516:	6013      	str	r3, [r2, #0]
  //printf("id:%x\r\n",msgid);
  //printf("data: %x %x %x %x %x %x %x %x \r\n",rxData[0],rxData[1],rxData[2],rxData[3],rxData[4],rxData[5],rxData[6],rxData[7]);
  switch(msgid){
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <USB_LP_CAN1_RX0_IRQHandler+0x13c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f240 1201 	movw	r2, #257	; 0x101
 8003520:	4293      	cmp	r3, r2
 8003522:	d000      	beq.n	8003526 <USB_LP_CAN1_RX0_IRQHandler+0x2e>

    break;
  }

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003524:	e07b      	b.n	800361e <USB_LP_CAN1_RX0_IRQHandler+0x126>
    received_0x101_time = sys_time_ms;
 8003526:	4b44      	ldr	r3, [pc, #272]	; (8003638 <USB_LP_CAN1_RX0_IRQHandler+0x140>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a44      	ldr	r2, [pc, #272]	; (800363c <USB_LP_CAN1_RX0_IRQHandler+0x144>)
 800352c:	6013      	str	r3, [r2, #0]
	str_ang = rxData[0] | rxData[1]<<8;//str_ang
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b21a      	sxth	r2, r3
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	b21b      	sxth	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b21a      	sxth	r2, r3
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <USB_LP_CAN1_RX0_IRQHandler+0x148>)
 8003542:	801a      	strh	r2, [r3, #0]
	brk_ctrl = rxData[2];
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003546:	789a      	ldrb	r2, [r3, #2]
 8003548:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 800354a:	701a      	strb	r2, [r3, #0]
	thr_ctrl = rxData[3];
 800354c:	4b37      	ldr	r3, [pc, #220]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 800354e:	78da      	ldrb	r2, [r3, #3]
 8003550:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 8003552:	701a      	strb	r2, [r3, #0]
	driving_mode = (rxData[4] & 0xC0) >> 6;
 8003554:	4b35      	ldr	r3, [pc, #212]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003556:	791b      	ldrb	r3, [r3, #4]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 800355e:	701a      	strb	r2, [r3, #0]
	target_gear = (rxData[4] & 0x30) >> 4;//target gear
 8003560:	4b32      	ldr	r3, [pc, #200]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003562:	791b      	ldrb	r3, [r3, #4]
 8003564:	111b      	asrs	r3, r3, #4
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 8003570:	701a      	strb	r2, [r3, #0]
	shift_enable = (rxData[4] & 0x08) >> 3;
 8003572:	4b2e      	ldr	r3, [pc, #184]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003574:	791b      	ldrb	r3, [r3, #4]
 8003576:	10db      	asrs	r3, r3, #3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <USB_LP_CAN1_RX0_IRQHandler+0x15c>)
 8003582:	701a      	strb	r2, [r3, #0]
	thr_enable = (rxData[4] & 0x04) >> 2;
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	109b      	asrs	r3, r3, #2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <USB_LP_CAN1_RX0_IRQHandler+0x160>)
 8003594:	701a      	strb	r2, [r3, #0]
	brk_enable = (rxData[4] & 0x02) >> 1;
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	105b      	asrs	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <USB_LP_CAN1_RX0_IRQHandler+0x164>)
 80035a6:	701a      	strb	r2, [r3, #0]
	str_enable = rxData[4] & 0x01;
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <USB_LP_CAN1_RX0_IRQHandler+0x168>)
 80035b4:	701a      	strb	r2, [r3, #0]
    HWA_Diff_Ctrl = rxData[5]; // trick torque control
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 80035b8:	795b      	ldrb	r3, [r3, #5]
 80035ba:	b25a      	sxtb	r2, r3
 80035bc:	4b29      	ldr	r3, [pc, #164]	; (8003664 <USB_LP_CAN1_RX0_IRQHandler+0x16c>)
 80035be:	701a      	strb	r2, [r3, #0]
    esp_mode = rxData[6] & 0x01;// 0 angle 1 torque
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <USB_LP_CAN1_RX0_IRQHandler+0x134>)
 80035c2:	799b      	ldrb	r3, [r3, #6]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b27      	ldr	r3, [pc, #156]	; (8003668 <USB_LP_CAN1_RX0_IRQHandler+0x170>)
 80035cc:	701a      	strb	r2, [r3, #0]
    printf("str_ang: %i brk_ctrl: %i thr_ctrl:%i driving_mode:%i target_gear: %i shift_enable:%i thr_enable:%i brk_enable:%i str_enable:%i \r\n", str_ang, brk_ctrl, thr_ctrl, driving_mode,target_gear,shift_enable,thr_enable,brk_enable,str_enable);
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <USB_LP_CAN1_RX0_IRQHandler+0x148>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	461e      	mov	r6, r3
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <USB_LP_CAN1_RX0_IRQHandler+0x14c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	469c      	mov	ip, r3
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <USB_LP_CAN1_RX0_IRQHandler+0x150>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	469e      	mov	lr, r3
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <USB_LP_CAN1_RX0_IRQHandler+0x154>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <USB_LP_CAN1_RX0_IRQHandler+0x158>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4b19      	ldr	r3, [pc, #100]	; (8003654 <USB_LP_CAN1_RX0_IRQHandler+0x15c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <USB_LP_CAN1_RX0_IRQHandler+0x160>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	461c      	mov	r4, r3
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <USB_LP_CAN1_RX0_IRQHandler+0x164>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	461d      	mov	r5, r3
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <USB_LP_CAN1_RX0_IRQHandler+0x168>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	9305      	str	r3, [sp, #20]
 8003606:	9504      	str	r5, [sp, #16]
 8003608:	9403      	str	r4, [sp, #12]
 800360a:	9002      	str	r0, [sp, #8]
 800360c:	9101      	str	r1, [sp, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	4673      	mov	r3, lr
 8003612:	4662      	mov	r2, ip
 8003614:	4631      	mov	r1, r6
 8003616:	4815      	ldr	r0, [pc, #84]	; (800366c <USB_LP_CAN1_RX0_IRQHandler+0x174>)
 8003618:	f006 f820 	bl	800965c <iprintf>
    break;
 800361c:	bf00      	nop
}
 800361e:	bf00      	nop
 8003620:	3704      	adds	r7, #4
 8003622:	46bd      	mov	sp, r7
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	bf00      	nop
 8003628:	200003a0 	.word	0x200003a0
 800362c:	200002c0 	.word	0x200002c0
 8003630:	20000550 	.word	0x20000550
 8003634:	200005ec 	.word	0x200005ec
 8003638:	200004f0 	.word	0x200004f0
 800363c:	2000023c 	.word	0x2000023c
 8003640:	20000228 	.word	0x20000228
 8003644:	2000022a 	.word	0x2000022a
 8003648:	2000022b 	.word	0x2000022b
 800364c:	2000022c 	.word	0x2000022c
 8003650:	2000022d 	.word	0x2000022d
 8003654:	2000022e 	.word	0x2000022e
 8003658:	2000022f 	.word	0x2000022f
 800365c:	20000230 	.word	0x20000230
 8003660:	20000231 	.word	0x20000231
 8003664:	20000232 	.word	0x20000232
 8003668:	20000233 	.word	0x20000233
 800366c:	0800d0d0 	.word	0x0800d0d0

08003670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM2_IRQHandler+0x10>)
 8003676:	f004 f9db 	bl	8007a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000510 	.word	0x20000510

08003684 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <TIM3_IRQHandler+0x10>)
 800368a:	f004 f9d1 	bl	8007a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200003d8 	.word	0x200003d8

08003698 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e00a      	b.n	80036c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036aa:	f3af 8000 	nop.w
 80036ae:	4601      	mov	r1, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	60ba      	str	r2, [r7, #8]
 80036b6:	b2ca      	uxtb	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	dbf0      	blt.n	80036aa <_read+0x12>
	}

return len;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e009      	b.n	80036f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fd15 	bl	800111c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	dbf1      	blt.n	80036e4 <_write+0x12>
	}
	return len;
 8003700:	687b      	ldr	r3, [r7, #4]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_close>:

int _close(int file)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	return -1;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003730:	605a      	str	r2, [r3, #4]
	return 0;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <_isatty>:

int _isatty(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return 1;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
	return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
	...

0800376c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x50>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <_sbrk+0x16>
		heap_end = &end;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <_sbrk+0x50>)
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <_sbrk+0x54>)
 8003780:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <_sbrk+0x50>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <_sbrk+0x50>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	466a      	mov	r2, sp
 8003792:	4293      	cmp	r3, r2
 8003794:	d907      	bls.n	80037a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003796:	f005 fadf 	bl	8008d58 <__errno>
 800379a:	4602      	mov	r2, r0
 800379c:	230c      	movs	r3, #12
 800379e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037a0:	f04f 33ff 	mov.w	r3, #4294967295
 80037a4:	e006      	b.n	80037b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <_sbrk+0x50>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <_sbrk+0x50>)
 80037b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000288 	.word	0x20000288
 80037c0:	200005f8 	.word	0x200005f8

080037c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <SystemInit+0x5c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <SystemInit+0x5c>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <SystemInit+0x5c>)
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	4911      	ldr	r1, [pc, #68]	; (8003820 <SystemInit+0x5c>)
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <SystemInit+0x60>)
 80037dc:	4013      	ands	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <SystemInit+0x5c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <SystemInit+0x5c>)
 80037e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <SystemInit+0x5c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <SystemInit+0x5c>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <SystemInit+0x5c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <SystemInit+0x5c>)
 8003802:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003806:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SystemInit+0x5c>)
 800380a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800380e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SystemInit+0x64>)
 8003812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003816:	609a      	str	r2, [r3, #8]
#endif 
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000
 8003824:	f8ff0000 	.word	0xf8ff0000
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800382c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800382e:	e003      	b.n	8003838 <LoopCopyDataInit>

08003830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003836:	3104      	adds	r1, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003838:	480a      	ldr	r0, [pc, #40]	; (8003864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800383c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800383e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003840:	d3f6      	bcc.n	8003830 <CopyDataInit>
  ldr r2, =_sbss
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003844:	e002      	b.n	800384c <LoopFillZerobss>

08003846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003848:	f842 3b04 	str.w	r3, [r2], #4

0800384c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800384e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003850:	d3f9      	bcc.n	8003846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003852:	f7ff ffb7 	bl	80037c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003856:	f005 fa85 	bl	8008d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800385a:	f7fe fd05 	bl	8002268 <main>
  bx lr
 800385e:	4770      	bx	lr
  ldr r3, =_sidata
 8003860:	0800d680 	.word	0x0800d680
  ldr r0, =_sdata
 8003864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003868:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 800386c:	2000020c 	.word	0x2000020c
  ldr r3, = _ebss
 8003870:	200005f8 	.word	0x200005f8

08003874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <ADC1_2_IRQHandler>
	...

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_Init+0x28>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_Init+0x28>)
 8003882:	f043 0310 	orr.w	r3, r3, #16
 8003886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
 800388a:	f001 fb3f 	bl	8004f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388e:	2000      	movs	r0, #0
 8003890:	f000 f808 	bl	80038a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003894:	f7ff fb8c 	bl	8002fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x54>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_InitTick+0x58>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fb57 	bl	8004f76 <HAL_SYSTICK_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00e      	b.n	80038f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d80a      	bhi.n	80038ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f001 fb1f 	bl	8004f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <HAL_InitTick+0x5c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000002c 	.word	0x2000002c
 80038fc:	20000034 	.word	0x20000034
 8003900:	20000030 	.word	0x20000030

08003904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_IncTick+0x1c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_IncTick+0x20>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_IncTick+0x20>)
 8003916:	6013      	str	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000034 	.word	0x20000034
 8003924:	200005f0 	.word	0x200005f0

08003928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <HAL_GetTick+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	200005f0 	.word	0x200005f0

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff fff0 	bl	8003928 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_Delay+0x40>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffe0 	bl	8003928 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000034 	.word	0x20000034

08003980 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0be      	b.n	8003b20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fb28 	bl	8003014 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 faf7 	bl	8003fb8 <ADC_ConversionStop_Disable>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8099 	bne.w	8003b0e <HAL_ADC_Init+0x18e>
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8095 	bne.w	8003b0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	f043 0202 	orr.w	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7b1b      	ldrb	r3, [r3, #12]
 8003a06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d003      	beq.n	8003a22 <HAL_ADC_Init+0xa2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_ADC_Init+0xa8>
 8003a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_Init+0xaa>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7d1b      	ldrb	r3, [r3, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d119      	bne.n	8003a6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7b1b      	ldrb	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	035a      	lsls	r2, r3, #13
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e00b      	b.n	8003a6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_ADC_Init+0x1a8>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9c:	d003      	beq.n	8003aa6 <HAL_ADC_Init+0x126>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_ADC_Init+0x1ac>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d10b      	bne.n	8003aec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003aea:	e018      	b.n	8003b1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f023 0312 	bic.w	r3, r3, #18
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b0c:	e007      	b.n	8003b1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	ffe1f7fd 	.word	0xffe1f7fd
 8003b2c:	ff1f0efe 	.word	0xff1f0efe

08003b30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a64      	ldr	r2, [pc, #400]	; (8003cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_ADC_Start_DMA+0x24>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a63      	ldr	r2, [pc, #396]	; (8003cdc <HAL_ADC_Start_DMA+0x1ac>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d106      	bne.n	8003b62 <HAL_ADC_Start_DMA+0x32>
 8003b54:	4b60      	ldr	r3, [pc, #384]	; (8003cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 80b3 	bne.w	8003cc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_Start_DMA+0x40>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0ae      	b.n	8003cce <HAL_ADC_Start_DMA+0x19e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f9cb 	bl	8003f14 <ADC_Enable>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f040 809a 	bne.w	8003cbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_ADC_Start_DMA+0x1ac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_Start_DMA+0x84>
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d115      	bne.n	8003be0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d026      	beq.n	8003c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bde:	e01d      	b.n	8003c1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_Start_DMA+0xd0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <HAL_ADC_Start_DMA+0x1ac>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <HAL_ADC_Start_DMA+0xec>
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f023 0206 	bic.w	r2, r3, #6
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c34:	e002      	b.n	8003c3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_ADC_Start_DMA+0x1b0>)
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_ADC_Start_DMA+0x1b4>)
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_ADC_Start_DMA+0x1b8>)
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a18      	ldr	r0, [r3, #32]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	334c      	adds	r3, #76	; 0x4c
 8003c80:	4619      	mov	r1, r3
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f001 f9dd 	bl	8005044 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c98:	d108      	bne.n	8003cac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ca8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003caa:	e00f      	b.n	8003ccc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003cbc:	e006      	b.n	8003ccc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003cc6:	e001      	b.n	8003ccc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40012400 	.word	0x40012400
 8003cdc:	40012800 	.word	0x40012800
 8003ce0:	0800402d 	.word	0x0800402d
 8003ce4:	080040a9 	.word	0x080040a9
 8003ce8:	080040c5 	.word	0x080040c5

08003cec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x20>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0dc      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1da>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d81c      	bhi.n	8003d8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b05      	subs	r3, #5
 8003d66:	221f      	movs	r2, #31
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	4019      	ands	r1, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3b05      	subs	r3, #5
 8003d80:	fa00 f203 	lsl.w	r2, r0, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d8c:	e03c      	b.n	8003e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d81c      	bhi.n	8003dd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	3b23      	subs	r3, #35	; 0x23
 8003da8:	221f      	movs	r2, #31
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	4019      	ands	r1, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3b23      	subs	r3, #35	; 0x23
 8003dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003dce:	e01b      	b.n	8003e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	3b41      	subs	r3, #65	; 0x41
 8003de2:	221f      	movs	r2, #31
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	4019      	ands	r1, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b41      	subs	r3, #65	; 0x41
 8003dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d91c      	bls.n	8003e4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	3b1e      	subs	r3, #30
 8003e22:	2207      	movs	r2, #7
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	4019      	ands	r1, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6898      	ldr	r0, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	3b1e      	subs	r3, #30
 8003e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	e019      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	4019      	ands	r1, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6898      	ldr	r0, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	fa00 f203 	lsl.w	r2, r0, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d003      	beq.n	8003e8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e8a:	2b11      	cmp	r3, #17
 8003e8c:	d132      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d125      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d126      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003eb4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d11a      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	0c9a      	lsrs	r2, r3, #18
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ed4:	e002      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f9      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x1b2>
 8003ee2:	e007      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012400 	.word	0x40012400
 8003f0c:	2000002c 	.word	0x2000002c
 8003f10:	431bde83 	.word	0x431bde83

08003f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d039      	beq.n	8003fa6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <ADC_Enable+0x9c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <ADC_Enable+0xa0>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f50:	e002      	b.n	8003f58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f9      	bne.n	8003f52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f5e:	f7ff fce3 	bl	8003928 <HAL_GetTick>
 8003f62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f64:	e018      	b.n	8003f98 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f66:	f7ff fcdf 	bl	8003928 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d911      	bls.n	8003f98 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d1df      	bne.n	8003f66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	2000002c 	.word	0x2000002c
 8003fb4:	431bde83 	.word	0x431bde83

08003fb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d127      	bne.n	8004022 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fe2:	f7ff fca1 	bl	8003928 <HAL_GetTick>
 8003fe6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fe8:	e014      	b.n	8004014 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fea:	f7ff fc9d 	bl	8003928 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d90d      	bls.n	8004014 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d0e3      	beq.n	8003fea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d127      	bne.n	8004096 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800405c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004060:	d115      	bne.n	800408e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004066:	2b00      	cmp	r3, #0
 8004068:	d111      	bne.n	800408e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fe2c 	bl	8003cec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004094:	e004      	b.n	80040a0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fe21 	bl	8003cfe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fe10 	bl	8003d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0ed      	b.n	80042e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe ffe4 	bl	80030e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0202 	bic.w	r2, r2, #2
 800412a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800412c:	f7ff fbfc 	bl	8003928 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004132:	e012      	b.n	800415a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004134:	f7ff fbf8 	bl	8003928 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b0a      	cmp	r3, #10
 8004140:	d90b      	bls.n	800415a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2205      	movs	r2, #5
 8004152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0c5      	b.n	80042e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004178:	f7ff fbd6 	bl	8003928 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800417e:	e012      	b.n	80041a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004180:	f7ff fbd2 	bl	8003928 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b0a      	cmp	r3, #10
 800418c:	d90b      	bls.n	80041a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2205      	movs	r2, #5
 800419e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e09f      	b.n	80042e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0e5      	beq.n	8004180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7e1b      	ldrb	r3, [r3, #24]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d108      	bne.n	80041ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7e5b      	ldrb	r3, [r3, #25]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e9b      	ldrb	r3, [r3, #26]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d108      	bne.n	8004222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0220 	orr.w	r2, r2, #32
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e007      	b.n	8004232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0220 	bic.w	r2, r2, #32
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7edb      	ldrb	r3, [r3, #27]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0210 	bic.w	r2, r2, #16
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e007      	b.n	800425c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0210 	orr.w	r2, r2, #16
 800425a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7f1b      	ldrb	r3, [r3, #28]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e007      	b.n	8004286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7f5b      	ldrb	r3, [r3, #29]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0204 	orr.w	r2, r2, #4
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e007      	b.n	80042b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	ea42 0103 	orr.w	r1, r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	1e5a      	subs	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004304:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d003      	beq.n	8004314 <HAL_CAN_ConfigFilter+0x26>
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b02      	cmp	r3, #2
 8004310:	f040 80aa 	bne.w	8004468 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2201      	movs	r2, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d123      	bne.n	8004396 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	401a      	ands	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004370:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	3248      	adds	r2, #72	; 0x48
 8004376:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800438a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	3348      	adds	r3, #72	; 0x48
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d122      	bne.n	80043e4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3248      	adds	r2, #72	; 0x48
 80043c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	3348      	adds	r3, #72	; 0x48
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043fe:	e007      	b.n	8004410 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	431a      	orrs	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800442a:	e007      	b.n	800443c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	431a      	orrs	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	431a      	orrs	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e006      	b.n	8004476 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d12e      	bne.n	80044f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ac:	f7ff fa3c 	bl	8003928 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044b2:	e012      	b.n	80044da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044b4:	f7ff fa38 	bl	8003928 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b0a      	cmp	r3, #10
 80044c0:	d90b      	bls.n	80044da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2205      	movs	r2, #5
 80044d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e012      	b.n	8004500 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e006      	b.n	8004500 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800451c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d003      	beq.n	8004534 <HAL_CAN_AddTxMessage+0x2c>
 800452c:	7ffb      	ldrb	r3, [r7, #31]
 800452e:	2b02      	cmp	r3, #2
 8004530:	f040 80b8 	bne.w	80046a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a0 	beq.w	8004694 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	0e1b      	lsrs	r3, r3, #24
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d907      	bls.n	8004574 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e09e      	b.n	80046b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004574:	2201      	movs	r2, #1
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	409a      	lsls	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004590:	68f9      	ldr	r1, [r7, #12]
 8004592:	6809      	ldr	r1, [r1, #0]
 8004594:	431a      	orrs	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3318      	adds	r3, #24
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	440b      	add	r3, r1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e00f      	b.n	80045c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80045b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3318      	adds	r3, #24
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	440b      	add	r3, r1
 80045c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6819      	ldr	r1, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	3318      	adds	r3, #24
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	440b      	add	r3, r1
 80045d2:	3304      	adds	r3, #4
 80045d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	7d1b      	ldrb	r3, [r3, #20]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d111      	bne.n	8004602 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	3318      	adds	r3, #24
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6811      	ldr	r1, [r2, #0]
 80045f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3318      	adds	r3, #24
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	440b      	add	r3, r1
 80045fe:	3304      	adds	r3, #4
 8004600:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3307      	adds	r3, #7
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	061a      	lsls	r2, r3, #24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3306      	adds	r3, #6
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3305      	adds	r3, #5
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4313      	orrs	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	3204      	adds	r2, #4
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	4610      	mov	r0, r2
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	ea43 0200 	orr.w	r2, r3, r0
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	440b      	add	r3, r1
 8004634:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004638:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3303      	adds	r3, #3
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	061a      	lsls	r2, r3, #24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3302      	adds	r3, #2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3301      	adds	r3, #1
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	4313      	orrs	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	4610      	mov	r0, r2
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6811      	ldr	r1, [r2, #0]
 8004660:	ea43 0200 	orr.w	r2, r3, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	440b      	add	r3, r1
 800466a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800466e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3318      	adds	r3, #24
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4413      	add	r3, r2
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	6811      	ldr	r1, [r2, #0]
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3318      	adds	r3, #24
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	440b      	add	r3, r1
 800468e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e00e      	b.n	80046b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e006      	b.n	80046b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d003      	beq.n	80046e0 <HAL_CAN_GetRxMessage+0x24>
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 80f3 	bne.w	80048c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10e      	bne.n	8004704 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d116      	bne.n	8004722 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0e7      	b.n	80048d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0d8      	b.n	80048d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	331b      	adds	r3, #27
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0204 	and.w	r2, r3, #4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	331b      	adds	r3, #27
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	4413      	add	r3, r2
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	0d5b      	lsrs	r3, r3, #21
 8004750:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e00b      	b.n	8004772 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	331b      	adds	r3, #27
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	331b      	adds	r3, #27
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0202 	and.w	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	331b      	adds	r3, #27
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	3304      	adds	r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	331b      	adds	r3, #27
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4413      	add	r3, r2
 80047ac:	3304      	adds	r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	331b      	adds	r3, #27
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4413      	add	r3, r2
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	0a1a      	lsrs	r2, r3, #8
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	4413      	add	r3, r2
 800480a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0c1a      	lsrs	r2, r3, #16
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	3302      	adds	r3, #2
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	4413      	add	r3, r2
 8004824:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	0e1a      	lsrs	r2, r3, #24
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3303      	adds	r3, #3
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	4413      	add	r3, r2
 800483e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	4413      	add	r3, r2
 8004856:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0a1a      	lsrs	r2, r3, #8
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3305      	adds	r3, #5
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	4413      	add	r3, r2
 8004870:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0c1a      	lsrs	r2, r3, #16
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	3306      	adds	r3, #6
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e1a      	lsrs	r2, r3, #24
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3307      	adds	r3, #7
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0220 	orr.w	r2, r2, #32
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	e007      	b.n	80048c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0220 	orr.w	r2, r2, #32
 80048c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e006      	b.n	80048d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d002      	beq.n	80048fc <HAL_CAN_ActivateNotification+0x1e>
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d109      	bne.n	8004910 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6959      	ldr	r1, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e006      	b.n	800491e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d07c      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2201      	movs	r2, #1
 800497e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f97d 	bl	8004c8a <HAL_CAN_TxMailbox0CompleteCallback>
 8004990:	e016      	b.n	80049c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
 80049a4:	e00c      	b.n	80049c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	e002      	b.n	80049c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f980 	bl	8004cc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d024      	beq.n	8004a14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f95c 	bl	8004c9c <HAL_CAN_TxMailbox1CompleteCallback>
 80049e4:	e016      	b.n	8004a14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
 80049f8:	e00c      	b.n	8004a14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	e002      	b.n	8004a14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f95f 	bl	8004cd2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d024      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f93b 	bl	8004cae <HAL_CAN_TxMailbox2CompleteCallback>
 8004a38:	e016      	b.n	8004a68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4c:	e00c      	b.n	8004a68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e002      	b.n	8004a68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f93e 	bl	8004ce4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f92d 	bl	8004d08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f915 	bl	8004cf6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00c      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f90d 	bl	8004d2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8f5 	bl	8004d1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8f6 	bl	8004d3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8ee 	bl	8004d50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d06c      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d03d      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d038      	beq.n	8004c62 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d017      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x302>
 8004bfa:	2b30      	cmp	r3, #48	; 0x30
 8004bfc:	d804      	bhi.n	8004c08 <HAL_CAN_IRQHandler+0x2e0>
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d009      	beq.n	8004c16 <HAL_CAN_IRQHandler+0x2ee>
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d00c      	beq.n	8004c20 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c06:	e024      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d018      	beq.n	8004c3e <HAL_CAN_IRQHandler+0x316>
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d01b      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x320>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d00f      	beq.n	8004c34 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004c14:	e01d      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	f043 0308 	orr.w	r3, r3, #8
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c1e:	e018      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f043 0310 	orr.w	r3, r3, #16
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c28:	e013      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f043 0320 	orr.w	r3, r3, #32
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c32:	e00e      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c3c:	e009      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c46:	e004      	b.n	8004c52 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c50:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c60:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2204      	movs	r2, #4
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f870 	bl	8004d62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d90:	4013      	ands	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004da6:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <__NVIC_SetPriorityGrouping+0x44>)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	60d3      	str	r3, [r2, #12]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	0a1b      	lsrs	r3, r3, #8
 8004dc6:	f003 0307 	and.w	r3, r3, #7
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	db0b      	blt.n	8004e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	f003 021f 	and.w	r2, r3, #31
 8004df0:	4906      	ldr	r1, [pc, #24]	; (8004e0c <__NVIC_EnableIRQ+0x34>)
 8004df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2001      	movs	r0, #1
 8004dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	e000e100 	.word	0xe000e100

08004e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db0a      	blt.n	8004e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	490c      	ldr	r1, [pc, #48]	; (8004e5c <__NVIC_SetPriority+0x4c>)
 8004e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2e:	0112      	lsls	r2, r2, #4
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	440b      	add	r3, r1
 8004e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e38:	e00a      	b.n	8004e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4908      	ldr	r1, [pc, #32]	; (8004e60 <__NVIC_SetPriority+0x50>)
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	3b04      	subs	r3, #4
 8004e48:	0112      	lsls	r2, r2, #4
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	761a      	strb	r2, [r3, #24]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000e100 	.word	0xe000e100
 8004e60:	e000ed00 	.word	0xe000ed00

08004e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f1c3 0307 	rsb	r3, r3, #7
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	bf28      	it	cs
 8004e82:	2304      	movcs	r3, #4
 8004e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d902      	bls.n	8004e94 <NVIC_EncodePriority+0x30>
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3b03      	subs	r3, #3
 8004e92:	e000      	b.n	8004e96 <NVIC_EncodePriority+0x32>
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eac:	f04f 31ff 	mov.w	r1, #4294967295
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	43d9      	mvns	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ebc:	4313      	orrs	r3, r2
         );
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d301      	bcc.n	8004ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eda:	2301      	movs	r3, #1
 8004edc:	e00f      	b.n	8004efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ede:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <SysTick_Config+0x40>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee6:	210f      	movs	r1, #15
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	f7ff ff90 	bl	8004e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <SysTick_Config+0x40>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <SysTick_Config+0x40>)
 8004ef8:	2207      	movs	r2, #7
 8004efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	e000e010 	.word	0xe000e010

08004f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff2d 	bl	8004d74 <__NVIC_SetPriorityGrouping>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f34:	f7ff ff42 	bl	8004dbc <__NVIC_GetPriorityGrouping>
 8004f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f7ff ff90 	bl	8004e64 <NVIC_EncodePriority>
 8004f44:	4602      	mov	r2, r0
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff5f 	bl	8004e10 <__NVIC_SetPriority>
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff35 	bl	8004dd8 <__NVIC_EnableIRQ>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ffa2 	bl	8004ec8 <SysTick_Config>
 8004f84:	4603      	mov	r3, r0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e043      	b.n	800502e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_DMA_Init+0xa8>)
 8004fae:	4413      	add	r3, r2
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_DMA_Init+0xac>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	009a      	lsls	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <HAL_DMA_Init+0xb0>)
 8004fc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004fda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr
 8005038:	bffdfff8 	.word	0xbffdfff8
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	40020000 	.word	0x40020000

08005044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_DMA_Start_IT+0x20>
 8005060:	2302      	movs	r3, #2
 8005062:	e04a      	b.n	80050fa <HAL_DMA_Start_IT+0xb6>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005072:	2b01      	cmp	r3, #1
 8005074:	d13a      	bne.n	80050ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f938 	bl	8005310 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 020e 	orr.w	r2, r2, #14
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e00f      	b.n	80050da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0204 	bic.w	r2, r2, #4
 80050c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 020a 	orr.w	r2, r2, #10
 80050d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e005      	b.n	80050f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
 80050f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2204      	movs	r2, #4
 8005122:	409a      	lsls	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d04f      	beq.n	80051cc <HAL_DMA_IRQHandler+0xc8>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d107      	bne.n	8005154 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a66      	ldr	r2, [pc, #408]	; (80052f4 <HAL_DMA_IRQHandler+0x1f0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d029      	beq.n	80051b2 <HAL_DMA_IRQHandler+0xae>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_DMA_IRQHandler+0x1f4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d022      	beq.n	80051ae <HAL_DMA_IRQHandler+0xaa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a63      	ldr	r2, [pc, #396]	; (80052fc <HAL_DMA_IRQHandler+0x1f8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01a      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xa4>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a62      	ldr	r2, [pc, #392]	; (8005300 <HAL_DMA_IRQHandler+0x1fc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d012      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x9e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a60      	ldr	r2, [pc, #384]	; (8005304 <HAL_DMA_IRQHandler+0x200>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00a      	beq.n	800519c <HAL_DMA_IRQHandler+0x98>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5f      	ldr	r2, [pc, #380]	; (8005308 <HAL_DMA_IRQHandler+0x204>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d102      	bne.n	8005196 <HAL_DMA_IRQHandler+0x92>
 8005190:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005194:	e00e      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 8005196:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800519a:	e00b      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 800519c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051a0:	e008      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 80051a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051a6:	e005      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 80051a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ac:	e002      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	e000      	b.n	80051b4 <HAL_DMA_IRQHandler+0xb0>
 80051b2:	2304      	movs	r3, #4
 80051b4:	4a55      	ldr	r2, [pc, #340]	; (800530c <HAL_DMA_IRQHandler+0x208>)
 80051b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8094 	beq.w	80052ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80051ca:	e08e      	b.n	80052ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2202      	movs	r2, #2
 80051d2:	409a      	lsls	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d056      	beq.n	800528a <HAL_DMA_IRQHandler+0x186>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d051      	beq.n	800528a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 020a 	bic.w	r2, r2, #10
 8005202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <HAL_DMA_IRQHandler+0x1f0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d029      	beq.n	800526a <HAL_DMA_IRQHandler+0x166>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <HAL_DMA_IRQHandler+0x1f4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_DMA_IRQHandler+0x162>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a35      	ldr	r2, [pc, #212]	; (80052fc <HAL_DMA_IRQHandler+0x1f8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01a      	beq.n	8005260 <HAL_DMA_IRQHandler+0x15c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_DMA_IRQHandler+0x1fc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d012      	beq.n	800525a <HAL_DMA_IRQHandler+0x156>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a32      	ldr	r2, [pc, #200]	; (8005304 <HAL_DMA_IRQHandler+0x200>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00a      	beq.n	8005254 <HAL_DMA_IRQHandler+0x150>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a31      	ldr	r2, [pc, #196]	; (8005308 <HAL_DMA_IRQHandler+0x204>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d102      	bne.n	800524e <HAL_DMA_IRQHandler+0x14a>
 8005248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800524c:	e00e      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 800524e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005252:	e00b      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 8005254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005258:	e008      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 800525a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800525e:	e005      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 8005260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005264:	e002      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 8005266:	2320      	movs	r3, #32
 8005268:	e000      	b.n	800526c <HAL_DMA_IRQHandler+0x168>
 800526a:	2302      	movs	r3, #2
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <HAL_DMA_IRQHandler+0x208>)
 800526e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	d034      	beq.n	80052ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005288:	e02f      	b.n	80052ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2208      	movs	r2, #8
 8005290:	409a      	lsls	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_DMA_IRQHandler+0x1e8>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d023      	beq.n	80052ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020e 	bic.w	r2, r2, #14
 80052b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f202 	lsl.w	r2, r1, r2
 80052c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
    }
  }
  return;
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
}
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40020008 	.word	0x40020008
 80052f8:	4002001c 	.word	0x4002001c
 80052fc:	40020030 	.word	0x40020030
 8005300:	40020044 	.word	0x40020044
 8005304:	40020058 	.word	0x40020058
 8005308:	4002006c 	.word	0x4002006c
 800530c:	40020000 	.word	0x40020000

08005310 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b10      	cmp	r3, #16
 800533c:	d108      	bne.n	8005350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800534e:	e007      	b.n	8005360 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
	...

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	b480      	push	{r7}
 800536e:	b08b      	sub	sp, #44	; 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800537a:	2300      	movs	r3, #0
 800537c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800537e:	e127      	b.n	80055d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005380:	2201      	movs	r2, #1
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	429a      	cmp	r2, r3
 800539a:	f040 8116 	bne.w	80055ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b12      	cmp	r3, #18
 80053a4:	d034      	beq.n	8005410 <HAL_GPIO_Init+0xa4>
 80053a6:	2b12      	cmp	r3, #18
 80053a8:	d80d      	bhi.n	80053c6 <HAL_GPIO_Init+0x5a>
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d02b      	beq.n	8005406 <HAL_GPIO_Init+0x9a>
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d804      	bhi.n	80053bc <HAL_GPIO_Init+0x50>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d031      	beq.n	800541a <HAL_GPIO_Init+0xae>
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d01c      	beq.n	80053f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053ba:	e048      	b.n	800544e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d043      	beq.n	8005448 <HAL_GPIO_Init+0xdc>
 80053c0:	2b11      	cmp	r3, #17
 80053c2:	d01b      	beq.n	80053fc <HAL_GPIO_Init+0x90>
          break;
 80053c4:	e043      	b.n	800544e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80053c6:	4a89      	ldr	r2, [pc, #548]	; (80055ec <HAL_GPIO_Init+0x280>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d026      	beq.n	800541a <HAL_GPIO_Init+0xae>
 80053cc:	4a87      	ldr	r2, [pc, #540]	; (80055ec <HAL_GPIO_Init+0x280>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d806      	bhi.n	80053e0 <HAL_GPIO_Init+0x74>
 80053d2:	4a87      	ldr	r2, [pc, #540]	; (80055f0 <HAL_GPIO_Init+0x284>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d020      	beq.n	800541a <HAL_GPIO_Init+0xae>
 80053d8:	4a86      	ldr	r2, [pc, #536]	; (80055f4 <HAL_GPIO_Init+0x288>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_GPIO_Init+0xae>
          break;
 80053de:	e036      	b.n	800544e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80053e0:	4a85      	ldr	r2, [pc, #532]	; (80055f8 <HAL_GPIO_Init+0x28c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d019      	beq.n	800541a <HAL_GPIO_Init+0xae>
 80053e6:	4a85      	ldr	r2, [pc, #532]	; (80055fc <HAL_GPIO_Init+0x290>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d016      	beq.n	800541a <HAL_GPIO_Init+0xae>
 80053ec:	4a84      	ldr	r2, [pc, #528]	; (8005600 <HAL_GPIO_Init+0x294>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_GPIO_Init+0xae>
          break;
 80053f2:	e02c      	b.n	800544e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	623b      	str	r3, [r7, #32]
          break;
 80053fa:	e028      	b.n	800544e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	3304      	adds	r3, #4
 8005402:	623b      	str	r3, [r7, #32]
          break;
 8005404:	e023      	b.n	800544e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	3308      	adds	r3, #8
 800540c:	623b      	str	r3, [r7, #32]
          break;
 800540e:	e01e      	b.n	800544e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	330c      	adds	r3, #12
 8005416:	623b      	str	r3, [r7, #32]
          break;
 8005418:	e019      	b.n	800544e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005422:	2304      	movs	r3, #4
 8005424:	623b      	str	r3, [r7, #32]
          break;
 8005426:	e012      	b.n	800544e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005430:	2308      	movs	r3, #8
 8005432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	611a      	str	r2, [r3, #16]
          break;
 800543a:	e008      	b.n	800544e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800543c:	2308      	movs	r3, #8
 800543e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	615a      	str	r2, [r3, #20]
          break;
 8005446:	e002      	b.n	800544e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
          break;
 800544c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2bff      	cmp	r3, #255	; 0xff
 8005452:	d801      	bhi.n	8005458 <HAL_GPIO_Init+0xec>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	e001      	b.n	800545c <HAL_GPIO_Init+0xf0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2bff      	cmp	r3, #255	; 0xff
 8005462:	d802      	bhi.n	800546a <HAL_GPIO_Init+0xfe>
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	e002      	b.n	8005470 <HAL_GPIO_Init+0x104>
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	3b08      	subs	r3, #8
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	210f      	movs	r1, #15
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	401a      	ands	r2, r3
 8005482:	6a39      	ldr	r1, [r7, #32]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	431a      	orrs	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8096 	beq.w	80055ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800549e:	4b59      	ldr	r3, [pc, #356]	; (8005604 <HAL_GPIO_Init+0x298>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_GPIO_Init+0x298>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6193      	str	r3, [r2, #24]
 80054aa:	4b56      	ldr	r3, [pc, #344]	; (8005604 <HAL_GPIO_Init+0x298>)
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	60bb      	str	r3, [r7, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054b6:	4a54      	ldr	r2, [pc, #336]	; (8005608 <HAL_GPIO_Init+0x29c>)
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	3302      	adds	r3, #2
 80054be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	220f      	movs	r2, #15
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4013      	ands	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a4b      	ldr	r2, [pc, #300]	; (800560c <HAL_GPIO_Init+0x2a0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_GPIO_Init+0x19e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a4a      	ldr	r2, [pc, #296]	; (8005610 <HAL_GPIO_Init+0x2a4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00d      	beq.n	8005506 <HAL_GPIO_Init+0x19a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a49      	ldr	r2, [pc, #292]	; (8005614 <HAL_GPIO_Init+0x2a8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <HAL_GPIO_Init+0x196>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a48      	ldr	r2, [pc, #288]	; (8005618 <HAL_GPIO_Init+0x2ac>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_GPIO_Init+0x192>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e006      	b.n	800550c <HAL_GPIO_Init+0x1a0>
 80054fe:	2304      	movs	r3, #4
 8005500:	e004      	b.n	800550c <HAL_GPIO_Init+0x1a0>
 8005502:	2302      	movs	r3, #2
 8005504:	e002      	b.n	800550c <HAL_GPIO_Init+0x1a0>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_GPIO_Init+0x1a0>
 800550a:	2300      	movs	r3, #0
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	f002 0203 	and.w	r2, r2, #3
 8005512:	0092      	lsls	r2, r2, #2
 8005514:	4093      	lsls	r3, r2
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800551c:	493a      	ldr	r1, [pc, #232]	; (8005608 <HAL_GPIO_Init+0x29c>)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	3302      	adds	r3, #2
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4938      	ldr	r1, [pc, #224]	; (800561c <HAL_GPIO_Init+0x2b0>)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
 8005542:	e006      	b.n	8005552 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005544:	4b35      	ldr	r3, [pc, #212]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	43db      	mvns	r3, r3
 800554c:	4933      	ldr	r1, [pc, #204]	; (800561c <HAL_GPIO_Init+0x2b0>)
 800554e:	4013      	ands	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d006      	beq.n	800556c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	492e      	ldr	r1, [pc, #184]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
 800556a:	e006      	b.n	800557a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_GPIO_Init+0x2b0>)
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	43db      	mvns	r3, r3
 8005574:	4929      	ldr	r1, [pc, #164]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005576:	4013      	ands	r3, r2
 8005578:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	4924      	ldr	r1, [pc, #144]	; (800561c <HAL_GPIO_Init+0x2b0>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
 8005592:	e006      	b.n	80055a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_GPIO_Init+0x2b0>)
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	43db      	mvns	r3, r3
 800559c:	491f      	ldr	r1, [pc, #124]	; (800561c <HAL_GPIO_Init+0x2b0>)
 800559e:	4013      	ands	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d006      	beq.n	80055bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <HAL_GPIO_Init+0x2b0>)
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	491a      	ldr	r1, [pc, #104]	; (800561c <HAL_GPIO_Init+0x2b0>)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60cb      	str	r3, [r1, #12]
 80055ba:	e006      	b.n	80055ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_GPIO_Init+0x2b0>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	4915      	ldr	r1, [pc, #84]	; (800561c <HAL_GPIO_Init+0x2b0>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	3301      	adds	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f47f aed0 	bne.w	8005380 <HAL_GPIO_Init+0x14>
  }
}
 80055e0:	bf00      	nop
 80055e2:	372c      	adds	r7, #44	; 0x2c
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	10210000 	.word	0x10210000
 80055f0:	10110000 	.word	0x10110000
 80055f4:	10120000 	.word	0x10120000
 80055f8:	10310000 	.word	0x10310000
 80055fc:	10320000 	.word	0x10320000
 8005600:	10220000 	.word	0x10220000
 8005604:	40021000 	.word	0x40021000
 8005608:	40010000 	.word	0x40010000
 800560c:	40010800 	.word	0x40010800
 8005610:	40010c00 	.word	0x40010c00
 8005614:	40011000 	.word	0x40011000
 8005618:	40011400 	.word	0x40011400
 800561c:	40010400 	.word	0x40010400

08005620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e10f      	b.n	8005852 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fd fda0 	bl	800318c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005664:	f001 ff98 	bl	8007598 <HAL_RCC_GetPCLK1Freq>
 8005668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4a7b      	ldr	r2, [pc, #492]	; (800585c <HAL_I2C_Init+0x23c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d807      	bhi.n	8005684 <HAL_I2C_Init+0x64>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a7a      	ldr	r2, [pc, #488]	; (8005860 <HAL_I2C_Init+0x240>)
 8005678:	4293      	cmp	r3, r2
 800567a:	bf94      	ite	ls
 800567c:	2301      	movls	r3, #1
 800567e:	2300      	movhi	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e006      	b.n	8005692 <HAL_I2C_Init+0x72>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a77      	ldr	r2, [pc, #476]	; (8005864 <HAL_I2C_Init+0x244>)
 8005688:	4293      	cmp	r3, r2
 800568a:	bf94      	ite	ls
 800568c:	2301      	movls	r3, #1
 800568e:	2300      	movhi	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0db      	b.n	8005852 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a72      	ldr	r2, [pc, #456]	; (8005868 <HAL_I2C_Init+0x248>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	0c9b      	lsrs	r3, r3, #18
 80056a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a64      	ldr	r2, [pc, #400]	; (800585c <HAL_I2C_Init+0x23c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d802      	bhi.n	80056d4 <HAL_I2C_Init+0xb4>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3301      	adds	r3, #1
 80056d2:	e009      	b.n	80056e8 <HAL_I2C_Init+0xc8>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	4a63      	ldr	r2, [pc, #396]	; (800586c <HAL_I2C_Init+0x24c>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	099b      	lsrs	r3, r3, #6
 80056e6:	3301      	adds	r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4956      	ldr	r1, [pc, #344]	; (800585c <HAL_I2C_Init+0x23c>)
 8005704:	428b      	cmp	r3, r1
 8005706:	d80d      	bhi.n	8005724 <HAL_I2C_Init+0x104>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e59      	subs	r1, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	fbb1 f3f3 	udiv	r3, r1, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571c:	2b04      	cmp	r3, #4
 800571e:	bf38      	it	cc
 8005720:	2304      	movcc	r3, #4
 8005722:	e04f      	b.n	80057c4 <HAL_I2C_Init+0x1a4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d111      	bne.n	8005750 <HAL_I2C_Init+0x130>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1e58      	subs	r0, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	440b      	add	r3, r1
 800573a:	fbb0 f3f3 	udiv	r3, r0, r3
 800573e:	3301      	adds	r3, #1
 8005740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e012      	b.n	8005776 <HAL_I2C_Init+0x156>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1e58      	subs	r0, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	0099      	lsls	r1, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	fbb0 f3f3 	udiv	r3, r0, r3
 8005766:	3301      	adds	r3, #1
 8005768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_I2C_Init+0x15e>
 800577a:	2301      	movs	r3, #1
 800577c:	e022      	b.n	80057c4 <HAL_I2C_Init+0x1a4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10e      	bne.n	80057a4 <HAL_I2C_Init+0x184>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1e58      	subs	r0, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	440b      	add	r3, r1
 8005794:	fbb0 f3f3 	udiv	r3, r0, r3
 8005798:	3301      	adds	r3, #1
 800579a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	e00f      	b.n	80057c4 <HAL_I2C_Init+0x1a4>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1e58      	subs	r0, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	0099      	lsls	r1, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ba:	3301      	adds	r3, #1
 80057bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	6809      	ldr	r1, [r1, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6911      	ldr	r1, [r2, #16]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	4311      	orrs	r1, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	430b      	orrs	r3, r1
 8005806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	000186a0 	.word	0x000186a0
 8005860:	001e847f 	.word	0x001e847f
 8005864:	003d08ff 	.word	0x003d08ff
 8005868:	431bde83 	.word	0x431bde83
 800586c:	10624dd3 	.word	0x10624dd3

08005870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	461a      	mov	r2, r3
 800587c:	460b      	mov	r3, r1
 800587e:	817b      	strh	r3, [r7, #10]
 8005880:	4613      	mov	r3, r2
 8005882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005884:	f7fe f850 	bl	8003928 <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b20      	cmp	r3, #32
 8005894:	f040 80e0 	bne.w	8005a58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2319      	movs	r3, #25
 800589e:	2201      	movs	r2, #1
 80058a0:	4970      	ldr	r1, [pc, #448]	; (8005a64 <HAL_I2C_Master_Transmit+0x1f4>)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f001 f8c6 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0d3      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_I2C_Master_Transmit+0x50>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0cc      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d007      	beq.n	80058e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2221      	movs	r2, #33	; 0x21
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2210      	movs	r2, #16
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	893a      	ldrh	r2, [r7, #8]
 8005916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a50      	ldr	r2, [pc, #320]	; (8005a68 <HAL_I2C_Master_Transmit+0x1f8>)
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005928:	8979      	ldrh	r1, [r7, #10]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fdfa 	bl	8006528 <I2C_MasterRequestWrite>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08d      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005954:	e066      	b.n	8005a24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6a39      	ldr	r1, [r7, #32]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 f940 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	2b04      	cmp	r3, #4
 800596c:	d107      	bne.n	800597e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e06b      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11b      	bne.n	80059f8 <HAL_I2C_Master_Transmit+0x188>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	6a39      	ldr	r1, [r7, #32]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f001 f930 	bl	8006c62 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d107      	bne.n	8005a20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e01a      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d194      	bne.n	8005956 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	00100002 	.word	0x00100002
 8005a68:	ffff0000 	.word	0xffff0000

08005a6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	461a      	mov	r2, r3
 8005a78:	460b      	mov	r3, r1
 8005a7a:	817b      	strh	r3, [r7, #10]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a80:	f7fd ff52 	bl	8003928 <HAL_GetTick>
 8005a84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 8213 	bne.w	8005eba <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2319      	movs	r3, #25
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	497e      	ldr	r1, [pc, #504]	; (8005c98 <HAL_I2C_Master_Receive+0x22c>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 ffc8 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e206      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_I2C_Master_Receive+0x50>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e1ff      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d007      	beq.n	8005ae2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0201 	orr.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2222      	movs	r2, #34	; 0x22
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2210      	movs	r2, #16
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	893a      	ldrh	r2, [r7, #8]
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a5e      	ldr	r2, [pc, #376]	; (8005c9c <HAL_I2C_Master_Receive+0x230>)
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b24:	8979      	ldrh	r1, [r7, #10]
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fd72 	bl	8006614 <I2C_MasterRequestRead>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e1c0      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d113      	bne.n	8005b6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	623b      	str	r3, [r7, #32]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e194      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d11d      	bne.n	8005bae <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b80:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005baa:	b662      	cpsie	i
 8005bac:	e172      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d11d      	bne.n	8005bf2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bc6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bee:	b662      	cpsie	i
 8005bf0:	e150      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c18:	e13c      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	f200 80f5 	bhi.w	8005e0e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d123      	bne.n	8005c74 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f001 f857 	bl	8006ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e13d      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c72:	e10f      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d150      	bne.n	8005d1e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <HAL_I2C_Master_Receive+0x234>)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fed4 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e112      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
 8005c96:	bf00      	nop
 8005c98:	00100002 	.word	0x00100002
 8005c9c:	ffff0000 	.word	0xffff0000
 8005ca0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ce8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d1c:	e0ba      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2200      	movs	r2, #0
 8005d26:	4967      	ldr	r1, [pc, #412]	; (8005ec4 <HAL_I2C_Master_Receive+0x458>)
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fe83 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0c1      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d48:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	494f      	ldr	r1, [pc, #316]	; (8005ec4 <HAL_I2C_Master_Receive+0x458>)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fe54 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e092      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005dd8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e0c:	e042      	b.n	8005e94 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 ff66 	bl	8006ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e04c      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d118      	bne.n	8005e94 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f aebe 	bne.w	8005c1a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00010004 	.word	0x00010004

08005ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ee2:	f7fd fd21 	bl	8003928 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 80d9 	bne.w	80060a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2319      	movs	r3, #25
 8005efc:	2201      	movs	r2, #1
 8005efe:	496d      	ldr	r1, [pc, #436]	; (80060b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fd97 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0cc      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Mem_Write+0x56>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0c5      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d007      	beq.n	8005f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	; 0x40
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a4d      	ldr	r2, [pc, #308]	; (80060b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f86:	88f8      	ldrh	r0, [r7, #6]
 8005f88:	893a      	ldrh	r2, [r7, #8]
 8005f8a:	8979      	ldrh	r1, [r7, #10]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4603      	mov	r3, r0
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fbf2 	bl	8006780 <I2C_RequestMemoryWrite>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d052      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e081      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fe18 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e06b      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d11b      	bne.n	8006048 <HAL_I2C_Mem_Write+0x180>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1aa      	bne.n	8005fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fe04 	bl	8006c62 <I2C_WaitOnBTFFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	2b04      	cmp	r3, #4
 8006066:	d107      	bne.n	8006078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e016      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	00100002 	.word	0x00100002
 80060b8:	ffff0000 	.word	0xffff0000

080060bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	460b      	mov	r3, r1
 80060d0:	813b      	strh	r3, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060d6:	f7fd fc27 	bl	8003928 <HAL_GetTick>
 80060da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	f040 8218 	bne.w	800651a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2319      	movs	r3, #25
 80060f0:	2201      	movs	r2, #1
 80060f2:	4981      	ldr	r1, [pc, #516]	; (80062f8 <HAL_I2C_Mem_Read+0x23c>)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fc9d 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
 8006102:	e20b      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_I2C_Mem_Read+0x56>
 800610e:	2302      	movs	r3, #2
 8006110:	e204      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d007      	beq.n	8006138 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2222      	movs	r2, #34	; 0x22
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a61      	ldr	r2, [pc, #388]	; (80062fc <HAL_I2C_Mem_Read+0x240>)
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800617a:	88f8      	ldrh	r0, [r7, #6]
 800617c:	893a      	ldrh	r2, [r7, #8]
 800617e:	8979      	ldrh	r1, [r7, #10]
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4603      	mov	r3, r0
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fb82 	bl	8006894 <I2C_RequestMemoryRead>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e1c0      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a2:	2300      	movs	r3, #0
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e194      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d11d      	bne.n	800620e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800620a:	b662      	cpsie	i
 800620c:	e172      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006212:	2b02      	cmp	r3, #2
 8006214:	d11d      	bne.n	8006252 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006224:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006226:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800624e:	b662      	cpsie	i
 8006250:	e150      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006260:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006278:	e13c      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	2b03      	cmp	r3, #3
 8006280:	f200 80f5 	bhi.w	800646e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	2b01      	cmp	r3, #1
 800628a:	d123      	bne.n	80062d4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fd27 	bl	8006ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e13d      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d2:	e10f      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d150      	bne.n	800637e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2200      	movs	r2, #0
 80062e4:	4906      	ldr	r1, [pc, #24]	; (8006300 <HAL_I2C_Mem_Read+0x244>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fba4 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e112      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
 80062f6:	bf00      	nop
 80062f8:	00100002 	.word	0x00100002
 80062fc:	ffff0000 	.word	0xffff0000
 8006300:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006304:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006314:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006348:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800637c:	e0ba      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2200      	movs	r2, #0
 8006386:	4967      	ldr	r1, [pc, #412]	; (8006524 <HAL_I2C_Mem_Read+0x468>)
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fb53 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0c1      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	2200      	movs	r2, #0
 80063e4:	494f      	ldr	r1, [pc, #316]	; (8006524 <HAL_I2C_Mem_Read+0x468>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fb24 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e092      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006438:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800646c:	e042      	b.n	80064f4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fc36 	bl	8006ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e04c      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d118      	bne.n	80064f4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f aebe 	bne.w	800627a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e000      	b.n	800651c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800651a:	2302      	movs	r3, #2
  }
}
 800651c:	4618      	mov	r0, r3
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	00010004 	.word	0x00010004

08006528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	460b      	mov	r3, r1
 8006536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d006      	beq.n	8006552 <I2C_MasterRequestWrite+0x2a>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d003      	beq.n	8006552 <I2C_MasterRequestWrite+0x2a>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006550:	d108      	bne.n	8006564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e00b      	b.n	800657c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	2b12      	cmp	r3, #18
 800656a:	d107      	bne.n	800657c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800657a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fa53 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e035      	b.n	8006604 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a0:	d108      	bne.n	80065b4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065a2:	897b      	ldrh	r3, [r7, #10]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065b0:	611a      	str	r2, [r3, #16]
 80065b2:	e01b      	b.n	80065ec <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065b4:	897b      	ldrh	r3, [r7, #10]
 80065b6:	11db      	asrs	r3, r3, #7
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0306 	and.w	r3, r3, #6
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f063 030f 	orn	r3, r3, #15
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <I2C_MasterRequestWrite+0xe4>)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fa85 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e010      	b.n	8006604 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065e2:	897b      	ldrh	r3, [r7, #10]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4907      	ldr	r1, [pc, #28]	; (8006610 <I2C_MasterRequestWrite+0xe8>)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa75 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	00010008 	.word	0x00010008
 8006610:	00010002 	.word	0x00010002

08006614 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	460b      	mov	r3, r1
 8006622:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006638:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d006      	beq.n	800664e <I2C_MasterRequestRead+0x3a>
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d003      	beq.n	800664e <I2C_MasterRequestRead+0x3a>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800664c:	d108      	bne.n	8006660 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e00b      	b.n	8006678 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	2b11      	cmp	r3, #17
 8006666:	d107      	bne.n	8006678 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006676:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f9d5 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e06d      	b.n	8006770 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669c:	d108      	bne.n	80066b0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	611a      	str	r2, [r3, #16]
 80066ae:	e053      	b.n	8006758 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066b0:	897b      	ldrh	r3, [r7, #10]
 80066b2:	11db      	asrs	r3, r3, #7
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 0306 	and.w	r3, r3, #6
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f063 030f 	orn	r3, r3, #15
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	492a      	ldr	r1, [pc, #168]	; (8006778 <I2C_MasterRequestRead+0x164>)
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fa07 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e048      	b.n	8006770 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066de:	897b      	ldrh	r3, [r7, #10]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4923      	ldr	r1, [pc, #140]	; (800677c <I2C_MasterRequestRead+0x168>)
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f9f7 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e038      	b.n	8006770 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006722:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f97f 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e017      	b.n	8006770 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006740:	897b      	ldrh	r3, [r7, #10]
 8006742:	11db      	asrs	r3, r3, #7
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0306 	and.w	r3, r3, #6
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f063 030e 	orn	r3, r3, #14
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4907      	ldr	r1, [pc, #28]	; (800677c <I2C_MasterRequestRead+0x168>)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f9bf 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	00010008 	.word	0x00010008
 800677c:	00010002 	.word	0x00010002

08006780 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	4608      	mov	r0, r1
 800678a:	4611      	mov	r1, r2
 800678c:	461a      	mov	r2, r3
 800678e:	4603      	mov	r3, r0
 8006790:	817b      	strh	r3, [r7, #10]
 8006792:	460b      	mov	r3, r1
 8006794:	813b      	strh	r3, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f93c 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e05f      	b.n	8006886 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c6:	897b      	ldrh	r3, [r7, #10]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	492d      	ldr	r1, [pc, #180]	; (8006890 <I2C_RequestMemoryWrite+0x110>)
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f980 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e04c      	b.n	8006886 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	6a39      	ldr	r1, [r7, #32]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f9ea 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b04      	cmp	r3, #4
 8006818:	d107      	bne.n	800682a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e02b      	b.n	8006886 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d105      	bne.n	8006840 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	611a      	str	r2, [r3, #16]
 800683e:	e021      	b.n	8006884 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006840:	893b      	ldrh	r3, [r7, #8]
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	b29b      	uxth	r3, r3
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	6a39      	ldr	r1, [r7, #32]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f9c4 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00d      	beq.n	800687a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b04      	cmp	r3, #4
 8006864:	d107      	bne.n	8006876 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e005      	b.n	8006886 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	00010002 	.word	0x00010002

08006894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	461a      	mov	r2, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	817b      	strh	r3, [r7, #10]
 80068a6:	460b      	mov	r3, r1
 80068a8:	813b      	strh	r3, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f8aa 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e09e      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	6a3a      	ldr	r2, [r7, #32]
 80068fe:	494c      	ldr	r1, [pc, #304]	; (8006a30 <I2C_RequestMemoryRead+0x19c>)
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f8ee 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e08b      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	6a39      	ldr	r1, [r7, #32]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f958 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	2b04      	cmp	r3, #4
 800693c:	d107      	bne.n	800694e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e06a      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d105      	bne.n	8006964 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006958:	893b      	ldrh	r3, [r7, #8]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	611a      	str	r2, [r3, #16]
 8006962:	e021      	b.n	80069a8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006964:	893b      	ldrh	r3, [r7, #8]
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	b29b      	uxth	r3, r3
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	6a39      	ldr	r1, [r7, #32]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f932 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b04      	cmp	r3, #4
 8006988:	d107      	bne.n	800699a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e044      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800699e:	893b      	ldrh	r3, [r7, #8]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	6a39      	ldr	r1, [r7, #32]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f917 	bl	8006be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00d      	beq.n	80069d4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d107      	bne.n	80069d0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e029      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f81f 	bl	8006a34 <I2C_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e013      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a00:	897b      	ldrh	r3, [r7, #10]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <I2C_RequestMemoryRead+0x19c>)
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f863 	bl	8006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	00010002 	.word	0x00010002

08006a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a44:	e025      	b.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d021      	beq.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fc ff6b 	bl	8003928 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e023      	b.n	8006ada <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d10d      	bne.n	8006ab8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	43da      	mvns	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	e00c      	b.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	43da      	mvns	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf0c      	ite	eq
 8006aca:	2301      	moveq	r3, #1
 8006acc:	2300      	movne	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d0b6      	beq.n	8006a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006af0:	e051      	b.n	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d123      	bne.n	8006b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f043 0204 	orr.w	r2, r3, #4
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e046      	b.n	8006bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d021      	beq.n	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fc fee9 	bl	8003928 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d302      	bcc.n	8006b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d116      	bne.n	8006b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0220 	orr.w	r2, r3, #32
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e020      	b.n	8006bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10c      	bne.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	43da      	mvns	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bf14      	ite	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	2300      	moveq	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	e00b      	b.n	8006bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	43da      	mvns	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d18d      	bne.n	8006af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bec:	e02d      	b.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f8ce 	bl	8006d90 <I2C_IsAcknowledgeFailed>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e02d      	b.n	8006c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d021      	beq.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fc fe8f 	bl	8003928 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d116      	bne.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e007      	b.n	8006c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d1ca      	bne.n	8006bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c6e:	e02d      	b.n	8006ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f88d 	bl	8006d90 <I2C_IsAcknowledgeFailed>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e02d      	b.n	8006cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d021      	beq.n	8006ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fc fe4e 	bl	8003928 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d116      	bne.n	8006ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e007      	b.n	8006cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d1ca      	bne.n	8006c70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cf0:	e042      	b.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d119      	bne.n	8006d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0210 	mvn.w	r2, #16
 8006d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e029      	b.n	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d34:	f7fc fdf8 	bl	8003928 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d116      	bne.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	f043 0220 	orr.w	r2, r3, #32
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e007      	b.n	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d1b5      	bne.n	8006cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da6:	d11b      	bne.n	8006de0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006db0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	f043 0204 	orr.w	r2, r3, #4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e26c      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8087 	beq.w	8006f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e0c:	4b92      	ldr	r3, [pc, #584]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 030c 	and.w	r3, r3, #12
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d00c      	beq.n	8006e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e18:	4b8f      	ldr	r3, [pc, #572]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f003 030c 	and.w	r3, r3, #12
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d112      	bne.n	8006e4a <HAL_RCC_OscConfig+0x5e>
 8006e24:	4b8c      	ldr	r3, [pc, #560]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e30:	d10b      	bne.n	8006e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e32:	4b89      	ldr	r3, [pc, #548]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06c      	beq.n	8006f18 <HAL_RCC_OscConfig+0x12c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d168      	bne.n	8006f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e246      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e52:	d106      	bne.n	8006e62 <HAL_RCC_OscConfig+0x76>
 8006e54:	4b80      	ldr	r3, [pc, #512]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7f      	ldr	r2, [pc, #508]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e02e      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10c      	bne.n	8006e84 <HAL_RCC_OscConfig+0x98>
 8006e6a:	4b7b      	ldr	r3, [pc, #492]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a7a      	ldr	r2, [pc, #488]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4b78      	ldr	r3, [pc, #480]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a77      	ldr	r2, [pc, #476]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	e01d      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCC_OscConfig+0xbc>
 8006e8e:	4b72      	ldr	r3, [pc, #456]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a71      	ldr	r2, [pc, #452]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	4b6f      	ldr	r3, [pc, #444]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e00b      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006ea8:	4b6b      	ldr	r3, [pc, #428]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a6a      	ldr	r2, [pc, #424]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4b68      	ldr	r3, [pc, #416]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a67      	ldr	r2, [pc, #412]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d013      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec8:	f7fc fd2e 	bl	8003928 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed0:	f7fc fd2a 	bl	8003928 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	; 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e1fa      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee2:	4b5d      	ldr	r3, [pc, #372]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0xe4>
 8006eee:	e014      	b.n	8006f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fc fd1a 	bl	8003928 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef8:	f7fc fd16 	bl	8003928 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b64      	cmp	r3, #100	; 0x64
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e1e6      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f0a:	4b53      	ldr	r3, [pc, #332]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x10c>
 8006f16:	e000      	b.n	8006f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d063      	beq.n	8006fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f26:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f003 030c 	and.w	r3, r3, #12
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f32:	4b49      	ldr	r3, [pc, #292]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d11c      	bne.n	8006f78 <HAL_RCC_OscConfig+0x18c>
 8006f3e:	4b46      	ldr	r3, [pc, #280]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d116      	bne.n	8006f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f4a:	4b43      	ldr	r3, [pc, #268]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_RCC_OscConfig+0x176>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d001      	beq.n	8006f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e1ba      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f62:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4939      	ldr	r1, [pc, #228]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f76:	e03a      	b.n	8006fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d020      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <HAL_RCC_OscConfig+0x270>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f86:	f7fc fccf 	bl	8003928 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f8e:	f7fc fccb 	bl	8003928 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e19b      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fac:	4b2a      	ldr	r3, [pc, #168]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4927      	ldr	r1, [pc, #156]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]
 8006fc0:	e015      	b.n	8006fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fc2:	4b26      	ldr	r3, [pc, #152]	; (800705c <HAL_RCC_OscConfig+0x270>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc8:	f7fc fcae 	bl	8003928 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd0:	f7fc fcaa 	bl	8003928 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e17a      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d03a      	beq.n	8007070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d019      	beq.n	8007036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007002:	4b17      	ldr	r3, [pc, #92]	; (8007060 <HAL_RCC_OscConfig+0x274>)
 8007004:	2201      	movs	r2, #1
 8007006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007008:	f7fc fc8e 	bl	8003928 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007010:	f7fc fc8a 	bl	8003928 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e15a      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007022:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <HAL_RCC_OscConfig+0x26c>)
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800702e:	2001      	movs	r0, #1
 8007030:	f000 fada 	bl	80075e8 <RCC_Delay>
 8007034:	e01c      	b.n	8007070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007036:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <HAL_RCC_OscConfig+0x274>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800703c:	f7fc fc74 	bl	8003928 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007042:	e00f      	b.n	8007064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007044:	f7fc fc70 	bl	8003928 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d908      	bls.n	8007064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e140      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
 8007056:	bf00      	nop
 8007058:	40021000 	.word	0x40021000
 800705c:	42420000 	.word	0x42420000
 8007060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007064:	4b9e      	ldr	r3, [pc, #632]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e9      	bne.n	8007044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80a6 	beq.w	80071ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007082:	4b97      	ldr	r3, [pc, #604]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10d      	bne.n	80070aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	4b94      	ldr	r3, [pc, #592]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	4a93      	ldr	r2, [pc, #588]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007098:	61d3      	str	r3, [r2, #28]
 800709a:	4b91      	ldr	r3, [pc, #580]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a2:	60bb      	str	r3, [r7, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070aa:	4b8e      	ldr	r3, [pc, #568]	; (80072e4 <HAL_RCC_OscConfig+0x4f8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d118      	bne.n	80070e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070b6:	4b8b      	ldr	r3, [pc, #556]	; (80072e4 <HAL_RCC_OscConfig+0x4f8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a8a      	ldr	r2, [pc, #552]	; (80072e4 <HAL_RCC_OscConfig+0x4f8>)
 80070bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070c2:	f7fc fc31 	bl	8003928 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ca:	f7fc fc2d 	bl	8003928 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b64      	cmp	r3, #100	; 0x64
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e0fd      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070dc:	4b81      	ldr	r3, [pc, #516]	; (80072e4 <HAL_RCC_OscConfig+0x4f8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d106      	bne.n	80070fe <HAL_RCC_OscConfig+0x312>
 80070f0:	4b7b      	ldr	r3, [pc, #492]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	4a7a      	ldr	r2, [pc, #488]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	6213      	str	r3, [r2, #32]
 80070fc:	e02d      	b.n	800715a <HAL_RCC_OscConfig+0x36e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <HAL_RCC_OscConfig+0x334>
 8007106:	4b76      	ldr	r3, [pc, #472]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	4a75      	ldr	r2, [pc, #468]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	6213      	str	r3, [r2, #32]
 8007112:	4b73      	ldr	r3, [pc, #460]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	4a72      	ldr	r2, [pc, #456]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007118:	f023 0304 	bic.w	r3, r3, #4
 800711c:	6213      	str	r3, [r2, #32]
 800711e:	e01c      	b.n	800715a <HAL_RCC_OscConfig+0x36e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b05      	cmp	r3, #5
 8007126:	d10c      	bne.n	8007142 <HAL_RCC_OscConfig+0x356>
 8007128:	4b6d      	ldr	r3, [pc, #436]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	4a6c      	ldr	r2, [pc, #432]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	6213      	str	r3, [r2, #32]
 8007134:	4b6a      	ldr	r3, [pc, #424]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	4a69      	ldr	r2, [pc, #420]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	6213      	str	r3, [r2, #32]
 8007140:	e00b      	b.n	800715a <HAL_RCC_OscConfig+0x36e>
 8007142:	4b67      	ldr	r3, [pc, #412]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4a66      	ldr	r2, [pc, #408]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	6213      	str	r3, [r2, #32]
 800714e:	4b64      	ldr	r3, [pc, #400]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	4a63      	ldr	r2, [pc, #396]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007154:	f023 0304 	bic.w	r3, r3, #4
 8007158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d015      	beq.n	800718e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007162:	f7fc fbe1 	bl	8003928 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fc fbdd 	bl	8003928 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	; 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0ab      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007180:	4b57      	ldr	r3, [pc, #348]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0ee      	beq.n	800716a <HAL_RCC_OscConfig+0x37e>
 800718c:	e014      	b.n	80071b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718e:	f7fc fbcb 	bl	8003928 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007194:	e00a      	b.n	80071ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fc fbc7 	bl	8003928 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e095      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ac:	4b4c      	ldr	r3, [pc, #304]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1ee      	bne.n	8007196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d105      	bne.n	80071ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071be:	4b48      	ldr	r3, [pc, #288]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	4a47      	ldr	r2, [pc, #284]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80071c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8081 	beq.w	80072d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071d4:	4b42      	ldr	r3, [pc, #264]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 030c 	and.w	r3, r3, #12
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d061      	beq.n	80072a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d146      	bne.n	8007276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <HAL_RCC_OscConfig+0x4fc>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ee:	f7fc fb9b 	bl	8003928 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f6:	f7fc fb97 	bl	8003928 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e067      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007208:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f0      	bne.n	80071f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d108      	bne.n	8007230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800721e:	4b30      	ldr	r3, [pc, #192]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	492d      	ldr	r1, [pc, #180]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800722c:	4313      	orrs	r3, r2
 800722e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007230:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a19      	ldr	r1, [r3, #32]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	430b      	orrs	r3, r1
 8007242:	4927      	ldr	r1, [pc, #156]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <HAL_RCC_OscConfig+0x4fc>)
 800724a:	2201      	movs	r2, #1
 800724c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724e:	f7fc fb6b 	bl	8003928 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007256:	f7fc fb67 	bl	8003928 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e037      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007268:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x46a>
 8007274:	e02f      	b.n	80072d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007276:	4b1c      	ldr	r3, [pc, #112]	; (80072e8 <HAL_RCC_OscConfig+0x4fc>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727c:	f7fc fb54 	bl	8003928 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007284:	f7fc fb50 	bl	8003928 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e020      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x498>
 80072a2:	e018      	b.n	80072d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e013      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <HAL_RCC_OscConfig+0x4f4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d106      	bne.n	80072d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d001      	beq.n	80072d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40021000 	.word	0x40021000
 80072e4:	40007000 	.word	0x40007000
 80072e8:	42420060 	.word	0x42420060

080072ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e0d0      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007300:	4b6a      	ldr	r3, [pc, #424]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d910      	bls.n	8007330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730e:	4b67      	ldr	r3, [pc, #412]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f023 0207 	bic.w	r2, r3, #7
 8007316:	4965      	ldr	r1, [pc, #404]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800731e:	4b63      	ldr	r3, [pc, #396]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d001      	beq.n	8007330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e0b8      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007348:	4b59      	ldr	r3, [pc, #356]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	4a58      	ldr	r2, [pc, #352]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800734e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007360:	4b53      	ldr	r3, [pc, #332]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	4a52      	ldr	r2, [pc, #328]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800736a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800736c:	4b50      	ldr	r3, [pc, #320]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	494d      	ldr	r1, [pc, #308]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800737a:	4313      	orrs	r3, r2
 800737c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d040      	beq.n	800740c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d107      	bne.n	80073a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007392:	4b47      	ldr	r3, [pc, #284]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d115      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e07f      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d107      	bne.n	80073ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073aa:	4b41      	ldr	r3, [pc, #260]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e073      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ba:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e06b      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ca:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f023 0203 	bic.w	r2, r3, #3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4936      	ldr	r1, [pc, #216]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073dc:	f7fc faa4 	bl	8003928 <HAL_GetTick>
 80073e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e2:	e00a      	b.n	80073fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e4:	f7fc faa0 	bl	8003928 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e053      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fa:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 020c 	and.w	r2, r3, #12
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	429a      	cmp	r2, r3
 800740a:	d1eb      	bne.n	80073e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800740c:	4b27      	ldr	r3, [pc, #156]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d210      	bcs.n	800743c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f023 0207 	bic.w	r2, r3, #7
 8007422:	4922      	ldr	r1, [pc, #136]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	4313      	orrs	r3, r2
 8007428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800742a:	4b20      	ldr	r3, [pc, #128]	; (80074ac <HAL_RCC_ClockConfig+0x1c0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d001      	beq.n	800743c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e032      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007448:	4b19      	ldr	r3, [pc, #100]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4916      	ldr	r1, [pc, #88]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007456:	4313      	orrs	r3, r2
 8007458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	490e      	ldr	r1, [pc, #56]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007476:	4313      	orrs	r3, r2
 8007478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800747a:	f000 f821 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 800747e:	4601      	mov	r1, r0
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <HAL_RCC_ClockConfig+0x1c8>)
 800748c:	5cd3      	ldrb	r3, [r2, r3]
 800748e:	fa21 f303 	lsr.w	r3, r1, r3
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <HAL_RCC_ClockConfig+0x1cc>)
 8007494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <HAL_RCC_ClockConfig+0x1d0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f7fc fa02 	bl	80038a4 <HAL_InitTick>

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40022000 	.word	0x40022000
 80074b0:	40021000 	.word	0x40021000
 80074b4:	0800d168 	.word	0x0800d168
 80074b8:	2000002c 	.word	0x2000002c
 80074bc:	20000030 	.word	0x20000030

080074c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c0:	b490      	push	{r4, r7}
 80074c2:	b08a      	sub	sp, #40	; 0x28
 80074c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80074c6:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80074c8:	1d3c      	adds	r4, r7, #4
 80074ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80074cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	2300      	movs	r3, #0
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80074ea:	4b23      	ldr	r3, [pc, #140]	; (8007578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f003 030c 	and.w	r3, r3, #12
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d002      	beq.n	8007500 <HAL_RCC_GetSysClockFreq+0x40>
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_GetSysClockFreq+0x46>
 80074fe:	e02d      	b.n	800755c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007500:	4b1e      	ldr	r3, [pc, #120]	; (800757c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007502:	623b      	str	r3, [r7, #32]
      break;
 8007504:	e02d      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	0c9b      	lsrs	r3, r3, #18
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007512:	4413      	add	r3, r2
 8007514:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007518:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007524:	4b14      	ldr	r3, [pc, #80]	; (8007578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0c5b      	lsrs	r3, r3, #17
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007532:	4413      	add	r3, r2
 8007534:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007538:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4a0f      	ldr	r2, [pc, #60]	; (800757c <HAL_RCC_GetSysClockFreq+0xbc>)
 800753e:	fb02 f203 	mul.w	r2, r2, r3
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
 800754a:	e004      	b.n	8007556 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4a0c      	ldr	r2, [pc, #48]	; (8007580 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	623b      	str	r3, [r7, #32]
      break;
 800755a:	e002      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <HAL_RCC_GetSysClockFreq+0xbc>)
 800755e:	623b      	str	r3, [r7, #32]
      break;
 8007560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007562:	6a3b      	ldr	r3, [r7, #32]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3728      	adds	r7, #40	; 0x28
 8007568:	46bd      	mov	sp, r7
 800756a:	bc90      	pop	{r4, r7}
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	0800d154 	.word	0x0800d154
 8007574:	0800d164 	.word	0x0800d164
 8007578:	40021000 	.word	0x40021000
 800757c:	007a1200 	.word	0x007a1200
 8007580:	003d0900 	.word	0x003d0900

08007584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <HAL_RCC_GetHCLKFreq+0x10>)
 800758a:	681b      	ldr	r3, [r3, #0]
}
 800758c:	4618      	mov	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr
 8007594:	2000002c 	.word	0x2000002c

08007598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800759c:	f7ff fff2 	bl	8007584 <HAL_RCC_GetHCLKFreq>
 80075a0:	4601      	mov	r1, r0
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	4a03      	ldr	r2, [pc, #12]	; (80075bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ae:	5cd3      	ldrb	r3, [r2, r3]
 80075b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40021000 	.word	0x40021000
 80075bc:	0800d178 	.word	0x0800d178

080075c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075c4:	f7ff ffde 	bl	8007584 <HAL_RCC_GetHCLKFreq>
 80075c8:	4601      	mov	r1, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	0adb      	lsrs	r3, r3, #11
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4a03      	ldr	r2, [pc, #12]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075d6:	5cd3      	ldrb	r3, [r2, r3]
 80075d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40021000 	.word	0x40021000
 80075e4:	0800d178 	.word	0x0800d178

080075e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <RCC_Delay+0x34>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <RCC_Delay+0x38>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	0a5b      	lsrs	r3, r3, #9
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007604:	bf00      	nop
  }
  while (Delay --);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	60fa      	str	r2, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f9      	bne.n	8007604 <RCC_Delay+0x1c>
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	2000002c 	.word	0x2000002c
 8007620:	10624dd3 	.word	0x10624dd3

08007624 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d07d      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007640:	2300      	movs	r3, #0
 8007642:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007644:	4b4f      	ldr	r3, [pc, #316]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007650:	4b4c      	ldr	r3, [pc, #304]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4a4b      	ldr	r2, [pc, #300]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765a:	61d3      	str	r3, [r2, #28]
 800765c:	4b49      	ldr	r3, [pc, #292]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007668:	2301      	movs	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800766c:	4b46      	ldr	r3, [pc, #280]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d118      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007678:	4b43      	ldr	r3, [pc, #268]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a42      	ldr	r2, [pc, #264]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800767e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007684:	f7fc f950 	bl	8003928 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768a:	e008      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768c:	f7fc f94c 	bl	8003928 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e06d      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800769e:	4b3a      	ldr	r3, [pc, #232]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076aa:	4b36      	ldr	r3, [pc, #216]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d02e      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d027      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076c8:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076d2:	4b2e      	ldr	r3, [pc, #184]	; (800778c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076d8:	4b2c      	ldr	r3, [pc, #176]	; (800778c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076de:	4a29      	ldr	r2, [pc, #164]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ee:	f7fc f91b 	bl	8003928 <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f4:	e00a      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f6:	f7fc f917 	bl	8003928 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	f241 3288 	movw	r2, #5000	; 0x1388
 8007704:	4293      	cmp	r3, r2
 8007706:	d901      	bls.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e036      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770c:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0ee      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007718:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4917      	ldr	r1, [pc, #92]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007726:	4313      	orrs	r3, r2
 8007728:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d105      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800773a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007748:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	490b      	ldr	r1, [pc, #44]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007756:	4313      	orrs	r3, r2
 8007758:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007766:	4b07      	ldr	r3, [pc, #28]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	4904      	ldr	r1, [pc, #16]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007774:	4313      	orrs	r3, r2
 8007776:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000
 8007788:	40007000 	.word	0x40007000
 800778c:	42420440 	.word	0x42420440

08007790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e01d      	b.n	80077de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fb fd38 	bl	800322c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f000 fcb0 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b06      	cmp	r3, #6
 800780e:	d007      	beq.n	8007820 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e01d      	b.n	800787a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f815 	bl	8007882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f000 fc62 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2201      	movs	r2, #1
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 ffd1 	bl	800884e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <HAL_TIM_PWM_Start+0x60>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d107      	bne.n	80078c6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d007      	beq.n	80078e8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40012c00 	.word	0x40012c00

080078f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e01d      	b.n	8007946 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f815 	bl	800794e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f000 fbfc 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr

08007960 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d841      	bhi.n	80079f4 <HAL_TIM_IC_Start_IT+0x94>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <HAL_TIM_IC_Start_IT+0x18>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079f5 	.word	0x080079f5
 8007980:	080079f5 	.word	0x080079f5
 8007984:	080079f5 	.word	0x080079f5
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079f5 	.word	0x080079f5
 8007990:	080079f5 	.word	0x080079f5
 8007994:	080079f5 	.word	0x080079f5
 8007998:	080079d1 	.word	0x080079d1
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	080079f5 	.word	0x080079f5
 80079a8:	080079e3 	.word	0x080079e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0202 	orr.w	r2, r2, #2
 80079ba:	60da      	str	r2, [r3, #12]
      break;
 80079bc:	e01b      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0204 	orr.w	r2, r2, #4
 80079cc:	60da      	str	r2, [r3, #12]
      break;
 80079ce:	e012      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0208 	orr.w	r2, r2, #8
 80079de:	60da      	str	r2, [r3, #12]
      break;
 80079e0:	e009      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0210 	orr.w	r2, r2, #16
 80079f0:	60da      	str	r2, [r3, #12]
      break;
 80079f2:	e000      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80079f4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2201      	movs	r2, #1
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 ff25 	bl	800884e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d007      	beq.n	8007a26 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d122      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0202 	mvn.w	r2, #2
 8007a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7f9 fc30 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb3e 	bl	80080fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb44 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d122      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d11b      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0204 	mvn.w	r2, #4
 8007ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7f9 fc06 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8007acc:	e005      	b.n	8007ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb14 	bl	80080fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb1a 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	d122      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d11b      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0208 	mvn.w	r2, #8
 8007b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7f9 fbdc 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8007b20:	e005      	b.n	8007b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 faea 	bl	80080fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 faf0 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0210 	mvn.w	r2, #16
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7f9 fbb2 	bl	80012d8 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fac0 	bl	80080fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fac6 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d10e      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d107      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0201 	mvn.w	r2, #1
 8007bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fa feee 	bl	8002990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbe:	2b80      	cmp	r3, #128	; 0x80
 8007bc0:	d10e      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d107      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fea8 	bl	8008930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d10e      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b40      	cmp	r3, #64	; 0x40
 8007bfa:	d107      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa8a 	bl	8008120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d10e      	bne.n	8007c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d107      	bne.n	8007c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0220 	mvn.w	r2, #32
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fe73 	bl	800891e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e08a      	b.n	8007d70 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2202      	movs	r2, #2
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6819      	ldr	r1, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f000 fc42 	bl	8008508 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020c 	bic.w	r2, r2, #12
 8007c92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6999      	ldr	r1, [r3, #24]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	619a      	str	r2, [r3, #24]
 8007ca6:	e05a      	b.n	8007d5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d11c      	bne.n	8007ce8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6819      	ldr	r1, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f000 fcab 	bl	8008618 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6999      	ldr	r1, [r3, #24]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	021a      	lsls	r2, r3, #8
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	619a      	str	r2, [r3, #24]
 8007ce6:	e03a      	b.n	8007d5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d11b      	bne.n	8007d26 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f000 fcf6 	bl	80086ee <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 020c 	bic.w	r2, r2, #12
 8007d10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69d9      	ldr	r1, [r3, #28]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	61da      	str	r2, [r3, #28]
 8007d24:	e01b      	b.n	8007d5e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6819      	ldr	r1, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f000 fd15 	bl	8008764 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69d9      	ldr	r1, [r3, #28]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	021a      	lsls	r2, r3, #8
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e0b4      	b.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	f200 809f 	bhi.w	8007ee8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007ee9 	.word	0x08007ee9
 8007db8:	08007ee9 	.word	0x08007ee9
 8007dbc:	08007ee9 	.word	0x08007ee9
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08007ee9 	.word	0x08007ee9
 8007dc8:	08007ee9 	.word	0x08007ee9
 8007dcc:	08007ee9 	.word	0x08007ee9
 8007dd0:	08007e67 	.word	0x08007e67
 8007dd4:	08007ee9 	.word	0x08007ee9
 8007dd8:	08007ee9 	.word	0x08007ee9
 8007ddc:	08007ee9 	.word	0x08007ee9
 8007de0:	08007ea7 	.word	0x08007ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fa04 	bl	80081f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0208 	orr.w	r2, r2, #8
 8007dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0204 	bic.w	r2, r2, #4
 8007e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6999      	ldr	r1, [r3, #24]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	619a      	str	r2, [r3, #24]
      break;
 8007e22:	e062      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fa4a 	bl	80082c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	619a      	str	r2, [r3, #24]
      break;
 8007e64:	e041      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fa93 	bl	8008398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0208 	orr.w	r2, r2, #8
 8007e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0204 	bic.w	r2, r2, #4
 8007e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	61da      	str	r2, [r3, #28]
      break;
 8007ea4:	e021      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fadd 	bl	800846c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69d9      	ldr	r1, [r3, #28]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	021a      	lsls	r2, r3, #8
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	61da      	str	r2, [r3, #28]
      break;
 8007ee6:	e000      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007ee8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIM_ConfigClockSource+0x18>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e0a6      	b.n	800806a <HAL_TIM_ConfigClockSource+0x166>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d067      	beq.n	8008024 <HAL_TIM_ConfigClockSource+0x120>
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d80b      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x6c>
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d073      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d802      	bhi.n	8007f66 <HAL_TIM_ConfigClockSource+0x62>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d06f      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f64:	e078      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d06c      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	d06a      	beq.n	8008044 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f6e:	e073      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f70:	2b70      	cmp	r3, #112	; 0x70
 8007f72:	d00d      	beq.n	8007f90 <HAL_TIM_ConfigClockSource+0x8c>
 8007f74:	2b70      	cmp	r3, #112	; 0x70
 8007f76:	d804      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x7e>
 8007f78:	2b50      	cmp	r3, #80	; 0x50
 8007f7a:	d033      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0xe0>
 8007f7c:	2b60      	cmp	r3, #96	; 0x60
 8007f7e:	d041      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f80:	e06a      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	d066      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x152>
 8007f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8c:	d017      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f8e:	e063      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6899      	ldr	r1, [r3, #8]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f000 fc36 	bl	8008810 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
      break;
 8007fbc:	e04c      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6899      	ldr	r1, [r3, #8]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f000 fc1f 	bl	8008810 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fe0:	609a      	str	r2, [r3, #8]
      break;
 8007fe2:	e039      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f000 fae3 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2150      	movs	r1, #80	; 0x50
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fbed 	bl	80087dc <TIM_ITRx_SetConfig>
      break;
 8008002:	e029      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6859      	ldr	r1, [r3, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	461a      	mov	r2, r3
 8008012:	f000 fb3d 	bl	8008690 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2160      	movs	r1, #96	; 0x60
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fbdd 	bl	80087dc <TIM_ITRx_SetConfig>
      break;
 8008022:	e019      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	6859      	ldr	r1, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	461a      	mov	r2, r3
 8008032:	f000 fac3 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2140      	movs	r1, #64	; 0x40
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fbcd 	bl	80087dc <TIM_ITRx_SetConfig>
      break;
 8008042:	e009      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 fbc4 	bl	80087dc <TIM_ITRx_SetConfig>
      break;
 8008054:	e000      	b.n	8008058 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b0c      	cmp	r3, #12
 8008086:	d831      	bhi.n	80080ec <HAL_TIM_ReadCapturedValue+0x78>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <HAL_TIM_ReadCapturedValue+0x1c>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080ed 	.word	0x080080ed
 8008098:	080080ed 	.word	0x080080ed
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	080080cf 	.word	0x080080cf
 80080a4:	080080ed 	.word	0x080080ed
 80080a8:	080080ed 	.word	0x080080ed
 80080ac:	080080ed 	.word	0x080080ed
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080ed 	.word	0x080080ed
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	080080e3 	.word	0x080080e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ca:	60fb      	str	r3, [r7, #12]

      break;
 80080cc:	e00f      	b.n	80080ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	60fb      	str	r3, [r7, #12]

      break;
 80080d6:	e00a      	b.n	80080ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080de:	60fb      	str	r3, [r7, #12]

      break;
 80080e0:	e005      	b.n	80080ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	60fb      	str	r3, [r7, #12]

      break;
 80080ea:	e000      	b.n	80080ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80080ec:	bf00      	nop
  }

  return tmpreg;
 80080ee:	68fb      	ldr	r3, [r7, #12]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop

080080fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr
	...

08008134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a29      	ldr	r2, [pc, #164]	; (80081ec <TIM_Base_SetConfig+0xb8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_Base_SetConfig+0x30>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008152:	d007      	beq.n	8008164 <TIM_Base_SetConfig+0x30>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <TIM_Base_SetConfig+0xbc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0x30>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <TIM_Base_SetConfig+0xc0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <TIM_Base_SetConfig+0xb8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00b      	beq.n	8008196 <TIM_Base_SetConfig+0x62>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d007      	beq.n	8008196 <TIM_Base_SetConfig+0x62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <TIM_Base_SetConfig+0xbc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_Base_SetConfig+0x62>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <TIM_Base_SetConfig+0xc0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d108      	bne.n	80081a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a07      	ldr	r2, [pc, #28]	; (80081ec <TIM_Base_SetConfig+0xb8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d103      	bne.n	80081dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	615a      	str	r2, [r3, #20]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr
 80081ec:	40012c00 	.word	0x40012c00
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40000800 	.word	0x40000800

080081f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f023 0302 	bic.w	r3, r3, #2
 8008240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <TIM_OC1_SetConfig+0xc8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10c      	bne.n	800826e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0308 	bic.w	r3, r3, #8
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f023 0304 	bic.w	r3, r3, #4
 800826c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <TIM_OC1_SetConfig+0xc8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d111      	bne.n	800829a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800827c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	621a      	str	r2, [r3, #32]
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40012c00 	.word	0x40012c00

080082c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f023 0210 	bic.w	r2, r3, #16
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0320 	bic.w	r3, r3, #32
 800830e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <TIM_OC2_SetConfig+0xd0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d10d      	bne.n	8008340 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800832a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800833e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <TIM_OC2_SetConfig+0xd0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d113      	bne.n	8008370 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800834e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00

08008398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <TIM_OC3_SetConfig+0xd0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d10d      	bne.n	8008412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <TIM_OC3_SetConfig+0xd0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d113      	bne.n	8008442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	4313      	orrs	r3, r2
 8008434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	621a      	str	r2, [r3, #32]
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00

0800846c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	021b      	lsls	r3, r3, #8
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	031b      	lsls	r3, r3, #12
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0f      	ldr	r2, [pc, #60]	; (8008504 <TIM_OC4_SetConfig+0x98>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d109      	bne.n	80084e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	019b      	lsls	r3, r3, #6
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	621a      	str	r2, [r3, #32]
}
 80084fa:	bf00      	nop
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr
 8008504:	40012c00 	.word	0x40012c00

08008508 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <TIM_TI1_SetConfig+0xa8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00b      	beq.n	800854e <TIM_TI1_SetConfig+0x46>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853c:	d007      	beq.n	800854e <TIM_TI1_SetConfig+0x46>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <TIM_TI1_SetConfig+0xac>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_TI1_SetConfig+0x46>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a1b      	ldr	r2, [pc, #108]	; (80085b8 <TIM_TI1_SetConfig+0xb0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d101      	bne.n	8008552 <TIM_TI1_SetConfig+0x4a>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <TIM_TI1_SetConfig+0x4c>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e003      	b.n	8008572 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	b2db      	uxtb	r3, r3
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f023 030a 	bic.w	r3, r3, #10
 800858c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f003 030a 	and.w	r3, r3, #10
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	621a      	str	r2, [r3, #32]
}
 80085a6:	bf00      	nop
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	40012c00 	.word	0x40012c00
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800

080085bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 030a 	bic.w	r3, r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0210 	bic.w	r2, r3, #16
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008656:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	031b      	lsls	r3, r3, #12
 800865c:	b29b      	uxth	r3, r3
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800866a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f023 0210 	bic.w	r2, r3, #16
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	031b      	lsls	r3, r3, #12
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	621a      	str	r2, [r3, #32]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800872a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	b2db      	uxtb	r3, r3
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800873e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008790:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	031b      	lsls	r3, r3, #12
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	031b      	lsls	r3, r3, #12
 80087bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr

080087dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	f043 0307 	orr.w	r3, r3, #7
 80087fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	609a      	str	r2, [r3, #8]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800882a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	021a      	lsls	r2, r3, #8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	431a      	orrs	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4313      	orrs	r3, r2
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	609a      	str	r2, [r3, #8]
}
 8008844:	bf00      	nop
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr

0800884e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800884e:	b480      	push	{r7}
 8008850:	b087      	sub	sp, #28
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1a      	ldr	r2, [r3, #32]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	43db      	mvns	r3, r3
 8008870:	401a      	ands	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	fa01 f303 	lsl.w	r3, r1, r3
 8008886:	431a      	orrs	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	621a      	str	r2, [r3, #32]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr

08008896 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e032      	b.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr

0800891e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr

08008942 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e03f      	b.n	80089d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7fa fd0b 	bl	8003384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2224      	movs	r2, #36	; 0x24
 8008972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008984:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f90c 	bl	8008ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800899a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	695a      	ldr	r2, [r3, #20]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	f040 8083 	bne.w	8008b04 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_UART_Transmit+0x2e>
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e07b      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_UART_Transmit+0x40>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e074      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2221      	movs	r2, #33	; 0x21
 8008a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a32:	f7fa ff79 	bl	8003928 <HAL_GetTick>
 8008a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a44:	e042      	b.n	8008acc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5c:	d122      	bne.n	8008aa4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2200      	movs	r2, #0
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f850 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e046      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a8a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3302      	adds	r3, #2
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	e017      	b.n	8008acc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	e013      	b.n	8008acc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2180      	movs	r1, #128	; 0x80
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f82d 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e023      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	60ba      	str	r2, [r7, #8]
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1b7      	bne.n	8008a46 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2140      	movs	r1, #64	; 0x40
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f814 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e00a      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1e:	e02c      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d028      	beq.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b2e:	f7fa fefb 	bl	8003928 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d21d      	bcs.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0201 	bic.w	r2, r2, #1
 8008b5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e00f      	b.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4013      	ands	r3, r2
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	bf0c      	ite	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	2300      	movne	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	461a      	mov	r2, r3
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d0c3      	beq.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008bde:	f023 030c 	bic.w	r3, r3, #12
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	430b      	orrs	r3, r1
 8008bea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a52      	ldr	r2, [pc, #328]	; (8008d50 <UART_SetConfig+0x1ac>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d14e      	bne.n	8008caa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fe fcd8 	bl	80075c0 <HAL_RCC_GetPCLK2Freq>
 8008c10:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009a      	lsls	r2, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c28:	4a4a      	ldr	r2, [pc, #296]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	0119      	lsls	r1, r3, #4
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009a      	lsls	r2, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	2064      	movs	r0, #100	; 0x64
 8008c52:	fb00 f303 	mul.w	r3, r0, r3
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	3332      	adds	r3, #50	; 0x32
 8008c5c:	4a3d      	ldr	r2, [pc, #244]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c68:	4419      	add	r1, r3
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009a      	lsls	r2, r3, #2
 8008c74:	441a      	add	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c80:	4b34      	ldr	r3, [pc, #208]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008c82:	fba3 0302 	umull	r0, r3, r3, r2
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	2064      	movs	r0, #100	; 0x64
 8008c8a:	fb00 f303 	mul.w	r3, r0, r3
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	3332      	adds	r3, #50	; 0x32
 8008c94:	4a2f      	ldr	r2, [pc, #188]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008c96:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	f003 020f 	and.w	r2, r3, #15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008ca8:	e04d      	b.n	8008d46 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008caa:	f7fe fc75 	bl	8007598 <HAL_RCC_GetPCLK1Freq>
 8008cae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009a      	lsls	r2, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc6:	4a23      	ldr	r2, [pc, #140]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	0119      	lsls	r1, r3, #4
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009a      	lsls	r2, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008ce8:	fba3 0302 	umull	r0, r3, r3, r2
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	2064      	movs	r0, #100	; 0x64
 8008cf0:	fb00 f303 	mul.w	r3, r0, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	3332      	adds	r3, #50	; 0x32
 8008cfa:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	095b      	lsrs	r3, r3, #5
 8008d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d06:	4419      	add	r1, r3
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009a      	lsls	r2, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008d20:	fba3 0302 	umull	r0, r3, r3, r2
 8008d24:	095b      	lsrs	r3, r3, #5
 8008d26:	2064      	movs	r0, #100	; 0x64
 8008d28:	fb00 f303 	mul.w	r3, r0, r3
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	3332      	adds	r3, #50	; 0x32
 8008d32:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <UART_SetConfig+0x1b0>)
 8008d34:	fba2 2303 	umull	r2, r3, r2, r3
 8008d38:	095b      	lsrs	r3, r3, #5
 8008d3a:	f003 020f 	and.w	r2, r3, #15
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	440a      	add	r2, r1
 8008d44:	609a      	str	r2, [r3, #8]
}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40013800 	.word	0x40013800
 8008d54:	51eb851f 	.word	0x51eb851f

08008d58 <__errno>:
 8008d58:	4b01      	ldr	r3, [pc, #4]	; (8008d60 <__errno+0x8>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20000038 	.word	0x20000038

08008d64 <__libc_init_array>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	2500      	movs	r5, #0
 8008d68:	4e0c      	ldr	r6, [pc, #48]	; (8008d9c <__libc_init_array+0x38>)
 8008d6a:	4c0d      	ldr	r4, [pc, #52]	; (8008da0 <__libc_init_array+0x3c>)
 8008d6c:	1ba4      	subs	r4, r4, r6
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	42a5      	cmp	r5, r4
 8008d72:	d109      	bne.n	8008d88 <__libc_init_array+0x24>
 8008d74:	f003 ffc0 	bl	800ccf8 <_init>
 8008d78:	2500      	movs	r5, #0
 8008d7a:	4e0a      	ldr	r6, [pc, #40]	; (8008da4 <__libc_init_array+0x40>)
 8008d7c:	4c0a      	ldr	r4, [pc, #40]	; (8008da8 <__libc_init_array+0x44>)
 8008d7e:	1ba4      	subs	r4, r4, r6
 8008d80:	10a4      	asrs	r4, r4, #2
 8008d82:	42a5      	cmp	r5, r4
 8008d84:	d105      	bne.n	8008d92 <__libc_init_array+0x2e>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d8c:	4798      	blx	r3
 8008d8e:	3501      	adds	r5, #1
 8008d90:	e7ee      	b.n	8008d70 <__libc_init_array+0xc>
 8008d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d96:	4798      	blx	r3
 8008d98:	3501      	adds	r5, #1
 8008d9a:	e7f2      	b.n	8008d82 <__libc_init_array+0x1e>
 8008d9c:	0800d678 	.word	0x0800d678
 8008da0:	0800d678 	.word	0x0800d678
 8008da4:	0800d678 	.word	0x0800d678
 8008da8:	0800d67c 	.word	0x0800d67c

08008dac <memset>:
 8008dac:	4603      	mov	r3, r0
 8008dae:	4402      	add	r2, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <__cvt>:
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc2:	461e      	mov	r6, r3
 8008dc4:	bfbb      	ittet	lt
 8008dc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008dca:	461e      	movlt	r6, r3
 8008dcc:	2300      	movge	r3, #0
 8008dce:	232d      	movlt	r3, #45	; 0x2d
 8008dd0:	b088      	sub	sp, #32
 8008dd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008dd4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008dd8:	f027 0720 	bic.w	r7, r7, #32
 8008ddc:	2f46      	cmp	r7, #70	; 0x46
 8008dde:	4614      	mov	r4, r2
 8008de0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008de2:	700b      	strb	r3, [r1, #0]
 8008de4:	d004      	beq.n	8008df0 <__cvt+0x34>
 8008de6:	2f45      	cmp	r7, #69	; 0x45
 8008de8:	d100      	bne.n	8008dec <__cvt+0x30>
 8008dea:	3501      	adds	r5, #1
 8008dec:	2302      	movs	r3, #2
 8008dee:	e000      	b.n	8008df2 <__cvt+0x36>
 8008df0:	2303      	movs	r3, #3
 8008df2:	aa07      	add	r2, sp, #28
 8008df4:	9204      	str	r2, [sp, #16]
 8008df6:	aa06      	add	r2, sp, #24
 8008df8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dfc:	e9cd 3500 	strd	r3, r5, [sp]
 8008e00:	4622      	mov	r2, r4
 8008e02:	4633      	mov	r3, r6
 8008e04:	f000 fdf4 	bl	80099f0 <_dtoa_r>
 8008e08:	2f47      	cmp	r7, #71	; 0x47
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	d102      	bne.n	8008e14 <__cvt+0x58>
 8008e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e10:	07db      	lsls	r3, r3, #31
 8008e12:	d526      	bpl.n	8008e62 <__cvt+0xa6>
 8008e14:	2f46      	cmp	r7, #70	; 0x46
 8008e16:	eb08 0905 	add.w	r9, r8, r5
 8008e1a:	d111      	bne.n	8008e40 <__cvt+0x84>
 8008e1c:	f898 3000 	ldrb.w	r3, [r8]
 8008e20:	2b30      	cmp	r3, #48	; 0x30
 8008e22:	d10a      	bne.n	8008e3a <__cvt+0x7e>
 8008e24:	2200      	movs	r2, #0
 8008e26:	2300      	movs	r3, #0
 8008e28:	4620      	mov	r0, r4
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	f7f7 fdbc 	bl	80009a8 <__aeabi_dcmpeq>
 8008e30:	b918      	cbnz	r0, 8008e3a <__cvt+0x7e>
 8008e32:	f1c5 0501 	rsb	r5, r5, #1
 8008e36:	f8ca 5000 	str.w	r5, [sl]
 8008e3a:	f8da 3000 	ldr.w	r3, [sl]
 8008e3e:	4499      	add	r9, r3
 8008e40:	2200      	movs	r2, #0
 8008e42:	2300      	movs	r3, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	4631      	mov	r1, r6
 8008e48:	f7f7 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8008e4c:	b938      	cbnz	r0, 8008e5e <__cvt+0xa2>
 8008e4e:	2230      	movs	r2, #48	; 0x30
 8008e50:	9b07      	ldr	r3, [sp, #28]
 8008e52:	454b      	cmp	r3, r9
 8008e54:	d205      	bcs.n	8008e62 <__cvt+0xa6>
 8008e56:	1c59      	adds	r1, r3, #1
 8008e58:	9107      	str	r1, [sp, #28]
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e7f8      	b.n	8008e50 <__cvt+0x94>
 8008e5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e62:	4640      	mov	r0, r8
 8008e64:	9b07      	ldr	r3, [sp, #28]
 8008e66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e68:	eba3 0308 	sub.w	r3, r3, r8
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	b008      	add	sp, #32
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e74 <__exponent>:
 8008e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	bfb4      	ite	lt
 8008e7a:	232d      	movlt	r3, #45	; 0x2d
 8008e7c:	232b      	movge	r3, #43	; 0x2b
 8008e7e:	4604      	mov	r4, r0
 8008e80:	bfb8      	it	lt
 8008e82:	4249      	neglt	r1, r1
 8008e84:	2909      	cmp	r1, #9
 8008e86:	f804 2b02 	strb.w	r2, [r4], #2
 8008e8a:	7043      	strb	r3, [r0, #1]
 8008e8c:	dd21      	ble.n	8008ed2 <__exponent+0x5e>
 8008e8e:	f10d 0307 	add.w	r3, sp, #7
 8008e92:	461f      	mov	r7, r3
 8008e94:	260a      	movs	r6, #10
 8008e96:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e9a:	fb06 1115 	mls	r1, r6, r5, r1
 8008e9e:	2d09      	cmp	r5, #9
 8008ea0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008ea4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ea8:	f103 32ff 	add.w	r2, r3, #4294967295
 8008eac:	4629      	mov	r1, r5
 8008eae:	dc09      	bgt.n	8008ec4 <__exponent+0x50>
 8008eb0:	3130      	adds	r1, #48	; 0x30
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008eb8:	42bb      	cmp	r3, r7
 8008eba:	4622      	mov	r2, r4
 8008ebc:	d304      	bcc.n	8008ec8 <__exponent+0x54>
 8008ebe:	1a10      	subs	r0, r2, r0
 8008ec0:	b003      	add	sp, #12
 8008ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	e7e6      	b.n	8008e96 <__exponent+0x22>
 8008ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ecc:	f804 2b01 	strb.w	r2, [r4], #1
 8008ed0:	e7f2      	b.n	8008eb8 <__exponent+0x44>
 8008ed2:	2330      	movs	r3, #48	; 0x30
 8008ed4:	4419      	add	r1, r3
 8008ed6:	7083      	strb	r3, [r0, #2]
 8008ed8:	1d02      	adds	r2, r0, #4
 8008eda:	70c1      	strb	r1, [r0, #3]
 8008edc:	e7ef      	b.n	8008ebe <__exponent+0x4a>
	...

08008ee0 <_printf_float>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	b091      	sub	sp, #68	; 0x44
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008eea:	4693      	mov	fp, r2
 8008eec:	461e      	mov	r6, r3
 8008eee:	4605      	mov	r5, r0
 8008ef0:	f001 fcac 	bl	800a84c <_localeconv_r>
 8008ef4:	6803      	ldr	r3, [r0, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8008efa:	f7f7 f929 	bl	8000150 <strlen>
 8008efe:	2300      	movs	r3, #0
 8008f00:	930e      	str	r3, [sp, #56]	; 0x38
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	900a      	str	r0, [sp, #40]	; 0x28
 8008f06:	3307      	adds	r3, #7
 8008f08:	f023 0307 	bic.w	r3, r3, #7
 8008f0c:	f103 0208 	add.w	r2, r3, #8
 8008f10:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008f14:	f8d4 a000 	ldr.w	sl, [r4]
 8008f18:	603a      	str	r2, [r7, #0]
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f22:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	4ba6      	ldr	r3, [pc, #664]	; (80091cc <_printf_float+0x2ec>)
 8008f32:	4638      	mov	r0, r7
 8008f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f36:	f7f7 fd69 	bl	8000a0c <__aeabi_dcmpun>
 8008f3a:	bb68      	cbnz	r0, 8008f98 <_printf_float+0xb8>
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f40:	4ba2      	ldr	r3, [pc, #648]	; (80091cc <_printf_float+0x2ec>)
 8008f42:	4638      	mov	r0, r7
 8008f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f46:	f7f7 fd43 	bl	80009d0 <__aeabi_dcmple>
 8008f4a:	bb28      	cbnz	r0, 8008f98 <_printf_float+0xb8>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4638      	mov	r0, r7
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fd32 	bl	80009bc <__aeabi_dcmplt>
 8008f58:	b110      	cbz	r0, 8008f60 <_printf_float+0x80>
 8008f5a:	232d      	movs	r3, #45	; 0x2d
 8008f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f60:	4f9b      	ldr	r7, [pc, #620]	; (80091d0 <_printf_float+0x2f0>)
 8008f62:	4b9c      	ldr	r3, [pc, #624]	; (80091d4 <_printf_float+0x2f4>)
 8008f64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f68:	bf98      	it	ls
 8008f6a:	461f      	movls	r7, r3
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	f04f 0900 	mov.w	r9, #0
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	f02a 0304 	bic.w	r3, sl, #4
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	9600      	str	r6, [sp, #0]
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f80:	4621      	mov	r1, r4
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 f9e2 	bl	800934c <_printf_common>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f040 8090 	bne.w	80090ae <_printf_float+0x1ce>
 8008f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f92:	b011      	add	sp, #68	; 0x44
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	463a      	mov	r2, r7
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 fd34 	bl	8000a0c <__aeabi_dcmpun>
 8008fa4:	b110      	cbz	r0, 8008fac <_printf_float+0xcc>
 8008fa6:	4f8c      	ldr	r7, [pc, #560]	; (80091d8 <_printf_float+0x2f8>)
 8008fa8:	4b8c      	ldr	r3, [pc, #560]	; (80091dc <_printf_float+0x2fc>)
 8008faa:	e7db      	b.n	8008f64 <_printf_float+0x84>
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	a80d      	add	r0, sp, #52	; 0x34
 8008fb6:	a90e      	add	r1, sp, #56	; 0x38
 8008fb8:	d140      	bne.n	800903c <_printf_float+0x15c>
 8008fba:	2306      	movs	r3, #6
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	f04f 0c00 	mov.w	ip, #0
 8008fc2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008fc6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	463a      	mov	r2, r7
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7ff feed 	bl	8008dbc <__cvt>
 8008fe2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008fe6:	2b47      	cmp	r3, #71	; 0x47
 8008fe8:	4607      	mov	r7, r0
 8008fea:	d109      	bne.n	8009000 <_printf_float+0x120>
 8008fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fee:	1cd8      	adds	r0, r3, #3
 8008ff0:	db02      	blt.n	8008ff8 <_printf_float+0x118>
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	dd47      	ble.n	8009088 <_printf_float+0x1a8>
 8008ff8:	f1a8 0802 	sub.w	r8, r8, #2
 8008ffc:	fa5f f888 	uxtb.w	r8, r8
 8009000:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009004:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009006:	d824      	bhi.n	8009052 <_printf_float+0x172>
 8009008:	3901      	subs	r1, #1
 800900a:	4642      	mov	r2, r8
 800900c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009010:	910d      	str	r1, [sp, #52]	; 0x34
 8009012:	f7ff ff2f 	bl	8008e74 <__exponent>
 8009016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009018:	4681      	mov	r9, r0
 800901a:	1813      	adds	r3, r2, r0
 800901c:	2a01      	cmp	r2, #1
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	dc02      	bgt.n	8009028 <_printf_float+0x148>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	07d1      	lsls	r1, r2, #31
 8009026:	d501      	bpl.n	800902c <_printf_float+0x14c>
 8009028:	3301      	adds	r3, #1
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0a2      	beq.n	8008f7a <_printf_float+0x9a>
 8009034:	232d      	movs	r3, #45	; 0x2d
 8009036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800903a:	e79e      	b.n	8008f7a <_printf_float+0x9a>
 800903c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009040:	f000 816e 	beq.w	8009320 <_printf_float+0x440>
 8009044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009048:	d1b9      	bne.n	8008fbe <_printf_float+0xde>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1b7      	bne.n	8008fbe <_printf_float+0xde>
 800904e:	2301      	movs	r3, #1
 8009050:	e7b4      	b.n	8008fbc <_printf_float+0xdc>
 8009052:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009056:	d119      	bne.n	800908c <_printf_float+0x1ac>
 8009058:	2900      	cmp	r1, #0
 800905a:	6863      	ldr	r3, [r4, #4]
 800905c:	dd0c      	ble.n	8009078 <_printf_float+0x198>
 800905e:	6121      	str	r1, [r4, #16]
 8009060:	b913      	cbnz	r3, 8009068 <_printf_float+0x188>
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	07d2      	lsls	r2, r2, #31
 8009066:	d502      	bpl.n	800906e <_printf_float+0x18e>
 8009068:	3301      	adds	r3, #1
 800906a:	440b      	add	r3, r1
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009070:	f04f 0900 	mov.w	r9, #0
 8009074:	65a3      	str	r3, [r4, #88]	; 0x58
 8009076:	e7d9      	b.n	800902c <_printf_float+0x14c>
 8009078:	b913      	cbnz	r3, 8009080 <_printf_float+0x1a0>
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	07d0      	lsls	r0, r2, #31
 800907e:	d501      	bpl.n	8009084 <_printf_float+0x1a4>
 8009080:	3302      	adds	r3, #2
 8009082:	e7f3      	b.n	800906c <_printf_float+0x18c>
 8009084:	2301      	movs	r3, #1
 8009086:	e7f1      	b.n	800906c <_printf_float+0x18c>
 8009088:	f04f 0867 	mov.w	r8, #103	; 0x67
 800908c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009090:	4293      	cmp	r3, r2
 8009092:	db05      	blt.n	80090a0 <_printf_float+0x1c0>
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	07d1      	lsls	r1, r2, #31
 800909a:	d5e8      	bpl.n	800906e <_printf_float+0x18e>
 800909c:	3301      	adds	r3, #1
 800909e:	e7e5      	b.n	800906c <_printf_float+0x18c>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfcc      	ite	gt
 80090a4:	2301      	movgt	r3, #1
 80090a6:	f1c3 0302 	rsble	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	e7de      	b.n	800906c <_printf_float+0x18c>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	055a      	lsls	r2, r3, #21
 80090b2:	d407      	bmi.n	80090c4 <_printf_float+0x1e4>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	463a      	mov	r2, r7
 80090b8:	4659      	mov	r1, fp
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b0      	blx	r6
 80090be:	3001      	adds	r0, #1
 80090c0:	d129      	bne.n	8009116 <_printf_float+0x236>
 80090c2:	e764      	b.n	8008f8e <_printf_float+0xae>
 80090c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80090c8:	f240 80d7 	bls.w	800927a <_printf_float+0x39a>
 80090cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090d0:	2200      	movs	r2, #0
 80090d2:	2300      	movs	r3, #0
 80090d4:	f7f7 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80090d8:	b388      	cbz	r0, 800913e <_printf_float+0x25e>
 80090da:	2301      	movs	r3, #1
 80090dc:	4a40      	ldr	r2, [pc, #256]	; (80091e0 <_printf_float+0x300>)
 80090de:	4659      	mov	r1, fp
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b0      	blx	r6
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f af52 	beq.w	8008f8e <_printf_float+0xae>
 80090ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090ee:	429a      	cmp	r2, r3
 80090f0:	db02      	blt.n	80090f8 <_printf_float+0x218>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	07d8      	lsls	r0, r3, #31
 80090f6:	d50e      	bpl.n	8009116 <_printf_float+0x236>
 80090f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090fc:	4659      	mov	r1, fp
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	3001      	adds	r0, #1
 8009104:	f43f af43 	beq.w	8008f8e <_printf_float+0xae>
 8009108:	2700      	movs	r7, #0
 800910a:	f104 081a 	add.w	r8, r4, #26
 800910e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009110:	3b01      	subs	r3, #1
 8009112:	42bb      	cmp	r3, r7
 8009114:	dc09      	bgt.n	800912a <_printf_float+0x24a>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	079f      	lsls	r7, r3, #30
 800911a:	f100 80fd 	bmi.w	8009318 <_printf_float+0x438>
 800911e:	68e0      	ldr	r0, [r4, #12]
 8009120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009122:	4298      	cmp	r0, r3
 8009124:	bfb8      	it	lt
 8009126:	4618      	movlt	r0, r3
 8009128:	e733      	b.n	8008f92 <_printf_float+0xb2>
 800912a:	2301      	movs	r3, #1
 800912c:	4642      	mov	r2, r8
 800912e:	4659      	mov	r1, fp
 8009130:	4628      	mov	r0, r5
 8009132:	47b0      	blx	r6
 8009134:	3001      	adds	r0, #1
 8009136:	f43f af2a 	beq.w	8008f8e <_printf_float+0xae>
 800913a:	3701      	adds	r7, #1
 800913c:	e7e7      	b.n	800910e <_printf_float+0x22e>
 800913e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc2b      	bgt.n	800919c <_printf_float+0x2bc>
 8009144:	2301      	movs	r3, #1
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <_printf_float+0x300>)
 8009148:	4659      	mov	r1, fp
 800914a:	4628      	mov	r0, r5
 800914c:	47b0      	blx	r6
 800914e:	3001      	adds	r0, #1
 8009150:	f43f af1d 	beq.w	8008f8e <_printf_float+0xae>
 8009154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009156:	b923      	cbnz	r3, 8009162 <_printf_float+0x282>
 8009158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915a:	b913      	cbnz	r3, 8009162 <_printf_float+0x282>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d5d9      	bpl.n	8009116 <_printf_float+0x236>
 8009162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009166:	4659      	mov	r1, fp
 8009168:	4628      	mov	r0, r5
 800916a:	47b0      	blx	r6
 800916c:	3001      	adds	r0, #1
 800916e:	f43f af0e 	beq.w	8008f8e <_printf_float+0xae>
 8009172:	f04f 0800 	mov.w	r8, #0
 8009176:	f104 091a 	add.w	r9, r4, #26
 800917a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800917c:	425b      	negs	r3, r3
 800917e:	4543      	cmp	r3, r8
 8009180:	dc01      	bgt.n	8009186 <_printf_float+0x2a6>
 8009182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009184:	e797      	b.n	80090b6 <_printf_float+0x1d6>
 8009186:	2301      	movs	r3, #1
 8009188:	464a      	mov	r2, r9
 800918a:	4659      	mov	r1, fp
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	3001      	adds	r0, #1
 8009192:	f43f aefc 	beq.w	8008f8e <_printf_float+0xae>
 8009196:	f108 0801 	add.w	r8, r8, #1
 800919a:	e7ee      	b.n	800917a <_printf_float+0x29a>
 800919c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800919e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091a0:	429a      	cmp	r2, r3
 80091a2:	bfa8      	it	ge
 80091a4:	461a      	movge	r2, r3
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	4690      	mov	r8, r2
 80091aa:	dd07      	ble.n	80091bc <_printf_float+0x2dc>
 80091ac:	4613      	mov	r3, r2
 80091ae:	4659      	mov	r1, fp
 80091b0:	463a      	mov	r2, r7
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b0      	blx	r6
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f aee9 	beq.w	8008f8e <_printf_float+0xae>
 80091bc:	f104 031a 	add.w	r3, r4, #26
 80091c0:	f04f 0a00 	mov.w	sl, #0
 80091c4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80091c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ca:	e015      	b.n	80091f8 <_printf_float+0x318>
 80091cc:	7fefffff 	.word	0x7fefffff
 80091d0:	0800d188 	.word	0x0800d188
 80091d4:	0800d184 	.word	0x0800d184
 80091d8:	0800d190 	.word	0x0800d190
 80091dc:	0800d18c 	.word	0x0800d18c
 80091e0:	0800d194 	.word	0x0800d194
 80091e4:	2301      	movs	r3, #1
 80091e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091e8:	4659      	mov	r1, fp
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b0      	blx	r6
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f aecd 	beq.w	8008f8e <_printf_float+0xae>
 80091f4:	f10a 0a01 	add.w	sl, sl, #1
 80091f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80091fc:	eba9 0308 	sub.w	r3, r9, r8
 8009200:	4553      	cmp	r3, sl
 8009202:	dcef      	bgt.n	80091e4 <_printf_float+0x304>
 8009204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009208:	429a      	cmp	r2, r3
 800920a:	444f      	add	r7, r9
 800920c:	db14      	blt.n	8009238 <_printf_float+0x358>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	07da      	lsls	r2, r3, #31
 8009212:	d411      	bmi.n	8009238 <_printf_float+0x358>
 8009214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009216:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009218:	eba3 0209 	sub.w	r2, r3, r9
 800921c:	eba3 0901 	sub.w	r9, r3, r1
 8009220:	4591      	cmp	r9, r2
 8009222:	bfa8      	it	ge
 8009224:	4691      	movge	r9, r2
 8009226:	f1b9 0f00 	cmp.w	r9, #0
 800922a:	dc0d      	bgt.n	8009248 <_printf_float+0x368>
 800922c:	2700      	movs	r7, #0
 800922e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009232:	f104 081a 	add.w	r8, r4, #26
 8009236:	e018      	b.n	800926a <_printf_float+0x38a>
 8009238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800923c:	4659      	mov	r1, fp
 800923e:	4628      	mov	r0, r5
 8009240:	47b0      	blx	r6
 8009242:	3001      	adds	r0, #1
 8009244:	d1e6      	bne.n	8009214 <_printf_float+0x334>
 8009246:	e6a2      	b.n	8008f8e <_printf_float+0xae>
 8009248:	464b      	mov	r3, r9
 800924a:	463a      	mov	r2, r7
 800924c:	4659      	mov	r1, fp
 800924e:	4628      	mov	r0, r5
 8009250:	47b0      	blx	r6
 8009252:	3001      	adds	r0, #1
 8009254:	d1ea      	bne.n	800922c <_printf_float+0x34c>
 8009256:	e69a      	b.n	8008f8e <_printf_float+0xae>
 8009258:	2301      	movs	r3, #1
 800925a:	4642      	mov	r2, r8
 800925c:	4659      	mov	r1, fp
 800925e:	4628      	mov	r0, r5
 8009260:	47b0      	blx	r6
 8009262:	3001      	adds	r0, #1
 8009264:	f43f ae93 	beq.w	8008f8e <_printf_float+0xae>
 8009268:	3701      	adds	r7, #1
 800926a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	eba3 0309 	sub.w	r3, r3, r9
 8009274:	42bb      	cmp	r3, r7
 8009276:	dcef      	bgt.n	8009258 <_printf_float+0x378>
 8009278:	e74d      	b.n	8009116 <_printf_float+0x236>
 800927a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800927c:	2a01      	cmp	r2, #1
 800927e:	dc01      	bgt.n	8009284 <_printf_float+0x3a4>
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d538      	bpl.n	80092f6 <_printf_float+0x416>
 8009284:	2301      	movs	r3, #1
 8009286:	463a      	mov	r2, r7
 8009288:	4659      	mov	r1, fp
 800928a:	4628      	mov	r0, r5
 800928c:	47b0      	blx	r6
 800928e:	3001      	adds	r0, #1
 8009290:	f43f ae7d 	beq.w	8008f8e <_printf_float+0xae>
 8009294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009298:	4659      	mov	r1, fp
 800929a:	4628      	mov	r0, r5
 800929c:	47b0      	blx	r6
 800929e:	3001      	adds	r0, #1
 80092a0:	f107 0701 	add.w	r7, r7, #1
 80092a4:	f43f ae73 	beq.w	8008f8e <_printf_float+0xae>
 80092a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ae:	2200      	movs	r2, #0
 80092b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80092b4:	2300      	movs	r3, #0
 80092b6:	f7f7 fb77 	bl	80009a8 <__aeabi_dcmpeq>
 80092ba:	b9c0      	cbnz	r0, 80092ee <_printf_float+0x40e>
 80092bc:	4643      	mov	r3, r8
 80092be:	463a      	mov	r2, r7
 80092c0:	4659      	mov	r1, fp
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b0      	blx	r6
 80092c6:	3001      	adds	r0, #1
 80092c8:	d10d      	bne.n	80092e6 <_printf_float+0x406>
 80092ca:	e660      	b.n	8008f8e <_printf_float+0xae>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4642      	mov	r2, r8
 80092d0:	4659      	mov	r1, fp
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b0      	blx	r6
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f ae59 	beq.w	8008f8e <_printf_float+0xae>
 80092dc:	3701      	adds	r7, #1
 80092de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e0:	3b01      	subs	r3, #1
 80092e2:	42bb      	cmp	r3, r7
 80092e4:	dcf2      	bgt.n	80092cc <_printf_float+0x3ec>
 80092e6:	464b      	mov	r3, r9
 80092e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092ec:	e6e4      	b.n	80090b8 <_printf_float+0x1d8>
 80092ee:	2700      	movs	r7, #0
 80092f0:	f104 081a 	add.w	r8, r4, #26
 80092f4:	e7f3      	b.n	80092de <_printf_float+0x3fe>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7e1      	b.n	80092be <_printf_float+0x3de>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4642      	mov	r2, r8
 80092fe:	4659      	mov	r1, fp
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	3001      	adds	r0, #1
 8009306:	f43f ae42 	beq.w	8008f8e <_printf_float+0xae>
 800930a:	3701      	adds	r7, #1
 800930c:	68e3      	ldr	r3, [r4, #12]
 800930e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	42bb      	cmp	r3, r7
 8009314:	dcf1      	bgt.n	80092fa <_printf_float+0x41a>
 8009316:	e702      	b.n	800911e <_printf_float+0x23e>
 8009318:	2700      	movs	r7, #0
 800931a:	f104 0819 	add.w	r8, r4, #25
 800931e:	e7f5      	b.n	800930c <_printf_float+0x42c>
 8009320:	2b00      	cmp	r3, #0
 8009322:	f43f ae94 	beq.w	800904e <_printf_float+0x16e>
 8009326:	f04f 0c00 	mov.w	ip, #0
 800932a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800932e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009338:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	463a      	mov	r2, r7
 8009340:	464b      	mov	r3, r9
 8009342:	4628      	mov	r0, r5
 8009344:	f7ff fd3a 	bl	8008dbc <__cvt>
 8009348:	4607      	mov	r7, r0
 800934a:	e64f      	b.n	8008fec <_printf_float+0x10c>

0800934c <_printf_common>:
 800934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	4691      	mov	r9, r2
 8009352:	461f      	mov	r7, r3
 8009354:	688a      	ldr	r2, [r1, #8]
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	4606      	mov	r6, r0
 800935a:	4293      	cmp	r3, r2
 800935c:	bfb8      	it	lt
 800935e:	4613      	movlt	r3, r2
 8009360:	f8c9 3000 	str.w	r3, [r9]
 8009364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009368:	460c      	mov	r4, r1
 800936a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800936e:	b112      	cbz	r2, 8009376 <_printf_common+0x2a>
 8009370:	3301      	adds	r3, #1
 8009372:	f8c9 3000 	str.w	r3, [r9]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	0699      	lsls	r1, r3, #26
 800937a:	bf42      	ittt	mi
 800937c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009380:	3302      	addmi	r3, #2
 8009382:	f8c9 3000 	strmi.w	r3, [r9]
 8009386:	6825      	ldr	r5, [r4, #0]
 8009388:	f015 0506 	ands.w	r5, r5, #6
 800938c:	d107      	bne.n	800939e <_printf_common+0x52>
 800938e:	f104 0a19 	add.w	sl, r4, #25
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	f8d9 2000 	ldr.w	r2, [r9]
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	42ab      	cmp	r3, r5
 800939c:	dc29      	bgt.n	80093f2 <_printf_common+0xa6>
 800939e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	3300      	adds	r3, #0
 80093a6:	bf18      	it	ne
 80093a8:	2301      	movne	r3, #1
 80093aa:	0692      	lsls	r2, r2, #26
 80093ac:	d42e      	bmi.n	800940c <_printf_common+0xc0>
 80093ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093b2:	4639      	mov	r1, r7
 80093b4:	4630      	mov	r0, r6
 80093b6:	47c0      	blx	r8
 80093b8:	3001      	adds	r0, #1
 80093ba:	d021      	beq.n	8009400 <_printf_common+0xb4>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	68e5      	ldr	r5, [r4, #12]
 80093c0:	f003 0306 	and.w	r3, r3, #6
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	bf18      	it	ne
 80093c8:	2500      	movne	r5, #0
 80093ca:	f8d9 2000 	ldr.w	r2, [r9]
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	bf08      	it	eq
 80093d4:	1aad      	subeq	r5, r5, r2
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	bf08      	it	eq
 80093dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bfc4      	itt	gt
 80093e4:	1a9b      	subgt	r3, r3, r2
 80093e6:	18ed      	addgt	r5, r5, r3
 80093e8:	341a      	adds	r4, #26
 80093ea:	454d      	cmp	r5, r9
 80093ec:	d11a      	bne.n	8009424 <_printf_common+0xd8>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e008      	b.n	8009404 <_printf_common+0xb8>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4652      	mov	r2, sl
 80093f6:	4639      	mov	r1, r7
 80093f8:	4630      	mov	r0, r6
 80093fa:	47c0      	blx	r8
 80093fc:	3001      	adds	r0, #1
 80093fe:	d103      	bne.n	8009408 <_printf_common+0xbc>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009408:	3501      	adds	r5, #1
 800940a:	e7c2      	b.n	8009392 <_printf_common+0x46>
 800940c:	2030      	movs	r0, #48	; 0x30
 800940e:	18e1      	adds	r1, r4, r3
 8009410:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800941a:	4422      	add	r2, r4
 800941c:	3302      	adds	r3, #2
 800941e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009422:	e7c4      	b.n	80093ae <_printf_common+0x62>
 8009424:	2301      	movs	r3, #1
 8009426:	4622      	mov	r2, r4
 8009428:	4639      	mov	r1, r7
 800942a:	4630      	mov	r0, r6
 800942c:	47c0      	blx	r8
 800942e:	3001      	adds	r0, #1
 8009430:	d0e6      	beq.n	8009400 <_printf_common+0xb4>
 8009432:	f109 0901 	add.w	r9, r9, #1
 8009436:	e7d8      	b.n	80093ea <_printf_common+0x9e>

08009438 <_printf_i>:
 8009438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800943c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009440:	460c      	mov	r4, r1
 8009442:	7e09      	ldrb	r1, [r1, #24]
 8009444:	b085      	sub	sp, #20
 8009446:	296e      	cmp	r1, #110	; 0x6e
 8009448:	4617      	mov	r7, r2
 800944a:	4606      	mov	r6, r0
 800944c:	4698      	mov	r8, r3
 800944e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009450:	f000 80b3 	beq.w	80095ba <_printf_i+0x182>
 8009454:	d822      	bhi.n	800949c <_printf_i+0x64>
 8009456:	2963      	cmp	r1, #99	; 0x63
 8009458:	d036      	beq.n	80094c8 <_printf_i+0x90>
 800945a:	d80a      	bhi.n	8009472 <_printf_i+0x3a>
 800945c:	2900      	cmp	r1, #0
 800945e:	f000 80b9 	beq.w	80095d4 <_printf_i+0x19c>
 8009462:	2958      	cmp	r1, #88	; 0x58
 8009464:	f000 8083 	beq.w	800956e <_printf_i+0x136>
 8009468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800946c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009470:	e032      	b.n	80094d8 <_printf_i+0xa0>
 8009472:	2964      	cmp	r1, #100	; 0x64
 8009474:	d001      	beq.n	800947a <_printf_i+0x42>
 8009476:	2969      	cmp	r1, #105	; 0x69
 8009478:	d1f6      	bne.n	8009468 <_printf_i+0x30>
 800947a:	6820      	ldr	r0, [r4, #0]
 800947c:	6813      	ldr	r3, [r2, #0]
 800947e:	0605      	lsls	r5, r0, #24
 8009480:	f103 0104 	add.w	r1, r3, #4
 8009484:	d52a      	bpl.n	80094dc <_printf_i+0xa4>
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da03      	bge.n	8009496 <_printf_i+0x5e>
 800948e:	222d      	movs	r2, #45	; 0x2d
 8009490:	425b      	negs	r3, r3
 8009492:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009496:	486f      	ldr	r0, [pc, #444]	; (8009654 <_printf_i+0x21c>)
 8009498:	220a      	movs	r2, #10
 800949a:	e039      	b.n	8009510 <_printf_i+0xd8>
 800949c:	2973      	cmp	r1, #115	; 0x73
 800949e:	f000 809d 	beq.w	80095dc <_printf_i+0x1a4>
 80094a2:	d808      	bhi.n	80094b6 <_printf_i+0x7e>
 80094a4:	296f      	cmp	r1, #111	; 0x6f
 80094a6:	d020      	beq.n	80094ea <_printf_i+0xb2>
 80094a8:	2970      	cmp	r1, #112	; 0x70
 80094aa:	d1dd      	bne.n	8009468 <_printf_i+0x30>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	f043 0320 	orr.w	r3, r3, #32
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	e003      	b.n	80094be <_printf_i+0x86>
 80094b6:	2975      	cmp	r1, #117	; 0x75
 80094b8:	d017      	beq.n	80094ea <_printf_i+0xb2>
 80094ba:	2978      	cmp	r1, #120	; 0x78
 80094bc:	d1d4      	bne.n	8009468 <_printf_i+0x30>
 80094be:	2378      	movs	r3, #120	; 0x78
 80094c0:	4865      	ldr	r0, [pc, #404]	; (8009658 <_printf_i+0x220>)
 80094c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c6:	e055      	b.n	8009574 <_printf_i+0x13c>
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ce:	1d19      	adds	r1, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6011      	str	r1, [r2, #0]
 80094d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094d8:	2301      	movs	r3, #1
 80094da:	e08c      	b.n	80095f6 <_printf_i+0x1be>
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094e2:	6011      	str	r1, [r2, #0]
 80094e4:	bf18      	it	ne
 80094e6:	b21b      	sxthne	r3, r3
 80094e8:	e7cf      	b.n	800948a <_printf_i+0x52>
 80094ea:	6813      	ldr	r3, [r2, #0]
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1d18      	adds	r0, r3, #4
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	0628      	lsls	r0, r5, #24
 80094f4:	d501      	bpl.n	80094fa <_printf_i+0xc2>
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	e002      	b.n	8009500 <_printf_i+0xc8>
 80094fa:	0668      	lsls	r0, r5, #25
 80094fc:	d5fb      	bpl.n	80094f6 <_printf_i+0xbe>
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	296f      	cmp	r1, #111	; 0x6f
 8009502:	bf14      	ite	ne
 8009504:	220a      	movne	r2, #10
 8009506:	2208      	moveq	r2, #8
 8009508:	4852      	ldr	r0, [pc, #328]	; (8009654 <_printf_i+0x21c>)
 800950a:	2100      	movs	r1, #0
 800950c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009510:	6865      	ldr	r5, [r4, #4]
 8009512:	2d00      	cmp	r5, #0
 8009514:	60a5      	str	r5, [r4, #8]
 8009516:	f2c0 8095 	blt.w	8009644 <_printf_i+0x20c>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	f021 0104 	bic.w	r1, r1, #4
 8009520:	6021      	str	r1, [r4, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d13d      	bne.n	80095a2 <_printf_i+0x16a>
 8009526:	2d00      	cmp	r5, #0
 8009528:	f040 808e 	bne.w	8009648 <_printf_i+0x210>
 800952c:	4665      	mov	r5, ip
 800952e:	2a08      	cmp	r2, #8
 8009530:	d10b      	bne.n	800954a <_printf_i+0x112>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	07db      	lsls	r3, r3, #31
 8009536:	d508      	bpl.n	800954a <_printf_i+0x112>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6862      	ldr	r2, [r4, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	bfde      	ittt	le
 8009540:	2330      	movle	r3, #48	; 0x30
 8009542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009546:	f105 35ff 	addle.w	r5, r5, #4294967295
 800954a:	ebac 0305 	sub.w	r3, ip, r5
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	f8cd 8000 	str.w	r8, [sp]
 8009554:	463b      	mov	r3, r7
 8009556:	aa03      	add	r2, sp, #12
 8009558:	4621      	mov	r1, r4
 800955a:	4630      	mov	r0, r6
 800955c:	f7ff fef6 	bl	800934c <_printf_common>
 8009560:	3001      	adds	r0, #1
 8009562:	d14d      	bne.n	8009600 <_printf_i+0x1c8>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	b005      	add	sp, #20
 800956a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800956e:	4839      	ldr	r0, [pc, #228]	; (8009654 <_printf_i+0x21c>)
 8009570:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009574:	6813      	ldr	r3, [r2, #0]
 8009576:	6821      	ldr	r1, [r4, #0]
 8009578:	1d1d      	adds	r5, r3, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6015      	str	r5, [r2, #0]
 800957e:	060a      	lsls	r2, r1, #24
 8009580:	d50b      	bpl.n	800959a <_printf_i+0x162>
 8009582:	07ca      	lsls	r2, r1, #31
 8009584:	bf44      	itt	mi
 8009586:	f041 0120 	orrmi.w	r1, r1, #32
 800958a:	6021      	strmi	r1, [r4, #0]
 800958c:	b91b      	cbnz	r3, 8009596 <_printf_i+0x15e>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	f022 0220 	bic.w	r2, r2, #32
 8009594:	6022      	str	r2, [r4, #0]
 8009596:	2210      	movs	r2, #16
 8009598:	e7b7      	b.n	800950a <_printf_i+0xd2>
 800959a:	064d      	lsls	r5, r1, #25
 800959c:	bf48      	it	mi
 800959e:	b29b      	uxthmi	r3, r3
 80095a0:	e7ef      	b.n	8009582 <_printf_i+0x14a>
 80095a2:	4665      	mov	r5, ip
 80095a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a8:	fb02 3311 	mls	r3, r2, r1, r3
 80095ac:	5cc3      	ldrb	r3, [r0, r3]
 80095ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095b2:	460b      	mov	r3, r1
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d1f5      	bne.n	80095a4 <_printf_i+0x16c>
 80095b8:	e7b9      	b.n	800952e <_printf_i+0xf6>
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	6825      	ldr	r5, [r4, #0]
 80095be:	1d18      	adds	r0, r3, #4
 80095c0:	6961      	ldr	r1, [r4, #20]
 80095c2:	6010      	str	r0, [r2, #0]
 80095c4:	0628      	lsls	r0, r5, #24
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	d501      	bpl.n	80095ce <_printf_i+0x196>
 80095ca:	6019      	str	r1, [r3, #0]
 80095cc:	e002      	b.n	80095d4 <_printf_i+0x19c>
 80095ce:	066a      	lsls	r2, r5, #25
 80095d0:	d5fb      	bpl.n	80095ca <_printf_i+0x192>
 80095d2:	8019      	strh	r1, [r3, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	4665      	mov	r5, ip
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	e7b9      	b.n	8009550 <_printf_i+0x118>
 80095dc:	6813      	ldr	r3, [r2, #0]
 80095de:	1d19      	adds	r1, r3, #4
 80095e0:	6011      	str	r1, [r2, #0]
 80095e2:	681d      	ldr	r5, [r3, #0]
 80095e4:	6862      	ldr	r2, [r4, #4]
 80095e6:	2100      	movs	r1, #0
 80095e8:	4628      	mov	r0, r5
 80095ea:	f001 f9a9 	bl	800a940 <memchr>
 80095ee:	b108      	cbz	r0, 80095f4 <_printf_i+0x1bc>
 80095f0:	1b40      	subs	r0, r0, r5
 80095f2:	6060      	str	r0, [r4, #4]
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	2300      	movs	r3, #0
 80095fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fe:	e7a7      	b.n	8009550 <_printf_i+0x118>
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	462a      	mov	r2, r5
 8009604:	4639      	mov	r1, r7
 8009606:	4630      	mov	r0, r6
 8009608:	47c0      	blx	r8
 800960a:	3001      	adds	r0, #1
 800960c:	d0aa      	beq.n	8009564 <_printf_i+0x12c>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	079b      	lsls	r3, r3, #30
 8009612:	d413      	bmi.n	800963c <_printf_i+0x204>
 8009614:	68e0      	ldr	r0, [r4, #12]
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	4298      	cmp	r0, r3
 800961a:	bfb8      	it	lt
 800961c:	4618      	movlt	r0, r3
 800961e:	e7a3      	b.n	8009568 <_printf_i+0x130>
 8009620:	2301      	movs	r3, #1
 8009622:	464a      	mov	r2, r9
 8009624:	4639      	mov	r1, r7
 8009626:	4630      	mov	r0, r6
 8009628:	47c0      	blx	r8
 800962a:	3001      	adds	r0, #1
 800962c:	d09a      	beq.n	8009564 <_printf_i+0x12c>
 800962e:	3501      	adds	r5, #1
 8009630:	68e3      	ldr	r3, [r4, #12]
 8009632:	9a03      	ldr	r2, [sp, #12]
 8009634:	1a9b      	subs	r3, r3, r2
 8009636:	42ab      	cmp	r3, r5
 8009638:	dcf2      	bgt.n	8009620 <_printf_i+0x1e8>
 800963a:	e7eb      	b.n	8009614 <_printf_i+0x1dc>
 800963c:	2500      	movs	r5, #0
 800963e:	f104 0919 	add.w	r9, r4, #25
 8009642:	e7f5      	b.n	8009630 <_printf_i+0x1f8>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1ac      	bne.n	80095a2 <_printf_i+0x16a>
 8009648:	7803      	ldrb	r3, [r0, #0]
 800964a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800964e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009652:	e76c      	b.n	800952e <_printf_i+0xf6>
 8009654:	0800d196 	.word	0x0800d196
 8009658:	0800d1a7 	.word	0x0800d1a7

0800965c <iprintf>:
 800965c:	b40f      	push	{r0, r1, r2, r3}
 800965e:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <iprintf+0x2c>)
 8009660:	b513      	push	{r0, r1, r4, lr}
 8009662:	681c      	ldr	r4, [r3, #0]
 8009664:	b124      	cbz	r4, 8009670 <iprintf+0x14>
 8009666:	69a3      	ldr	r3, [r4, #24]
 8009668:	b913      	cbnz	r3, 8009670 <iprintf+0x14>
 800966a:	4620      	mov	r0, r4
 800966c:	f001 f864 	bl	800a738 <__sinit>
 8009670:	ab05      	add	r3, sp, #20
 8009672:	9a04      	ldr	r2, [sp, #16]
 8009674:	68a1      	ldr	r1, [r4, #8]
 8009676:	4620      	mov	r0, r4
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	f001 fd33 	bl	800b0e4 <_vfiprintf_r>
 800967e:	b002      	add	sp, #8
 8009680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009684:	b004      	add	sp, #16
 8009686:	4770      	bx	lr
 8009688:	20000038 	.word	0x20000038

0800968c <_puts_r>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	460e      	mov	r6, r1
 8009690:	4605      	mov	r5, r0
 8009692:	b118      	cbz	r0, 800969c <_puts_r+0x10>
 8009694:	6983      	ldr	r3, [r0, #24]
 8009696:	b90b      	cbnz	r3, 800969c <_puts_r+0x10>
 8009698:	f001 f84e 	bl	800a738 <__sinit>
 800969c:	69ab      	ldr	r3, [r5, #24]
 800969e:	68ac      	ldr	r4, [r5, #8]
 80096a0:	b913      	cbnz	r3, 80096a8 <_puts_r+0x1c>
 80096a2:	4628      	mov	r0, r5
 80096a4:	f001 f848 	bl	800a738 <__sinit>
 80096a8:	4b23      	ldr	r3, [pc, #140]	; (8009738 <_puts_r+0xac>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d117      	bne.n	80096de <_puts_r+0x52>
 80096ae:	686c      	ldr	r4, [r5, #4]
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	071b      	lsls	r3, r3, #28
 80096b4:	d51d      	bpl.n	80096f2 <_puts_r+0x66>
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	b1db      	cbz	r3, 80096f2 <_puts_r+0x66>
 80096ba:	3e01      	subs	r6, #1
 80096bc:	68a3      	ldr	r3, [r4, #8]
 80096be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096c2:	3b01      	subs	r3, #1
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	b9e9      	cbnz	r1, 8009704 <_puts_r+0x78>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da2e      	bge.n	800972a <_puts_r+0x9e>
 80096cc:	4622      	mov	r2, r4
 80096ce:	210a      	movs	r1, #10
 80096d0:	4628      	mov	r0, r5
 80096d2:	f000 f83f 	bl	8009754 <__swbuf_r>
 80096d6:	3001      	adds	r0, #1
 80096d8:	d011      	beq.n	80096fe <_puts_r+0x72>
 80096da:	200a      	movs	r0, #10
 80096dc:	e011      	b.n	8009702 <_puts_r+0x76>
 80096de:	4b17      	ldr	r3, [pc, #92]	; (800973c <_puts_r+0xb0>)
 80096e0:	429c      	cmp	r4, r3
 80096e2:	d101      	bne.n	80096e8 <_puts_r+0x5c>
 80096e4:	68ac      	ldr	r4, [r5, #8]
 80096e6:	e7e3      	b.n	80096b0 <_puts_r+0x24>
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <_puts_r+0xb4>)
 80096ea:	429c      	cmp	r4, r3
 80096ec:	bf08      	it	eq
 80096ee:	68ec      	ldreq	r4, [r5, #12]
 80096f0:	e7de      	b.n	80096b0 <_puts_r+0x24>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 f87f 	bl	80097f8 <__swsetup_r>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0dd      	beq.n	80096ba <_puts_r+0x2e>
 80096fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	2b00      	cmp	r3, #0
 8009706:	da04      	bge.n	8009712 <_puts_r+0x86>
 8009708:	69a2      	ldr	r2, [r4, #24]
 800970a:	429a      	cmp	r2, r3
 800970c:	dc06      	bgt.n	800971c <_puts_r+0x90>
 800970e:	290a      	cmp	r1, #10
 8009710:	d004      	beq.n	800971c <_puts_r+0x90>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	6022      	str	r2, [r4, #0]
 8009718:	7019      	strb	r1, [r3, #0]
 800971a:	e7cf      	b.n	80096bc <_puts_r+0x30>
 800971c:	4622      	mov	r2, r4
 800971e:	4628      	mov	r0, r5
 8009720:	f000 f818 	bl	8009754 <__swbuf_r>
 8009724:	3001      	adds	r0, #1
 8009726:	d1c9      	bne.n	80096bc <_puts_r+0x30>
 8009728:	e7e9      	b.n	80096fe <_puts_r+0x72>
 800972a:	200a      	movs	r0, #10
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	7018      	strb	r0, [r3, #0]
 8009734:	e7e5      	b.n	8009702 <_puts_r+0x76>
 8009736:	bf00      	nop
 8009738:	0800d1e8 	.word	0x0800d1e8
 800973c:	0800d208 	.word	0x0800d208
 8009740:	0800d1c8 	.word	0x0800d1c8

08009744 <puts>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <puts+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f7ff bf9f 	b.w	800968c <_puts_r>
 800974e:	bf00      	nop
 8009750:	20000038 	.word	0x20000038

08009754 <__swbuf_r>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	460e      	mov	r6, r1
 8009758:	4614      	mov	r4, r2
 800975a:	4605      	mov	r5, r0
 800975c:	b118      	cbz	r0, 8009766 <__swbuf_r+0x12>
 800975e:	6983      	ldr	r3, [r0, #24]
 8009760:	b90b      	cbnz	r3, 8009766 <__swbuf_r+0x12>
 8009762:	f000 ffe9 	bl	800a738 <__sinit>
 8009766:	4b21      	ldr	r3, [pc, #132]	; (80097ec <__swbuf_r+0x98>)
 8009768:	429c      	cmp	r4, r3
 800976a:	d12a      	bne.n	80097c2 <__swbuf_r+0x6e>
 800976c:	686c      	ldr	r4, [r5, #4]
 800976e:	69a3      	ldr	r3, [r4, #24]
 8009770:	60a3      	str	r3, [r4, #8]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	071a      	lsls	r2, r3, #28
 8009776:	d52e      	bpl.n	80097d6 <__swbuf_r+0x82>
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	b363      	cbz	r3, 80097d6 <__swbuf_r+0x82>
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	6820      	ldr	r0, [r4, #0]
 8009780:	b2f6      	uxtb	r6, r6
 8009782:	1ac0      	subs	r0, r0, r3
 8009784:	6963      	ldr	r3, [r4, #20]
 8009786:	4637      	mov	r7, r6
 8009788:	4283      	cmp	r3, r0
 800978a:	dc04      	bgt.n	8009796 <__swbuf_r+0x42>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 ff68 	bl	800a664 <_fflush_r>
 8009794:	bb28      	cbnz	r0, 80097e2 <__swbuf_r+0x8e>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	3001      	adds	r0, #1
 800979a:	3b01      	subs	r3, #1
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	6022      	str	r2, [r4, #0]
 80097a4:	701e      	strb	r6, [r3, #0]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d004      	beq.n	80097b6 <__swbuf_r+0x62>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	07db      	lsls	r3, r3, #31
 80097b0:	d519      	bpl.n	80097e6 <__swbuf_r+0x92>
 80097b2:	2e0a      	cmp	r6, #10
 80097b4:	d117      	bne.n	80097e6 <__swbuf_r+0x92>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 ff53 	bl	800a664 <_fflush_r>
 80097be:	b190      	cbz	r0, 80097e6 <__swbuf_r+0x92>
 80097c0:	e00f      	b.n	80097e2 <__swbuf_r+0x8e>
 80097c2:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <__swbuf_r+0x9c>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	d101      	bne.n	80097cc <__swbuf_r+0x78>
 80097c8:	68ac      	ldr	r4, [r5, #8]
 80097ca:	e7d0      	b.n	800976e <__swbuf_r+0x1a>
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <__swbuf_r+0xa0>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	bf08      	it	eq
 80097d2:	68ec      	ldreq	r4, [r5, #12]
 80097d4:	e7cb      	b.n	800976e <__swbuf_r+0x1a>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 f80d 	bl	80097f8 <__swsetup_r>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0cc      	beq.n	800977c <__swbuf_r+0x28>
 80097e2:	f04f 37ff 	mov.w	r7, #4294967295
 80097e6:	4638      	mov	r0, r7
 80097e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ea:	bf00      	nop
 80097ec:	0800d1e8 	.word	0x0800d1e8
 80097f0:	0800d208 	.word	0x0800d208
 80097f4:	0800d1c8 	.word	0x0800d1c8

080097f8 <__swsetup_r>:
 80097f8:	4b32      	ldr	r3, [pc, #200]	; (80098c4 <__swsetup_r+0xcc>)
 80097fa:	b570      	push	{r4, r5, r6, lr}
 80097fc:	681d      	ldr	r5, [r3, #0]
 80097fe:	4606      	mov	r6, r0
 8009800:	460c      	mov	r4, r1
 8009802:	b125      	cbz	r5, 800980e <__swsetup_r+0x16>
 8009804:	69ab      	ldr	r3, [r5, #24]
 8009806:	b913      	cbnz	r3, 800980e <__swsetup_r+0x16>
 8009808:	4628      	mov	r0, r5
 800980a:	f000 ff95 	bl	800a738 <__sinit>
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <__swsetup_r+0xd0>)
 8009810:	429c      	cmp	r4, r3
 8009812:	d10f      	bne.n	8009834 <__swsetup_r+0x3c>
 8009814:	686c      	ldr	r4, [r5, #4]
 8009816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981a:	b29a      	uxth	r2, r3
 800981c:	0715      	lsls	r5, r2, #28
 800981e:	d42c      	bmi.n	800987a <__swsetup_r+0x82>
 8009820:	06d0      	lsls	r0, r2, #27
 8009822:	d411      	bmi.n	8009848 <__swsetup_r+0x50>
 8009824:	2209      	movs	r2, #9
 8009826:	6032      	str	r2, [r6, #0]
 8009828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e03e      	b.n	80098b2 <__swsetup_r+0xba>
 8009834:	4b25      	ldr	r3, [pc, #148]	; (80098cc <__swsetup_r+0xd4>)
 8009836:	429c      	cmp	r4, r3
 8009838:	d101      	bne.n	800983e <__swsetup_r+0x46>
 800983a:	68ac      	ldr	r4, [r5, #8]
 800983c:	e7eb      	b.n	8009816 <__swsetup_r+0x1e>
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <__swsetup_r+0xd8>)
 8009840:	429c      	cmp	r4, r3
 8009842:	bf08      	it	eq
 8009844:	68ec      	ldreq	r4, [r5, #12]
 8009846:	e7e6      	b.n	8009816 <__swsetup_r+0x1e>
 8009848:	0751      	lsls	r1, r2, #29
 800984a:	d512      	bpl.n	8009872 <__swsetup_r+0x7a>
 800984c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800984e:	b141      	cbz	r1, 8009862 <__swsetup_r+0x6a>
 8009850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <__swsetup_r+0x66>
 8009858:	4630      	mov	r0, r6
 800985a:	f001 fb75 	bl	800af48 <_free_r>
 800985e:	2300      	movs	r3, #0
 8009860:	6363      	str	r3, [r4, #52]	; 0x34
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	2300      	movs	r3, #0
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f043 0308 	orr.w	r3, r3, #8
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	b94b      	cbnz	r3, 8009892 <__swsetup_r+0x9a>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009888:	d003      	beq.n	8009892 <__swsetup_r+0x9a>
 800988a:	4621      	mov	r1, r4
 800988c:	4630      	mov	r0, r6
 800988e:	f001 f80f 	bl	800a8b0 <__smakebuf_r>
 8009892:	89a2      	ldrh	r2, [r4, #12]
 8009894:	f012 0301 	ands.w	r3, r2, #1
 8009898:	d00c      	beq.n	80098b4 <__swsetup_r+0xbc>
 800989a:	2300      	movs	r3, #0
 800989c:	60a3      	str	r3, [r4, #8]
 800989e:	6963      	ldr	r3, [r4, #20]
 80098a0:	425b      	negs	r3, r3
 80098a2:	61a3      	str	r3, [r4, #24]
 80098a4:	6923      	ldr	r3, [r4, #16]
 80098a6:	b953      	cbnz	r3, 80098be <__swsetup_r+0xc6>
 80098a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80098b0:	d1ba      	bne.n	8009828 <__swsetup_r+0x30>
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0792      	lsls	r2, r2, #30
 80098b6:	bf58      	it	pl
 80098b8:	6963      	ldrpl	r3, [r4, #20]
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	e7f2      	b.n	80098a4 <__swsetup_r+0xac>
 80098be:	2000      	movs	r0, #0
 80098c0:	e7f7      	b.n	80098b2 <__swsetup_r+0xba>
 80098c2:	bf00      	nop
 80098c4:	20000038 	.word	0x20000038
 80098c8:	0800d1e8 	.word	0x0800d1e8
 80098cc:	0800d208 	.word	0x0800d208
 80098d0:	0800d1c8 	.word	0x0800d1c8

080098d4 <quorem>:
 80098d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	6903      	ldr	r3, [r0, #16]
 80098da:	690c      	ldr	r4, [r1, #16]
 80098dc:	4680      	mov	r8, r0
 80098de:	42a3      	cmp	r3, r4
 80098e0:	f2c0 8084 	blt.w	80099ec <quorem+0x118>
 80098e4:	3c01      	subs	r4, #1
 80098e6:	f101 0714 	add.w	r7, r1, #20
 80098ea:	f100 0614 	add.w	r6, r0, #20
 80098ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80098f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80098f6:	3501      	adds	r5, #1
 80098f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80098fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009900:	eb06 030c 	add.w	r3, r6, ip
 8009904:	eb07 090c 	add.w	r9, r7, ip
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	b39d      	cbz	r5, 8009974 <quorem+0xa0>
 800990c:	f04f 0a00 	mov.w	sl, #0
 8009910:	4638      	mov	r0, r7
 8009912:	46b6      	mov	lr, r6
 8009914:	46d3      	mov	fp, sl
 8009916:	f850 2b04 	ldr.w	r2, [r0], #4
 800991a:	b293      	uxth	r3, r2
 800991c:	fb05 a303 	mla	r3, r5, r3, sl
 8009920:	0c12      	lsrs	r2, r2, #16
 8009922:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009926:	fb05 a202 	mla	r2, r5, r2, sl
 800992a:	b29b      	uxth	r3, r3
 800992c:	ebab 0303 	sub.w	r3, fp, r3
 8009930:	f8de b000 	ldr.w	fp, [lr]
 8009934:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009938:	fa1f fb8b 	uxth.w	fp, fp
 800993c:	445b      	add	r3, fp
 800993e:	fa1f fb82 	uxth.w	fp, r2
 8009942:	f8de 2000 	ldr.w	r2, [lr]
 8009946:	4581      	cmp	r9, r0
 8009948:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800994c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009950:	b29b      	uxth	r3, r3
 8009952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009956:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800995a:	f84e 3b04 	str.w	r3, [lr], #4
 800995e:	d2da      	bcs.n	8009916 <quorem+0x42>
 8009960:	f856 300c 	ldr.w	r3, [r6, ip]
 8009964:	b933      	cbnz	r3, 8009974 <quorem+0xa0>
 8009966:	9b01      	ldr	r3, [sp, #4]
 8009968:	3b04      	subs	r3, #4
 800996a:	429e      	cmp	r6, r3
 800996c:	461a      	mov	r2, r3
 800996e:	d331      	bcc.n	80099d4 <quorem+0x100>
 8009970:	f8c8 4010 	str.w	r4, [r8, #16]
 8009974:	4640      	mov	r0, r8
 8009976:	f001 fa11 	bl	800ad9c <__mcmp>
 800997a:	2800      	cmp	r0, #0
 800997c:	db26      	blt.n	80099cc <quorem+0xf8>
 800997e:	4630      	mov	r0, r6
 8009980:	f04f 0c00 	mov.w	ip, #0
 8009984:	3501      	adds	r5, #1
 8009986:	f857 1b04 	ldr.w	r1, [r7], #4
 800998a:	f8d0 e000 	ldr.w	lr, [r0]
 800998e:	b28b      	uxth	r3, r1
 8009990:	ebac 0303 	sub.w	r3, ip, r3
 8009994:	fa1f f28e 	uxth.w	r2, lr
 8009998:	4413      	add	r3, r2
 800999a:	0c0a      	lsrs	r2, r1, #16
 800999c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099aa:	45b9      	cmp	r9, r7
 80099ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099b0:	f840 3b04 	str.w	r3, [r0], #4
 80099b4:	d2e7      	bcs.n	8009986 <quorem+0xb2>
 80099b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80099ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80099be:	b92a      	cbnz	r2, 80099cc <quorem+0xf8>
 80099c0:	3b04      	subs	r3, #4
 80099c2:	429e      	cmp	r6, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	d30b      	bcc.n	80099e0 <quorem+0x10c>
 80099c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80099cc:	4628      	mov	r0, r5
 80099ce:	b003      	add	sp, #12
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	6812      	ldr	r2, [r2, #0]
 80099d6:	3b04      	subs	r3, #4
 80099d8:	2a00      	cmp	r2, #0
 80099da:	d1c9      	bne.n	8009970 <quorem+0x9c>
 80099dc:	3c01      	subs	r4, #1
 80099de:	e7c4      	b.n	800996a <quorem+0x96>
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	3b04      	subs	r3, #4
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	d1ef      	bne.n	80099c8 <quorem+0xf4>
 80099e8:	3c01      	subs	r4, #1
 80099ea:	e7ea      	b.n	80099c2 <quorem+0xee>
 80099ec:	2000      	movs	r0, #0
 80099ee:	e7ee      	b.n	80099ce <quorem+0xfa>

080099f0 <_dtoa_r>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	4616      	mov	r6, r2
 80099f6:	461f      	mov	r7, r3
 80099f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099fa:	b095      	sub	sp, #84	; 0x54
 80099fc:	4604      	mov	r4, r0
 80099fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009a02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a06:	b93d      	cbnz	r5, 8009a18 <_dtoa_r+0x28>
 8009a08:	2010      	movs	r0, #16
 8009a0a:	f000 ff91 	bl	800a930 <malloc>
 8009a0e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a14:	6005      	str	r5, [r0, #0]
 8009a16:	60c5      	str	r5, [r0, #12]
 8009a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a1a:	6819      	ldr	r1, [r3, #0]
 8009a1c:	b151      	cbz	r1, 8009a34 <_dtoa_r+0x44>
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	2301      	movs	r3, #1
 8009a22:	4093      	lsls	r3, r2
 8009a24:	604a      	str	r2, [r1, #4]
 8009a26:	608b      	str	r3, [r1, #8]
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 ffd6 	bl	800a9da <_Bfree>
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	1e3b      	subs	r3, r7, #0
 8009a36:	bfaf      	iteee	ge
 8009a38:	2300      	movge	r3, #0
 8009a3a:	2201      	movlt	r2, #1
 8009a3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a40:	9303      	strlt	r3, [sp, #12]
 8009a42:	bfac      	ite	ge
 8009a44:	f8c8 3000 	strge.w	r3, [r8]
 8009a48:	f8c8 2000 	strlt.w	r2, [r8]
 8009a4c:	4bae      	ldr	r3, [pc, #696]	; (8009d08 <_dtoa_r+0x318>)
 8009a4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a52:	ea33 0308 	bics.w	r3, r3, r8
 8009a56:	d11b      	bne.n	8009a90 <_dtoa_r+0xa0>
 8009a58:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	9b02      	ldr	r3, [sp, #8]
 8009a62:	b923      	cbnz	r3, 8009a6e <_dtoa_r+0x7e>
 8009a64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f000 8545 	beq.w	800a4f8 <_dtoa_r+0xb08>
 8009a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a70:	b953      	cbnz	r3, 8009a88 <_dtoa_r+0x98>
 8009a72:	4ba6      	ldr	r3, [pc, #664]	; (8009d0c <_dtoa_r+0x31c>)
 8009a74:	e021      	b.n	8009aba <_dtoa_r+0xca>
 8009a76:	4ba6      	ldr	r3, [pc, #664]	; (8009d10 <_dtoa_r+0x320>)
 8009a78:	9306      	str	r3, [sp, #24]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	9806      	ldr	r0, [sp, #24]
 8009a82:	b015      	add	sp, #84	; 0x54
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	4ba0      	ldr	r3, [pc, #640]	; (8009d0c <_dtoa_r+0x31c>)
 8009a8a:	9306      	str	r3, [sp, #24]
 8009a8c:	3303      	adds	r3, #3
 8009a8e:	e7f5      	b.n	8009a7c <_dtoa_r+0x8c>
 8009a90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 ff84 	bl	80009a8 <__aeabi_dcmpeq>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	b160      	cbz	r0, 8009abe <_dtoa_r+0xce>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8520 	beq.w	800a4f2 <_dtoa_r+0xb02>
 8009ab2:	4b98      	ldr	r3, [pc, #608]	; (8009d14 <_dtoa_r+0x324>)
 8009ab4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	9306      	str	r3, [sp, #24]
 8009abc:	e7e0      	b.n	8009a80 <_dtoa_r+0x90>
 8009abe:	ab12      	add	r3, sp, #72	; 0x48
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	ab13      	add	r3, sp, #76	; 0x4c
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463b      	mov	r3, r7
 8009aca:	4620      	mov	r0, r4
 8009acc:	f001 f9de 	bl	800ae8c <__d2b>
 8009ad0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ad4:	4683      	mov	fp, r0
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	d07d      	beq.n	8009bd6 <_dtoa_r+0x1e6>
 8009ada:	46b0      	mov	r8, r6
 8009adc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ae0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009ae4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009ae8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009af0:	2200      	movs	r2, #0
 8009af2:	4b89      	ldr	r3, [pc, #548]	; (8009d18 <_dtoa_r+0x328>)
 8009af4:	4640      	mov	r0, r8
 8009af6:	4649      	mov	r1, r9
 8009af8:	f7f6 fb36 	bl	8000168 <__aeabi_dsub>
 8009afc:	a37c      	add	r3, pc, #496	; (adr r3, 8009cf0 <_dtoa_r+0x300>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fce9 	bl	80004d8 <__aeabi_dmul>
 8009b06:	a37c      	add	r3, pc, #496	; (adr r3, 8009cf8 <_dtoa_r+0x308>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fb2e 	bl	800016c <__adddf3>
 8009b10:	4606      	mov	r6, r0
 8009b12:	4628      	mov	r0, r5
 8009b14:	460f      	mov	r7, r1
 8009b16:	f7f6 fc75 	bl	8000404 <__aeabi_i2d>
 8009b1a:	a379      	add	r3, pc, #484	; (adr r3, 8009d00 <_dtoa_r+0x310>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 fcda 	bl	80004d8 <__aeabi_dmul>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 fb1e 	bl	800016c <__adddf3>
 8009b30:	4606      	mov	r6, r0
 8009b32:	460f      	mov	r7, r1
 8009b34:	f7f6 ff80 	bl	8000a38 <__aeabi_d2iz>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4682      	mov	sl, r0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 ff3b 	bl	80009bc <__aeabi_dcmplt>
 8009b46:	b148      	cbz	r0, 8009b5c <_dtoa_r+0x16c>
 8009b48:	4650      	mov	r0, sl
 8009b4a:	f7f6 fc5b 	bl	8000404 <__aeabi_i2d>
 8009b4e:	4632      	mov	r2, r6
 8009b50:	463b      	mov	r3, r7
 8009b52:	f7f6 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8009b56:	b908      	cbnz	r0, 8009b5c <_dtoa_r+0x16c>
 8009b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b5c:	f1ba 0f16 	cmp.w	sl, #22
 8009b60:	d85a      	bhi.n	8009c18 <_dtoa_r+0x228>
 8009b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b66:	496d      	ldr	r1, [pc, #436]	; (8009d1c <_dtoa_r+0x32c>)
 8009b68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b70:	f7f6 ff42 	bl	80009f8 <__aeabi_dcmpgt>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d051      	beq.n	8009c1c <_dtoa_r+0x22c>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b82:	1b5d      	subs	r5, r3, r5
 8009b84:	1e6b      	subs	r3, r5, #1
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	bf43      	ittte	mi
 8009b8a:	2300      	movmi	r3, #0
 8009b8c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009b90:	9307      	strmi	r3, [sp, #28]
 8009b92:	f04f 0900 	movpl.w	r9, #0
 8009b96:	f1ba 0f00 	cmp.w	sl, #0
 8009b9a:	db41      	blt.n	8009c20 <_dtoa_r+0x230>
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009ba2:	4453      	add	r3, sl
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9308      	str	r3, [sp, #32]
 8009baa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	f200 808f 	bhi.w	8009cd0 <_dtoa_r+0x2e0>
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	bfc4      	itt	gt
 8009bb6:	3b04      	subgt	r3, #4
 8009bb8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009bba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bbc:	bfc8      	it	gt
 8009bbe:	2500      	movgt	r5, #0
 8009bc0:	f1a3 0302 	sub.w	r3, r3, #2
 8009bc4:	bfd8      	it	le
 8009bc6:	2501      	movle	r5, #1
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	f200 808d 	bhi.w	8009ce8 <_dtoa_r+0x2f8>
 8009bce:	e8df f003 	tbb	[pc, r3]
 8009bd2:	7d7b      	.short	0x7d7b
 8009bd4:	6f2f      	.short	0x6f2f
 8009bd6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009bda:	441d      	add	r5, r3
 8009bdc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009be0:	2820      	cmp	r0, #32
 8009be2:	dd13      	ble.n	8009c0c <_dtoa_r+0x21c>
 8009be4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	fa08 f800 	lsl.w	r8, r8, r0
 8009bee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009bf2:	fa23 f000 	lsr.w	r0, r3, r0
 8009bf6:	ea48 0000 	orr.w	r0, r8, r0
 8009bfa:	f7f6 fbf3 	bl	80003e4 <__aeabi_ui2d>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4680      	mov	r8, r0
 8009c02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009c06:	3d01      	subs	r5, #1
 8009c08:	9310      	str	r3, [sp, #64]	; 0x40
 8009c0a:	e771      	b.n	8009af0 <_dtoa_r+0x100>
 8009c0c:	9b02      	ldr	r3, [sp, #8]
 8009c0e:	f1c0 0020 	rsb	r0, r0, #32
 8009c12:	fa03 f000 	lsl.w	r0, r3, r0
 8009c16:	e7f0      	b.n	8009bfa <_dtoa_r+0x20a>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e7b0      	b.n	8009b7e <_dtoa_r+0x18e>
 8009c1c:	900d      	str	r0, [sp, #52]	; 0x34
 8009c1e:	e7af      	b.n	8009b80 <_dtoa_r+0x190>
 8009c20:	f1ca 0300 	rsb	r3, sl, #0
 8009c24:	9308      	str	r3, [sp, #32]
 8009c26:	2300      	movs	r3, #0
 8009c28:	eba9 090a 	sub.w	r9, r9, sl
 8009c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c2e:	e7bc      	b.n	8009baa <_dtoa_r+0x1ba>
 8009c30:	2301      	movs	r3, #1
 8009c32:	9309      	str	r3, [sp, #36]	; 0x24
 8009c34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd74      	ble.n	8009d24 <_dtoa_r+0x334>
 8009c3a:	4698      	mov	r8, r3
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c42:	6072      	str	r2, [r6, #4]
 8009c44:	2204      	movs	r2, #4
 8009c46:	f102 0014 	add.w	r0, r2, #20
 8009c4a:	4298      	cmp	r0, r3
 8009c4c:	6871      	ldr	r1, [r6, #4]
 8009c4e:	d96e      	bls.n	8009d2e <_dtoa_r+0x33e>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 fe8e 	bl	800a972 <_Balloc>
 8009c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c58:	6030      	str	r0, [r6, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f1b8 0f0e 	cmp.w	r8, #14
 8009c60:	9306      	str	r3, [sp, #24]
 8009c62:	f200 80ed 	bhi.w	8009e40 <_dtoa_r+0x450>
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	f000 80ea 	beq.w	8009e40 <_dtoa_r+0x450>
 8009c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c70:	f1ba 0f00 	cmp.w	sl, #0
 8009c74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009c78:	dd77      	ble.n	8009d6a <_dtoa_r+0x37a>
 8009c7a:	4a28      	ldr	r2, [pc, #160]	; (8009d1c <_dtoa_r+0x32c>)
 8009c7c:	f00a 030f 	and.w	r3, sl, #15
 8009c80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c88:	06f0      	lsls	r0, r6, #27
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c92:	d568      	bpl.n	8009d66 <_dtoa_r+0x376>
 8009c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009c98:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <_dtoa_r+0x330>)
 8009c9a:	2503      	movs	r5, #3
 8009c9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ca0:	f7f6 fd44 	bl	800072c <__aeabi_ddiv>
 8009ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca8:	f006 060f 	and.w	r6, r6, #15
 8009cac:	4f1c      	ldr	r7, [pc, #112]	; (8009d20 <_dtoa_r+0x330>)
 8009cae:	e04f      	b.n	8009d50 <_dtoa_r+0x360>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cb6:	4453      	add	r3, sl
 8009cb8:	f103 0801 	add.w	r8, r3, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	4643      	mov	r3, r8
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	bfb8      	it	lt
 8009cc4:	2301      	movlt	r3, #1
 8009cc6:	e7ba      	b.n	8009c3e <_dtoa_r+0x24e>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e7b2      	b.n	8009c32 <_dtoa_r+0x242>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e7f0      	b.n	8009cb2 <_dtoa_r+0x2c2>
 8009cd0:	2501      	movs	r5, #1
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9509      	str	r5, [sp, #36]	; 0x24
 8009cd6:	931e      	str	r3, [sp, #120]	; 0x78
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	2200      	movs	r2, #0
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	2312      	movs	r3, #18
 8009ce4:	921f      	str	r2, [sp, #124]	; 0x7c
 8009ce6:	e7aa      	b.n	8009c3e <_dtoa_r+0x24e>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e7f4      	b.n	8009cd8 <_dtoa_r+0x2e8>
 8009cee:	bf00      	nop
 8009cf0:	636f4361 	.word	0x636f4361
 8009cf4:	3fd287a7 	.word	0x3fd287a7
 8009cf8:	8b60c8b3 	.word	0x8b60c8b3
 8009cfc:	3fc68a28 	.word	0x3fc68a28
 8009d00:	509f79fb 	.word	0x509f79fb
 8009d04:	3fd34413 	.word	0x3fd34413
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	0800d1c1 	.word	0x0800d1c1
 8009d10:	0800d1b8 	.word	0x0800d1b8
 8009d14:	0800d195 	.word	0x0800d195
 8009d18:	3ff80000 	.word	0x3ff80000
 8009d1c:	0800d250 	.word	0x0800d250
 8009d20:	0800d228 	.word	0x0800d228
 8009d24:	2301      	movs	r3, #1
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	4698      	mov	r8, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	e7da      	b.n	8009ce4 <_dtoa_r+0x2f4>
 8009d2e:	3101      	adds	r1, #1
 8009d30:	6071      	str	r1, [r6, #4]
 8009d32:	0052      	lsls	r2, r2, #1
 8009d34:	e787      	b.n	8009c46 <_dtoa_r+0x256>
 8009d36:	07f1      	lsls	r1, r6, #31
 8009d38:	d508      	bpl.n	8009d4c <_dtoa_r+0x35c>
 8009d3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d42:	f7f6 fbc9 	bl	80004d8 <__aeabi_dmul>
 8009d46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d4a:	3501      	adds	r5, #1
 8009d4c:	1076      	asrs	r6, r6, #1
 8009d4e:	3708      	adds	r7, #8
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	d1f0      	bne.n	8009d36 <_dtoa_r+0x346>
 8009d54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5c:	f7f6 fce6 	bl	800072c <__aeabi_ddiv>
 8009d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d64:	e01b      	b.n	8009d9e <_dtoa_r+0x3ae>
 8009d66:	2502      	movs	r5, #2
 8009d68:	e7a0      	b.n	8009cac <_dtoa_r+0x2bc>
 8009d6a:	f000 80a4 	beq.w	8009eb6 <_dtoa_r+0x4c6>
 8009d6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d72:	f1ca 0600 	rsb	r6, sl, #0
 8009d76:	4ba0      	ldr	r3, [pc, #640]	; (8009ff8 <_dtoa_r+0x608>)
 8009d78:	f006 020f 	and.w	r2, r6, #15
 8009d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f7f6 fba8 	bl	80004d8 <__aeabi_dmul>
 8009d88:	2502      	movs	r5, #2
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d90:	4f9a      	ldr	r7, [pc, #616]	; (8009ffc <_dtoa_r+0x60c>)
 8009d92:	1136      	asrs	r6, r6, #4
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	f040 8083 	bne.w	8009ea0 <_dtoa_r+0x4b0>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e0      	bne.n	8009d60 <_dtoa_r+0x370>
 8009d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 808a 	beq.w	8009eba <_dtoa_r+0x4ca>
 8009da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009daa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009db2:	2200      	movs	r2, #0
 8009db4:	4b92      	ldr	r3, [pc, #584]	; (800a000 <_dtoa_r+0x610>)
 8009db6:	f7f6 fe01 	bl	80009bc <__aeabi_dcmplt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d07d      	beq.n	8009eba <_dtoa_r+0x4ca>
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	d07a      	beq.n	8009eba <_dtoa_r+0x4ca>
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	dd36      	ble.n	8009e38 <_dtoa_r+0x448>
 8009dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4b8c      	ldr	r3, [pc, #560]	; (800a004 <_dtoa_r+0x614>)
 8009dd2:	f7f6 fb81 	bl	80004d8 <__aeabi_dmul>
 8009dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dda:	9e04      	ldr	r6, [sp, #16]
 8009ddc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009de0:	3501      	adds	r5, #1
 8009de2:	4628      	mov	r0, r5
 8009de4:	f7f6 fb0e 	bl	8000404 <__aeabi_i2d>
 8009de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dec:	f7f6 fb74 	bl	80004d8 <__aeabi_dmul>
 8009df0:	2200      	movs	r2, #0
 8009df2:	4b85      	ldr	r3, [pc, #532]	; (800a008 <_dtoa_r+0x618>)
 8009df4:	f7f6 f9ba 	bl	800016c <__adddf3>
 8009df8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009dfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e00:	950b      	str	r5, [sp, #44]	; 0x2c
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	d15c      	bne.n	8009ec0 <_dtoa_r+0x4d0>
 8009e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4b7f      	ldr	r3, [pc, #508]	; (800a00c <_dtoa_r+0x61c>)
 8009e0e:	f7f6 f9ab 	bl	8000168 <__aeabi_dsub>
 8009e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e14:	462b      	mov	r3, r5
 8009e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1a:	f7f6 fded 	bl	80009f8 <__aeabi_dcmpgt>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f040 8281 	bne.w	800a326 <_dtoa_r+0x936>
 8009e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009e2e:	f7f6 fdc5 	bl	80009bc <__aeabi_dcmplt>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	f040 8275 	bne.w	800a322 <_dtoa_r+0x932>
 8009e38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f2c0 814b 	blt.w	800a0de <_dtoa_r+0x6ee>
 8009e48:	f1ba 0f0e 	cmp.w	sl, #14
 8009e4c:	f300 8147 	bgt.w	800a0de <_dtoa_r+0x6ee>
 8009e50:	4b69      	ldr	r3, [pc, #420]	; (8009ff8 <_dtoa_r+0x608>)
 8009e52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f280 80d7 	bge.w	800a014 <_dtoa_r+0x624>
 8009e66:	f1b8 0f00 	cmp.w	r8, #0
 8009e6a:	f300 80d3 	bgt.w	800a014 <_dtoa_r+0x624>
 8009e6e:	f040 8257 	bne.w	800a320 <_dtoa_r+0x930>
 8009e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e76:	2200      	movs	r2, #0
 8009e78:	4b64      	ldr	r3, [pc, #400]	; (800a00c <_dtoa_r+0x61c>)
 8009e7a:	f7f6 fb2d 	bl	80004d8 <__aeabi_dmul>
 8009e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e82:	f7f6 fdaf 	bl	80009e4 <__aeabi_dcmpge>
 8009e86:	4646      	mov	r6, r8
 8009e88:	4647      	mov	r7, r8
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	f040 822d 	bne.w	800a2ea <_dtoa_r+0x8fa>
 8009e90:	9b06      	ldr	r3, [sp, #24]
 8009e92:	9a06      	ldr	r2, [sp, #24]
 8009e94:	1c5d      	adds	r5, r3, #1
 8009e96:	2331      	movs	r3, #49	; 0x31
 8009e98:	f10a 0a01 	add.w	sl, sl, #1
 8009e9c:	7013      	strb	r3, [r2, #0]
 8009e9e:	e228      	b.n	800a2f2 <_dtoa_r+0x902>
 8009ea0:	07f2      	lsls	r2, r6, #31
 8009ea2:	d505      	bpl.n	8009eb0 <_dtoa_r+0x4c0>
 8009ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ea8:	f7f6 fb16 	bl	80004d8 <__aeabi_dmul>
 8009eac:	2301      	movs	r3, #1
 8009eae:	3501      	adds	r5, #1
 8009eb0:	1076      	asrs	r6, r6, #1
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	e76e      	b.n	8009d94 <_dtoa_r+0x3a4>
 8009eb6:	2502      	movs	r5, #2
 8009eb8:	e771      	b.n	8009d9e <_dtoa_r+0x3ae>
 8009eba:	4657      	mov	r7, sl
 8009ebc:	4646      	mov	r6, r8
 8009ebe:	e790      	b.n	8009de2 <_dtoa_r+0x3f2>
 8009ec0:	4b4d      	ldr	r3, [pc, #308]	; (8009ff8 <_dtoa_r+0x608>)
 8009ec2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ec6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d048      	beq.n	8009f62 <_dtoa_r+0x572>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	494e      	ldr	r1, [pc, #312]	; (800a010 <_dtoa_r+0x620>)
 8009ed8:	f7f6 fc28 	bl	800072c <__aeabi_ddiv>
 8009edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ee0:	f7f6 f942 	bl	8000168 <__aeabi_dsub>
 8009ee4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ee8:	9d06      	ldr	r5, [sp, #24]
 8009eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eee:	f7f6 fda3 	bl	8000a38 <__aeabi_d2iz>
 8009ef2:	9011      	str	r0, [sp, #68]	; 0x44
 8009ef4:	f7f6 fa86 	bl	8000404 <__aeabi_i2d>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f00:	f7f6 f932 	bl	8000168 <__aeabi_dsub>
 8009f04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f0a:	3330      	adds	r3, #48	; 0x30
 8009f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f14:	f7f6 fd52 	bl	80009bc <__aeabi_dcmplt>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d163      	bne.n	8009fe4 <_dtoa_r+0x5f4>
 8009f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f20:	2000      	movs	r0, #0
 8009f22:	4937      	ldr	r1, [pc, #220]	; (800a000 <_dtoa_r+0x610>)
 8009f24:	f7f6 f920 	bl	8000168 <__aeabi_dsub>
 8009f28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f2c:	f7f6 fd46 	bl	80009bc <__aeabi_dcmplt>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f040 80b5 	bne.w	800a0a0 <_dtoa_r+0x6b0>
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	1aeb      	subs	r3, r5, r3
 8009f3a:	429e      	cmp	r6, r3
 8009f3c:	f77f af7c 	ble.w	8009e38 <_dtoa_r+0x448>
 8009f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f44:	2200      	movs	r2, #0
 8009f46:	4b2f      	ldr	r3, [pc, #188]	; (800a004 <_dtoa_r+0x614>)
 8009f48:	f7f6 fac6 	bl	80004d8 <__aeabi_dmul>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <_dtoa_r+0x614>)
 8009f58:	f7f6 fabe 	bl	80004d8 <__aeabi_dmul>
 8009f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f60:	e7c3      	b.n	8009eea <_dtoa_r+0x4fa>
 8009f62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f66:	f7f6 fab7 	bl	80004d8 <__aeabi_dmul>
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f70:	199d      	adds	r5, r3, r6
 8009f72:	461e      	mov	r6, r3
 8009f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f78:	f7f6 fd5e 	bl	8000a38 <__aeabi_d2iz>
 8009f7c:	9011      	str	r0, [sp, #68]	; 0x44
 8009f7e:	f7f6 fa41 	bl	8000404 <__aeabi_i2d>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8a:	f7f6 f8ed 	bl	8000168 <__aeabi_dsub>
 8009f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f94:	3330      	adds	r3, #48	; 0x30
 8009f96:	f806 3b01 	strb.w	r3, [r6], #1
 8009f9a:	42ae      	cmp	r6, r5
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	d124      	bne.n	8009fec <_dtoa_r+0x5fc>
 8009fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fa6:	4b1a      	ldr	r3, [pc, #104]	; (800a010 <_dtoa_r+0x620>)
 8009fa8:	f7f6 f8e0 	bl	800016c <__adddf3>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb4:	f7f6 fd20 	bl	80009f8 <__aeabi_dcmpgt>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d171      	bne.n	800a0a0 <_dtoa_r+0x6b0>
 8009fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4913      	ldr	r1, [pc, #76]	; (800a010 <_dtoa_r+0x620>)
 8009fc4:	f7f6 f8d0 	bl	8000168 <__aeabi_dsub>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd0:	f7f6 fcf4 	bl	80009bc <__aeabi_dcmplt>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f43f af2f 	beq.w	8009e38 <_dtoa_r+0x448>
 8009fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fde:	1e6a      	subs	r2, r5, #1
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d001      	beq.n	8009fe8 <_dtoa_r+0x5f8>
 8009fe4:	46ba      	mov	sl, r7
 8009fe6:	e04a      	b.n	800a07e <_dtoa_r+0x68e>
 8009fe8:	4615      	mov	r5, r2
 8009fea:	e7f6      	b.n	8009fda <_dtoa_r+0x5ea>
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <_dtoa_r+0x614>)
 8009fee:	f7f6 fa73 	bl	80004d8 <__aeabi_dmul>
 8009ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff6:	e7bd      	b.n	8009f74 <_dtoa_r+0x584>
 8009ff8:	0800d250 	.word	0x0800d250
 8009ffc:	0800d228 	.word	0x0800d228
 800a000:	3ff00000 	.word	0x3ff00000
 800a004:	40240000 	.word	0x40240000
 800a008:	401c0000 	.word	0x401c0000
 800a00c:	40140000 	.word	0x40140000
 800a010:	3fe00000 	.word	0x3fe00000
 800a014:	9d06      	ldr	r5, [sp, #24]
 800a016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 fb83 	bl	800072c <__aeabi_ddiv>
 800a026:	f7f6 fd07 	bl	8000a38 <__aeabi_d2iz>
 800a02a:	4681      	mov	r9, r0
 800a02c:	f7f6 f9ea 	bl	8000404 <__aeabi_i2d>
 800a030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a034:	f7f6 fa50 	bl	80004d8 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 f892 	bl	8000168 <__aeabi_dsub>
 800a044:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a048:	f805 6b01 	strb.w	r6, [r5], #1
 800a04c:	9e06      	ldr	r6, [sp, #24]
 800a04e:	4602      	mov	r2, r0
 800a050:	1bae      	subs	r6, r5, r6
 800a052:	45b0      	cmp	r8, r6
 800a054:	460b      	mov	r3, r1
 800a056:	d135      	bne.n	800a0c4 <_dtoa_r+0x6d4>
 800a058:	f7f6 f888 	bl	800016c <__adddf3>
 800a05c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	f7f6 fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 800a068:	b9c8      	cbnz	r0, 800a09e <_dtoa_r+0x6ae>
 800a06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fc99 	bl	80009a8 <__aeabi_dcmpeq>
 800a076:	b110      	cbz	r0, 800a07e <_dtoa_r+0x68e>
 800a078:	f019 0f01 	tst.w	r9, #1
 800a07c:	d10f      	bne.n	800a09e <_dtoa_r+0x6ae>
 800a07e:	4659      	mov	r1, fp
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fcaa 	bl	800a9da <_Bfree>
 800a086:	2300      	movs	r3, #0
 800a088:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a08a:	702b      	strb	r3, [r5, #0]
 800a08c:	f10a 0301 	add.w	r3, sl, #1
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a094:	2b00      	cmp	r3, #0
 800a096:	f43f acf3 	beq.w	8009a80 <_dtoa_r+0x90>
 800a09a:	601d      	str	r5, [r3, #0]
 800a09c:	e4f0      	b.n	8009a80 <_dtoa_r+0x90>
 800a09e:	4657      	mov	r7, sl
 800a0a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0a4:	1e6b      	subs	r3, r5, #1
 800a0a6:	2a39      	cmp	r2, #57	; 0x39
 800a0a8:	d106      	bne.n	800a0b8 <_dtoa_r+0x6c8>
 800a0aa:	9a06      	ldr	r2, [sp, #24]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d107      	bne.n	800a0c0 <_dtoa_r+0x6d0>
 800a0b0:	2330      	movs	r3, #48	; 0x30
 800a0b2:	7013      	strb	r3, [r2, #0]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	3701      	adds	r7, #1
 800a0b8:	781a      	ldrb	r2, [r3, #0]
 800a0ba:	3201      	adds	r2, #1
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	e791      	b.n	8009fe4 <_dtoa_r+0x5f4>
 800a0c0:	461d      	mov	r5, r3
 800a0c2:	e7ed      	b.n	800a0a0 <_dtoa_r+0x6b0>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4b99      	ldr	r3, [pc, #612]	; (800a32c <_dtoa_r+0x93c>)
 800a0c8:	f7f6 fa06 	bl	80004d8 <__aeabi_dmul>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	f7f6 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d09e      	beq.n	800a01a <_dtoa_r+0x62a>
 800a0dc:	e7cf      	b.n	800a07e <_dtoa_r+0x68e>
 800a0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	f000 8088 	beq.w	800a1f6 <_dtoa_r+0x806>
 800a0e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a0e8:	2a01      	cmp	r2, #1
 800a0ea:	dc6d      	bgt.n	800a1c8 <_dtoa_r+0x7d8>
 800a0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	d066      	beq.n	800a1c0 <_dtoa_r+0x7d0>
 800a0f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0f6:	464d      	mov	r5, r9
 800a0f8:	9e08      	ldr	r6, [sp, #32]
 800a0fa:	9a07      	ldr	r2, [sp, #28]
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	441a      	add	r2, r3
 800a100:	4620      	mov	r0, r4
 800a102:	4499      	add	r9, r3
 800a104:	9207      	str	r2, [sp, #28]
 800a106:	f000 fd08 	bl	800ab1a <__i2b>
 800a10a:	4607      	mov	r7, r0
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	dd0b      	ble.n	800a128 <_dtoa_r+0x738>
 800a110:	9b07      	ldr	r3, [sp, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	dd08      	ble.n	800a128 <_dtoa_r+0x738>
 800a116:	42ab      	cmp	r3, r5
 800a118:	bfa8      	it	ge
 800a11a:	462b      	movge	r3, r5
 800a11c:	9a07      	ldr	r2, [sp, #28]
 800a11e:	eba9 0903 	sub.w	r9, r9, r3
 800a122:	1aed      	subs	r5, r5, r3
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	b1eb      	cbz	r3, 800a168 <_dtoa_r+0x778>
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d065      	beq.n	800a1fe <_dtoa_r+0x80e>
 800a132:	b18e      	cbz	r6, 800a158 <_dtoa_r+0x768>
 800a134:	4639      	mov	r1, r7
 800a136:	4632      	mov	r2, r6
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fd8d 	bl	800ac58 <__pow5mult>
 800a13e:	465a      	mov	r2, fp
 800a140:	4601      	mov	r1, r0
 800a142:	4607      	mov	r7, r0
 800a144:	4620      	mov	r0, r4
 800a146:	f000 fcf1 	bl	800ab2c <__multiply>
 800a14a:	4659      	mov	r1, fp
 800a14c:	900a      	str	r0, [sp, #40]	; 0x28
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 fc43 	bl	800a9da <_Bfree>
 800a154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a156:	469b      	mov	fp, r3
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	1b9a      	subs	r2, r3, r6
 800a15c:	d004      	beq.n	800a168 <_dtoa_r+0x778>
 800a15e:	4659      	mov	r1, fp
 800a160:	4620      	mov	r0, r4
 800a162:	f000 fd79 	bl	800ac58 <__pow5mult>
 800a166:	4683      	mov	fp, r0
 800a168:	2101      	movs	r1, #1
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 fcd5 	bl	800ab1a <__i2b>
 800a170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a172:	4606      	mov	r6, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 81c6 	beq.w	800a506 <_dtoa_r+0xb16>
 800a17a:	461a      	mov	r2, r3
 800a17c:	4601      	mov	r1, r0
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fd6a 	bl	800ac58 <__pow5mult>
 800a184:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a186:	4606      	mov	r6, r0
 800a188:	2b01      	cmp	r3, #1
 800a18a:	dc3e      	bgt.n	800a20a <_dtoa_r+0x81a>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d137      	bne.n	800a202 <_dtoa_r+0x812>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d134      	bne.n	800a206 <_dtoa_r+0x816>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1a2:	0d1b      	lsrs	r3, r3, #20
 800a1a4:	051b      	lsls	r3, r3, #20
 800a1a6:	b12b      	cbz	r3, 800a1b4 <_dtoa_r+0x7c4>
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	f109 0901 	add.w	r9, r9, #1
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	9308      	str	r3, [sp, #32]
 800a1b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d128      	bne.n	800a20e <_dtoa_r+0x81e>
 800a1bc:	2001      	movs	r0, #1
 800a1be:	e02e      	b.n	800a21e <_dtoa_r+0x82e>
 800a1c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1c6:	e796      	b.n	800a0f6 <_dtoa_r+0x706>
 800a1c8:	9b08      	ldr	r3, [sp, #32]
 800a1ca:	f108 36ff 	add.w	r6, r8, #4294967295
 800a1ce:	42b3      	cmp	r3, r6
 800a1d0:	bfb7      	itett	lt
 800a1d2:	9b08      	ldrlt	r3, [sp, #32]
 800a1d4:	1b9e      	subge	r6, r3, r6
 800a1d6:	1af2      	sublt	r2, r6, r3
 800a1d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a1da:	bfbf      	itttt	lt
 800a1dc:	9608      	strlt	r6, [sp, #32]
 800a1de:	189b      	addlt	r3, r3, r2
 800a1e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a1e2:	2600      	movlt	r6, #0
 800a1e4:	f1b8 0f00 	cmp.w	r8, #0
 800a1e8:	bfb9      	ittee	lt
 800a1ea:	eba9 0508 	sublt.w	r5, r9, r8
 800a1ee:	2300      	movlt	r3, #0
 800a1f0:	464d      	movge	r5, r9
 800a1f2:	4643      	movge	r3, r8
 800a1f4:	e781      	b.n	800a0fa <_dtoa_r+0x70a>
 800a1f6:	9e08      	ldr	r6, [sp, #32]
 800a1f8:	464d      	mov	r5, r9
 800a1fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1fc:	e786      	b.n	800a10c <_dtoa_r+0x71c>
 800a1fe:	9a08      	ldr	r2, [sp, #32]
 800a200:	e7ad      	b.n	800a15e <_dtoa_r+0x76e>
 800a202:	2300      	movs	r3, #0
 800a204:	e7d6      	b.n	800a1b4 <_dtoa_r+0x7c4>
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	e7d4      	b.n	800a1b4 <_dtoa_r+0x7c4>
 800a20a:	2300      	movs	r3, #0
 800a20c:	9308      	str	r3, [sp, #32]
 800a20e:	6933      	ldr	r3, [r6, #16]
 800a210:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a214:	6918      	ldr	r0, [r3, #16]
 800a216:	f000 fc32 	bl	800aa7e <__hi0bits>
 800a21a:	f1c0 0020 	rsb	r0, r0, #32
 800a21e:	9b07      	ldr	r3, [sp, #28]
 800a220:	4418      	add	r0, r3
 800a222:	f010 001f 	ands.w	r0, r0, #31
 800a226:	d047      	beq.n	800a2b8 <_dtoa_r+0x8c8>
 800a228:	f1c0 0320 	rsb	r3, r0, #32
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	dd3b      	ble.n	800a2a8 <_dtoa_r+0x8b8>
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	f1c0 001c 	rsb	r0, r0, #28
 800a236:	4481      	add	r9, r0
 800a238:	4405      	add	r5, r0
 800a23a:	4403      	add	r3, r0
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f1b9 0f00 	cmp.w	r9, #0
 800a242:	dd05      	ble.n	800a250 <_dtoa_r+0x860>
 800a244:	4659      	mov	r1, fp
 800a246:	464a      	mov	r2, r9
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fd53 	bl	800acf4 <__lshift>
 800a24e:	4683      	mov	fp, r0
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dd05      	ble.n	800a262 <_dtoa_r+0x872>
 800a256:	4631      	mov	r1, r6
 800a258:	461a      	mov	r2, r3
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 fd4a 	bl	800acf4 <__lshift>
 800a260:	4606      	mov	r6, r0
 800a262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a264:	b353      	cbz	r3, 800a2bc <_dtoa_r+0x8cc>
 800a266:	4631      	mov	r1, r6
 800a268:	4658      	mov	r0, fp
 800a26a:	f000 fd97 	bl	800ad9c <__mcmp>
 800a26e:	2800      	cmp	r0, #0
 800a270:	da24      	bge.n	800a2bc <_dtoa_r+0x8cc>
 800a272:	2300      	movs	r3, #0
 800a274:	4659      	mov	r1, fp
 800a276:	220a      	movs	r2, #10
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fbc5 	bl	800aa08 <__multadd>
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a284:	4683      	mov	fp, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 8144 	beq.w	800a514 <_dtoa_r+0xb24>
 800a28c:	2300      	movs	r3, #0
 800a28e:	4639      	mov	r1, r7
 800a290:	220a      	movs	r2, #10
 800a292:	4620      	mov	r0, r4
 800a294:	f000 fbb8 	bl	800aa08 <__multadd>
 800a298:	9b04      	ldr	r3, [sp, #16]
 800a29a:	4607      	mov	r7, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	dc4d      	bgt.n	800a33c <_dtoa_r+0x94c>
 800a2a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	dd4a      	ble.n	800a33c <_dtoa_r+0x94c>
 800a2a6:	e011      	b.n	800a2cc <_dtoa_r+0x8dc>
 800a2a8:	d0c9      	beq.n	800a23e <_dtoa_r+0x84e>
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	331c      	adds	r3, #28
 800a2ae:	441a      	add	r2, r3
 800a2b0:	4499      	add	r9, r3
 800a2b2:	441d      	add	r5, r3
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	e7c1      	b.n	800a23c <_dtoa_r+0x84c>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	e7f6      	b.n	800a2aa <_dtoa_r+0x8ba>
 800a2bc:	f1b8 0f00 	cmp.w	r8, #0
 800a2c0:	dc36      	bgt.n	800a330 <_dtoa_r+0x940>
 800a2c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	dd33      	ble.n	800a330 <_dtoa_r+0x940>
 800a2c8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a2cc:	9b04      	ldr	r3, [sp, #16]
 800a2ce:	b963      	cbnz	r3, 800a2ea <_dtoa_r+0x8fa>
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fb97 	bl	800aa08 <__multadd>
 800a2da:	4601      	mov	r1, r0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	4658      	mov	r0, fp
 800a2e0:	f000 fd5c 	bl	800ad9c <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f73f add3 	bgt.w	8009e90 <_dtoa_r+0x4a0>
 800a2ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2ec:	9d06      	ldr	r5, [sp, #24]
 800a2ee:	ea6f 0a03 	mvn.w	sl, r3
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fb6e 	bl	800a9da <_Bfree>
 800a2fe:	2f00      	cmp	r7, #0
 800a300:	f43f aebd 	beq.w	800a07e <_dtoa_r+0x68e>
 800a304:	f1b9 0f00 	cmp.w	r9, #0
 800a308:	d005      	beq.n	800a316 <_dtoa_r+0x926>
 800a30a:	45b9      	cmp	r9, r7
 800a30c:	d003      	beq.n	800a316 <_dtoa_r+0x926>
 800a30e:	4649      	mov	r1, r9
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fb62 	bl	800a9da <_Bfree>
 800a316:	4639      	mov	r1, r7
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 fb5e 	bl	800a9da <_Bfree>
 800a31e:	e6ae      	b.n	800a07e <_dtoa_r+0x68e>
 800a320:	2600      	movs	r6, #0
 800a322:	4637      	mov	r7, r6
 800a324:	e7e1      	b.n	800a2ea <_dtoa_r+0x8fa>
 800a326:	46ba      	mov	sl, r7
 800a328:	4637      	mov	r7, r6
 800a32a:	e5b1      	b.n	8009e90 <_dtoa_r+0x4a0>
 800a32c:	40240000 	.word	0x40240000
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	f8cd 8010 	str.w	r8, [sp, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 80f3 	beq.w	800a522 <_dtoa_r+0xb32>
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	dd05      	ble.n	800a34c <_dtoa_r+0x95c>
 800a340:	4639      	mov	r1, r7
 800a342:	462a      	mov	r2, r5
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fcd5 	bl	800acf4 <__lshift>
 800a34a:	4607      	mov	r7, r0
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d04c      	beq.n	800a3ec <_dtoa_r+0x9fc>
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fb0c 	bl	800a972 <_Balloc>
 800a35a:	4605      	mov	r5, r0
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	f107 010c 	add.w	r1, r7, #12
 800a362:	3202      	adds	r2, #2
 800a364:	0092      	lsls	r2, r2, #2
 800a366:	300c      	adds	r0, #12
 800a368:	f000 faf8 	bl	800a95c <memcpy>
 800a36c:	2201      	movs	r2, #1
 800a36e:	4629      	mov	r1, r5
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fcbf 	bl	800acf4 <__lshift>
 800a376:	46b9      	mov	r9, r7
 800a378:	4607      	mov	r7, r0
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	9307      	str	r3, [sp, #28]
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	9308      	str	r3, [sp, #32]
 800a386:	4631      	mov	r1, r6
 800a388:	4658      	mov	r0, fp
 800a38a:	f7ff faa3 	bl	80098d4 <quorem>
 800a38e:	4649      	mov	r1, r9
 800a390:	4605      	mov	r5, r0
 800a392:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a396:	4658      	mov	r0, fp
 800a398:	f000 fd00 	bl	800ad9c <__mcmp>
 800a39c:	463a      	mov	r2, r7
 800a39e:	9002      	str	r0, [sp, #8]
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fd14 	bl	800add0 <__mdiff>
 800a3a8:	68c3      	ldr	r3, [r0, #12]
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	bb03      	cbnz	r3, 800a3f0 <_dtoa_r+0xa00>
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	9009      	str	r0, [sp, #36]	; 0x24
 800a3b2:	4658      	mov	r0, fp
 800a3b4:	f000 fcf2 	bl	800ad9c <__mcmp>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4620      	mov	r0, r4
 800a3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c2:	f000 fb0a 	bl	800a9da <_Bfree>
 800a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c8:	b9a3      	cbnz	r3, 800a3f4 <_dtoa_r+0xa04>
 800a3ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a3cc:	b992      	cbnz	r2, 800a3f4 <_dtoa_r+0xa04>
 800a3ce:	9a08      	ldr	r2, [sp, #32]
 800a3d0:	b982      	cbnz	r2, 800a3f4 <_dtoa_r+0xa04>
 800a3d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a3d6:	d029      	beq.n	800a42c <_dtoa_r+0xa3c>
 800a3d8:	9b02      	ldr	r3, [sp, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd01      	ble.n	800a3e2 <_dtoa_r+0x9f2>
 800a3de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a3e2:	9b07      	ldr	r3, [sp, #28]
 800a3e4:	1c5d      	adds	r5, r3, #1
 800a3e6:	f883 8000 	strb.w	r8, [r3]
 800a3ea:	e784      	b.n	800a2f6 <_dtoa_r+0x906>
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	e7c2      	b.n	800a376 <_dtoa_r+0x986>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e7e3      	b.n	800a3bc <_dtoa_r+0x9cc>
 800a3f4:	9a02      	ldr	r2, [sp, #8]
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	db04      	blt.n	800a404 <_dtoa_r+0xa14>
 800a3fa:	d123      	bne.n	800a444 <_dtoa_r+0xa54>
 800a3fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a3fe:	bb0a      	cbnz	r2, 800a444 <_dtoa_r+0xa54>
 800a400:	9a08      	ldr	r2, [sp, #32]
 800a402:	b9fa      	cbnz	r2, 800a444 <_dtoa_r+0xa54>
 800a404:	2b00      	cmp	r3, #0
 800a406:	ddec      	ble.n	800a3e2 <_dtoa_r+0x9f2>
 800a408:	4659      	mov	r1, fp
 800a40a:	2201      	movs	r2, #1
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fc71 	bl	800acf4 <__lshift>
 800a412:	4631      	mov	r1, r6
 800a414:	4683      	mov	fp, r0
 800a416:	f000 fcc1 	bl	800ad9c <__mcmp>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	dc03      	bgt.n	800a426 <_dtoa_r+0xa36>
 800a41e:	d1e0      	bne.n	800a3e2 <_dtoa_r+0x9f2>
 800a420:	f018 0f01 	tst.w	r8, #1
 800a424:	d0dd      	beq.n	800a3e2 <_dtoa_r+0x9f2>
 800a426:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a42a:	d1d8      	bne.n	800a3de <_dtoa_r+0x9ee>
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	9a07      	ldr	r2, [sp, #28]
 800a430:	1c5d      	adds	r5, r3, #1
 800a432:	2339      	movs	r3, #57	; 0x39
 800a434:	7013      	strb	r3, [r2, #0]
 800a436:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a43a:	1e6a      	subs	r2, r5, #1
 800a43c:	2b39      	cmp	r3, #57	; 0x39
 800a43e:	d04d      	beq.n	800a4dc <_dtoa_r+0xaec>
 800a440:	3301      	adds	r3, #1
 800a442:	e052      	b.n	800a4ea <_dtoa_r+0xafa>
 800a444:	9a07      	ldr	r2, [sp, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f102 0501 	add.w	r5, r2, #1
 800a44c:	dd06      	ble.n	800a45c <_dtoa_r+0xa6c>
 800a44e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a452:	d0eb      	beq.n	800a42c <_dtoa_r+0xa3c>
 800a454:	f108 0801 	add.w	r8, r8, #1
 800a458:	9b07      	ldr	r3, [sp, #28]
 800a45a:	e7c4      	b.n	800a3e6 <_dtoa_r+0x9f6>
 800a45c:	9b06      	ldr	r3, [sp, #24]
 800a45e:	9a04      	ldr	r2, [sp, #16]
 800a460:	1aeb      	subs	r3, r5, r3
 800a462:	4293      	cmp	r3, r2
 800a464:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a468:	d021      	beq.n	800a4ae <_dtoa_r+0xabe>
 800a46a:	4659      	mov	r1, fp
 800a46c:	2300      	movs	r3, #0
 800a46e:	220a      	movs	r2, #10
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fac9 	bl	800aa08 <__multadd>
 800a476:	45b9      	cmp	r9, r7
 800a478:	4683      	mov	fp, r0
 800a47a:	f04f 0300 	mov.w	r3, #0
 800a47e:	f04f 020a 	mov.w	r2, #10
 800a482:	4649      	mov	r1, r9
 800a484:	4620      	mov	r0, r4
 800a486:	d105      	bne.n	800a494 <_dtoa_r+0xaa4>
 800a488:	f000 fabe 	bl	800aa08 <__multadd>
 800a48c:	4681      	mov	r9, r0
 800a48e:	4607      	mov	r7, r0
 800a490:	9507      	str	r5, [sp, #28]
 800a492:	e778      	b.n	800a386 <_dtoa_r+0x996>
 800a494:	f000 fab8 	bl	800aa08 <__multadd>
 800a498:	4639      	mov	r1, r7
 800a49a:	4681      	mov	r9, r0
 800a49c:	2300      	movs	r3, #0
 800a49e:	220a      	movs	r2, #10
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fab1 	bl	800aa08 <__multadd>
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	e7f2      	b.n	800a490 <_dtoa_r+0xaa0>
 800a4aa:	f04f 0900 	mov.w	r9, #0
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 fc1e 	bl	800acf4 <__lshift>
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4683      	mov	fp, r0
 800a4bc:	f000 fc6e 	bl	800ad9c <__mcmp>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	dcb8      	bgt.n	800a436 <_dtoa_r+0xa46>
 800a4c4:	d102      	bne.n	800a4cc <_dtoa_r+0xadc>
 800a4c6:	f018 0f01 	tst.w	r8, #1
 800a4ca:	d1b4      	bne.n	800a436 <_dtoa_r+0xa46>
 800a4cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4d0:	1e6a      	subs	r2, r5, #1
 800a4d2:	2b30      	cmp	r3, #48	; 0x30
 800a4d4:	f47f af0f 	bne.w	800a2f6 <_dtoa_r+0x906>
 800a4d8:	4615      	mov	r5, r2
 800a4da:	e7f7      	b.n	800a4cc <_dtoa_r+0xadc>
 800a4dc:	9b06      	ldr	r3, [sp, #24]
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d105      	bne.n	800a4ee <_dtoa_r+0xafe>
 800a4e2:	2331      	movs	r3, #49	; 0x31
 800a4e4:	9a06      	ldr	r2, [sp, #24]
 800a4e6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ea:	7013      	strb	r3, [r2, #0]
 800a4ec:	e703      	b.n	800a2f6 <_dtoa_r+0x906>
 800a4ee:	4615      	mov	r5, r2
 800a4f0:	e7a1      	b.n	800a436 <_dtoa_r+0xa46>
 800a4f2:	4b17      	ldr	r3, [pc, #92]	; (800a550 <_dtoa_r+0xb60>)
 800a4f4:	f7ff bae1 	b.w	8009aba <_dtoa_r+0xca>
 800a4f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f47f aabb 	bne.w	8009a76 <_dtoa_r+0x86>
 800a500:	4b14      	ldr	r3, [pc, #80]	; (800a554 <_dtoa_r+0xb64>)
 800a502:	f7ff bada 	b.w	8009aba <_dtoa_r+0xca>
 800a506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a508:	2b01      	cmp	r3, #1
 800a50a:	f77f ae3f 	ble.w	800a18c <_dtoa_r+0x79c>
 800a50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	e653      	b.n	800a1bc <_dtoa_r+0x7cc>
 800a514:	9b04      	ldr	r3, [sp, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dc03      	bgt.n	800a522 <_dtoa_r+0xb32>
 800a51a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	f73f aed5 	bgt.w	800a2cc <_dtoa_r+0x8dc>
 800a522:	9d06      	ldr	r5, [sp, #24]
 800a524:	4631      	mov	r1, r6
 800a526:	4658      	mov	r0, fp
 800a528:	f7ff f9d4 	bl	80098d4 <quorem>
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a532:	f805 8b01 	strb.w	r8, [r5], #1
 800a536:	9a04      	ldr	r2, [sp, #16]
 800a538:	1aeb      	subs	r3, r5, r3
 800a53a:	429a      	cmp	r2, r3
 800a53c:	ddb5      	ble.n	800a4aa <_dtoa_r+0xaba>
 800a53e:	4659      	mov	r1, fp
 800a540:	2300      	movs	r3, #0
 800a542:	220a      	movs	r2, #10
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fa5f 	bl	800aa08 <__multadd>
 800a54a:	4683      	mov	fp, r0
 800a54c:	e7ea      	b.n	800a524 <_dtoa_r+0xb34>
 800a54e:	bf00      	nop
 800a550:	0800d194 	.word	0x0800d194
 800a554:	0800d1b8 	.word	0x0800d1b8

0800a558 <__sflush_r>:
 800a558:	898a      	ldrh	r2, [r1, #12]
 800a55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	4605      	mov	r5, r0
 800a560:	0710      	lsls	r0, r2, #28
 800a562:	460c      	mov	r4, r1
 800a564:	d458      	bmi.n	800a618 <__sflush_r+0xc0>
 800a566:	684b      	ldr	r3, [r1, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc05      	bgt.n	800a578 <__sflush_r+0x20>
 800a56c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	dc02      	bgt.n	800a578 <__sflush_r+0x20>
 800a572:	2000      	movs	r0, #0
 800a574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d0f9      	beq.n	800a572 <__sflush_r+0x1a>
 800a57e:	2300      	movs	r3, #0
 800a580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a584:	682f      	ldr	r7, [r5, #0]
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	d032      	beq.n	800a5f2 <__sflush_r+0x9a>
 800a58c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	075a      	lsls	r2, r3, #29
 800a592:	d505      	bpl.n	800a5a0 <__sflush_r+0x48>
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	1ac0      	subs	r0, r0, r3
 800a598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a59a:	b10b      	cbz	r3, 800a5a0 <__sflush_r+0x48>
 800a59c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a59e:	1ac0      	subs	r0, r0, r3
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a6:	6a21      	ldr	r1, [r4, #32]
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b0      	blx	r6
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	d106      	bne.n	800a5c0 <__sflush_r+0x68>
 800a5b2:	6829      	ldr	r1, [r5, #0]
 800a5b4:	291d      	cmp	r1, #29
 800a5b6:	d848      	bhi.n	800a64a <__sflush_r+0xf2>
 800a5b8:	4a29      	ldr	r2, [pc, #164]	; (800a660 <__sflush_r+0x108>)
 800a5ba:	40ca      	lsrs	r2, r1
 800a5bc:	07d6      	lsls	r6, r2, #31
 800a5be:	d544      	bpl.n	800a64a <__sflush_r+0xf2>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	6062      	str	r2, [r4, #4]
 800a5c4:	6922      	ldr	r2, [r4, #16]
 800a5c6:	04d9      	lsls	r1, r3, #19
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	d504      	bpl.n	800a5d6 <__sflush_r+0x7e>
 800a5cc:	1c42      	adds	r2, r0, #1
 800a5ce:	d101      	bne.n	800a5d4 <__sflush_r+0x7c>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b903      	cbnz	r3, 800a5d6 <__sflush_r+0x7e>
 800a5d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d8:	602f      	str	r7, [r5, #0]
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d0c9      	beq.n	800a572 <__sflush_r+0x1a>
 800a5de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e2:	4299      	cmp	r1, r3
 800a5e4:	d002      	beq.n	800a5ec <__sflush_r+0x94>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 fcae 	bl	800af48 <_free_r>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f0:	e7c0      	b.n	800a574 <__sflush_r+0x1c>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b0      	blx	r6
 800a5f8:	1c41      	adds	r1, r0, #1
 800a5fa:	d1c8      	bne.n	800a58e <__sflush_r+0x36>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0c5      	beq.n	800a58e <__sflush_r+0x36>
 800a602:	2b1d      	cmp	r3, #29
 800a604:	d001      	beq.n	800a60a <__sflush_r+0xb2>
 800a606:	2b16      	cmp	r3, #22
 800a608:	d101      	bne.n	800a60e <__sflush_r+0xb6>
 800a60a:	602f      	str	r7, [r5, #0]
 800a60c:	e7b1      	b.n	800a572 <__sflush_r+0x1a>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	e7ad      	b.n	800a574 <__sflush_r+0x1c>
 800a618:	690f      	ldr	r7, [r1, #16]
 800a61a:	2f00      	cmp	r7, #0
 800a61c:	d0a9      	beq.n	800a572 <__sflush_r+0x1a>
 800a61e:	0793      	lsls	r3, r2, #30
 800a620:	bf18      	it	ne
 800a622:	2300      	movne	r3, #0
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	bf08      	it	eq
 800a628:	694b      	ldreq	r3, [r1, #20]
 800a62a:	eba6 0807 	sub.w	r8, r6, r7
 800a62e:	600f      	str	r7, [r1, #0]
 800a630:	608b      	str	r3, [r1, #8]
 800a632:	f1b8 0f00 	cmp.w	r8, #0
 800a636:	dd9c      	ble.n	800a572 <__sflush_r+0x1a>
 800a638:	4643      	mov	r3, r8
 800a63a:	463a      	mov	r2, r7
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	4628      	mov	r0, r5
 800a640:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a642:	47b0      	blx	r6
 800a644:	2800      	cmp	r0, #0
 800a646:	dc06      	bgt.n	800a656 <__sflush_r+0xfe>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e78e      	b.n	800a574 <__sflush_r+0x1c>
 800a656:	4407      	add	r7, r0
 800a658:	eba8 0800 	sub.w	r8, r8, r0
 800a65c:	e7e9      	b.n	800a632 <__sflush_r+0xda>
 800a65e:	bf00      	nop
 800a660:	20400001 	.word	0x20400001

0800a664 <_fflush_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	4605      	mov	r5, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	b1db      	cbz	r3, 800a6a6 <_fflush_r+0x42>
 800a66e:	b118      	cbz	r0, 800a678 <_fflush_r+0x14>
 800a670:	6983      	ldr	r3, [r0, #24]
 800a672:	b90b      	cbnz	r3, 800a678 <_fflush_r+0x14>
 800a674:	f000 f860 	bl	800a738 <__sinit>
 800a678:	4b0c      	ldr	r3, [pc, #48]	; (800a6ac <_fflush_r+0x48>)
 800a67a:	429c      	cmp	r4, r3
 800a67c:	d109      	bne.n	800a692 <_fflush_r+0x2e>
 800a67e:	686c      	ldr	r4, [r5, #4]
 800a680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a684:	b17b      	cbz	r3, 800a6a6 <_fflush_r+0x42>
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68e:	f7ff bf63 	b.w	800a558 <__sflush_r>
 800a692:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <_fflush_r+0x4c>)
 800a694:	429c      	cmp	r4, r3
 800a696:	d101      	bne.n	800a69c <_fflush_r+0x38>
 800a698:	68ac      	ldr	r4, [r5, #8]
 800a69a:	e7f1      	b.n	800a680 <_fflush_r+0x1c>
 800a69c:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <_fflush_r+0x50>)
 800a69e:	429c      	cmp	r4, r3
 800a6a0:	bf08      	it	eq
 800a6a2:	68ec      	ldreq	r4, [r5, #12]
 800a6a4:	e7ec      	b.n	800a680 <_fflush_r+0x1c>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800d1e8 	.word	0x0800d1e8
 800a6b0:	0800d208 	.word	0x0800d208
 800a6b4:	0800d1c8 	.word	0x0800d1c8

0800a6b8 <std>:
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	4604      	mov	r4, r0
 800a6be:	e9c0 3300 	strd	r3, r3, [r0]
 800a6c2:	6083      	str	r3, [r0, #8]
 800a6c4:	8181      	strh	r1, [r0, #12]
 800a6c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6c8:	81c2      	strh	r2, [r0, #14]
 800a6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ce:	6183      	str	r3, [r0, #24]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	305c      	adds	r0, #92	; 0x5c
 800a6d6:	f7fe fb69 	bl	8008dac <memset>
 800a6da:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <std+0x38>)
 800a6dc:	6224      	str	r4, [r4, #32]
 800a6de:	6263      	str	r3, [r4, #36]	; 0x24
 800a6e0:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <std+0x3c>)
 800a6e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6e4:	4b04      	ldr	r3, [pc, #16]	; (800a6f8 <std+0x40>)
 800a6e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <std+0x44>)
 800a6ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	bf00      	nop
 800a6f0:	0800b331 	.word	0x0800b331
 800a6f4:	0800b353 	.word	0x0800b353
 800a6f8:	0800b38b 	.word	0x0800b38b
 800a6fc:	0800b3af 	.word	0x0800b3af

0800a700 <_cleanup_r>:
 800a700:	4901      	ldr	r1, [pc, #4]	; (800a708 <_cleanup_r+0x8>)
 800a702:	f000 b885 	b.w	800a810 <_fwalk_reent>
 800a706:	bf00      	nop
 800a708:	0800a665 	.word	0x0800a665

0800a70c <__sfmoreglue>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	2568      	movs	r5, #104	; 0x68
 800a710:	1e4a      	subs	r2, r1, #1
 800a712:	4355      	muls	r5, r2
 800a714:	460e      	mov	r6, r1
 800a716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a71a:	f000 fc61 	bl	800afe0 <_malloc_r>
 800a71e:	4604      	mov	r4, r0
 800a720:	b140      	cbz	r0, 800a734 <__sfmoreglue+0x28>
 800a722:	2100      	movs	r1, #0
 800a724:	e9c0 1600 	strd	r1, r6, [r0]
 800a728:	300c      	adds	r0, #12
 800a72a:	60a0      	str	r0, [r4, #8]
 800a72c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a730:	f7fe fb3c 	bl	8008dac <memset>
 800a734:	4620      	mov	r0, r4
 800a736:	bd70      	pop	{r4, r5, r6, pc}

0800a738 <__sinit>:
 800a738:	6983      	ldr	r3, [r0, #24]
 800a73a:	b510      	push	{r4, lr}
 800a73c:	4604      	mov	r4, r0
 800a73e:	bb33      	cbnz	r3, 800a78e <__sinit+0x56>
 800a740:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a744:	6503      	str	r3, [r0, #80]	; 0x50
 800a746:	4b12      	ldr	r3, [pc, #72]	; (800a790 <__sinit+0x58>)
 800a748:	4a12      	ldr	r2, [pc, #72]	; (800a794 <__sinit+0x5c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6282      	str	r2, [r0, #40]	; 0x28
 800a74e:	4298      	cmp	r0, r3
 800a750:	bf04      	itt	eq
 800a752:	2301      	moveq	r3, #1
 800a754:	6183      	streq	r3, [r0, #24]
 800a756:	f000 f81f 	bl	800a798 <__sfp>
 800a75a:	6060      	str	r0, [r4, #4]
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 f81b 	bl	800a798 <__sfp>
 800a762:	60a0      	str	r0, [r4, #8]
 800a764:	4620      	mov	r0, r4
 800a766:	f000 f817 	bl	800a798 <__sfp>
 800a76a:	2200      	movs	r2, #0
 800a76c:	60e0      	str	r0, [r4, #12]
 800a76e:	2104      	movs	r1, #4
 800a770:	6860      	ldr	r0, [r4, #4]
 800a772:	f7ff ffa1 	bl	800a6b8 <std>
 800a776:	2201      	movs	r2, #1
 800a778:	2109      	movs	r1, #9
 800a77a:	68a0      	ldr	r0, [r4, #8]
 800a77c:	f7ff ff9c 	bl	800a6b8 <std>
 800a780:	2202      	movs	r2, #2
 800a782:	2112      	movs	r1, #18
 800a784:	68e0      	ldr	r0, [r4, #12]
 800a786:	f7ff ff97 	bl	800a6b8 <std>
 800a78a:	2301      	movs	r3, #1
 800a78c:	61a3      	str	r3, [r4, #24]
 800a78e:	bd10      	pop	{r4, pc}
 800a790:	0800d180 	.word	0x0800d180
 800a794:	0800a701 	.word	0x0800a701

0800a798 <__sfp>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <__sfp+0x70>)
 800a79c:	4607      	mov	r7, r0
 800a79e:	681e      	ldr	r6, [r3, #0]
 800a7a0:	69b3      	ldr	r3, [r6, #24]
 800a7a2:	b913      	cbnz	r3, 800a7aa <__sfp+0x12>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff ffc7 	bl	800a738 <__sinit>
 800a7aa:	3648      	adds	r6, #72	; 0x48
 800a7ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	d503      	bpl.n	800a7bc <__sfp+0x24>
 800a7b4:	6833      	ldr	r3, [r6, #0]
 800a7b6:	b133      	cbz	r3, 800a7c6 <__sfp+0x2e>
 800a7b8:	6836      	ldr	r6, [r6, #0]
 800a7ba:	e7f7      	b.n	800a7ac <__sfp+0x14>
 800a7bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7c0:	b16d      	cbz	r5, 800a7de <__sfp+0x46>
 800a7c2:	3468      	adds	r4, #104	; 0x68
 800a7c4:	e7f4      	b.n	800a7b0 <__sfp+0x18>
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff ff9f 	bl	800a70c <__sfmoreglue>
 800a7ce:	6030      	str	r0, [r6, #0]
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d1f1      	bne.n	800a7b8 <__sfp+0x20>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	603b      	str	r3, [r7, #0]
 800a7da:	4620      	mov	r0, r4
 800a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <__sfp+0x74>)
 800a7e0:	6665      	str	r5, [r4, #100]	; 0x64
 800a7e2:	e9c4 5500 	strd	r5, r5, [r4]
 800a7e6:	60a5      	str	r5, [r4, #8]
 800a7e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7f8:	f7fe fad8 	bl	8008dac <memset>
 800a7fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a804:	e7e9      	b.n	800a7da <__sfp+0x42>
 800a806:	bf00      	nop
 800a808:	0800d180 	.word	0x0800d180
 800a80c:	ffff0001 	.word	0xffff0001

0800a810 <_fwalk_reent>:
 800a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a814:	4680      	mov	r8, r0
 800a816:	4689      	mov	r9, r1
 800a818:	2600      	movs	r6, #0
 800a81a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a81e:	b914      	cbnz	r4, 800a826 <_fwalk_reent+0x16>
 800a820:	4630      	mov	r0, r6
 800a822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a826:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a82a:	3f01      	subs	r7, #1
 800a82c:	d501      	bpl.n	800a832 <_fwalk_reent+0x22>
 800a82e:	6824      	ldr	r4, [r4, #0]
 800a830:	e7f5      	b.n	800a81e <_fwalk_reent+0xe>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d907      	bls.n	800a848 <_fwalk_reent+0x38>
 800a838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a83c:	3301      	adds	r3, #1
 800a83e:	d003      	beq.n	800a848 <_fwalk_reent+0x38>
 800a840:	4629      	mov	r1, r5
 800a842:	4640      	mov	r0, r8
 800a844:	47c8      	blx	r9
 800a846:	4306      	orrs	r6, r0
 800a848:	3568      	adds	r5, #104	; 0x68
 800a84a:	e7ee      	b.n	800a82a <_fwalk_reent+0x1a>

0800a84c <_localeconv_r>:
 800a84c:	4b04      	ldr	r3, [pc, #16]	; (800a860 <_localeconv_r+0x14>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6a18      	ldr	r0, [r3, #32]
 800a852:	4b04      	ldr	r3, [pc, #16]	; (800a864 <_localeconv_r+0x18>)
 800a854:	2800      	cmp	r0, #0
 800a856:	bf08      	it	eq
 800a858:	4618      	moveq	r0, r3
 800a85a:	30f0      	adds	r0, #240	; 0xf0
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	20000038 	.word	0x20000038
 800a864:	2000009c 	.word	0x2000009c

0800a868 <__swhatbuf_r>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	460e      	mov	r6, r1
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	b096      	sub	sp, #88	; 0x58
 800a872:	2900      	cmp	r1, #0
 800a874:	4614      	mov	r4, r2
 800a876:	461d      	mov	r5, r3
 800a878:	da07      	bge.n	800a88a <__swhatbuf_r+0x22>
 800a87a:	2300      	movs	r3, #0
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	89b3      	ldrh	r3, [r6, #12]
 800a880:	061a      	lsls	r2, r3, #24
 800a882:	d410      	bmi.n	800a8a6 <__swhatbuf_r+0x3e>
 800a884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a888:	e00e      	b.n	800a8a8 <__swhatbuf_r+0x40>
 800a88a:	466a      	mov	r2, sp
 800a88c:	f000 fdb6 	bl	800b3fc <_fstat_r>
 800a890:	2800      	cmp	r0, #0
 800a892:	dbf2      	blt.n	800a87a <__swhatbuf_r+0x12>
 800a894:	9a01      	ldr	r2, [sp, #4]
 800a896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a89a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a89e:	425a      	negs	r2, r3
 800a8a0:	415a      	adcs	r2, r3
 800a8a2:	602a      	str	r2, [r5, #0]
 800a8a4:	e7ee      	b.n	800a884 <__swhatbuf_r+0x1c>
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	b016      	add	sp, #88	; 0x58
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}

0800a8b0 <__smakebuf_r>:
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8b4:	079d      	lsls	r5, r3, #30
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	d507      	bpl.n	800a8cc <__smakebuf_r+0x1c>
 800a8bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	6123      	str	r3, [r4, #16]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	6163      	str	r3, [r4, #20]
 800a8c8:	b002      	add	sp, #8
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	ab01      	add	r3, sp, #4
 800a8ce:	466a      	mov	r2, sp
 800a8d0:	f7ff ffca 	bl	800a868 <__swhatbuf_r>
 800a8d4:	9900      	ldr	r1, [sp, #0]
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f000 fb81 	bl	800afe0 <_malloc_r>
 800a8de:	b948      	cbnz	r0, 800a8f4 <__smakebuf_r+0x44>
 800a8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e4:	059a      	lsls	r2, r3, #22
 800a8e6:	d4ef      	bmi.n	800a8c8 <__smakebuf_r+0x18>
 800a8e8:	f023 0303 	bic.w	r3, r3, #3
 800a8ec:	f043 0302 	orr.w	r3, r3, #2
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	e7e3      	b.n	800a8bc <__smakebuf_r+0xc>
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <__smakebuf_r+0x7c>)
 800a8f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	6020      	str	r0, [r4, #0]
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	6120      	str	r0, [r4, #16]
 800a906:	6163      	str	r3, [r4, #20]
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	b15b      	cbz	r3, 800a924 <__smakebuf_r+0x74>
 800a90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a910:	4630      	mov	r0, r6
 800a912:	f000 fd85 	bl	800b420 <_isatty_r>
 800a916:	b128      	cbz	r0, 800a924 <__smakebuf_r+0x74>
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	f043 0301 	orr.w	r3, r3, #1
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	431d      	orrs	r5, r3
 800a928:	81a5      	strh	r5, [r4, #12]
 800a92a:	e7cd      	b.n	800a8c8 <__smakebuf_r+0x18>
 800a92c:	0800a701 	.word	0x0800a701

0800a930 <malloc>:
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <malloc+0xc>)
 800a932:	4601      	mov	r1, r0
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f000 bb53 	b.w	800afe0 <_malloc_r>
 800a93a:	bf00      	nop
 800a93c:	20000038 	.word	0x20000038

0800a940 <memchr>:
 800a940:	b510      	push	{r4, lr}
 800a942:	b2c9      	uxtb	r1, r1
 800a944:	4402      	add	r2, r0
 800a946:	4290      	cmp	r0, r2
 800a948:	4603      	mov	r3, r0
 800a94a:	d101      	bne.n	800a950 <memchr+0x10>
 800a94c:	2300      	movs	r3, #0
 800a94e:	e003      	b.n	800a958 <memchr+0x18>
 800a950:	781c      	ldrb	r4, [r3, #0]
 800a952:	3001      	adds	r0, #1
 800a954:	428c      	cmp	r4, r1
 800a956:	d1f6      	bne.n	800a946 <memchr+0x6>
 800a958:	4618      	mov	r0, r3
 800a95a:	bd10      	pop	{r4, pc}

0800a95c <memcpy>:
 800a95c:	b510      	push	{r4, lr}
 800a95e:	1e43      	subs	r3, r0, #1
 800a960:	440a      	add	r2, r1
 800a962:	4291      	cmp	r1, r2
 800a964:	d100      	bne.n	800a968 <memcpy+0xc>
 800a966:	bd10      	pop	{r4, pc}
 800a968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a970:	e7f7      	b.n	800a962 <memcpy+0x6>

0800a972 <_Balloc>:
 800a972:	b570      	push	{r4, r5, r6, lr}
 800a974:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a976:	4604      	mov	r4, r0
 800a978:	460e      	mov	r6, r1
 800a97a:	b93d      	cbnz	r5, 800a98c <_Balloc+0x1a>
 800a97c:	2010      	movs	r0, #16
 800a97e:	f7ff ffd7 	bl	800a930 <malloc>
 800a982:	6260      	str	r0, [r4, #36]	; 0x24
 800a984:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a988:	6005      	str	r5, [r0, #0]
 800a98a:	60c5      	str	r5, [r0, #12]
 800a98c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a98e:	68eb      	ldr	r3, [r5, #12]
 800a990:	b183      	cbz	r3, 800a9b4 <_Balloc+0x42>
 800a992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a99a:	b9b8      	cbnz	r0, 800a9cc <_Balloc+0x5a>
 800a99c:	2101      	movs	r1, #1
 800a99e:	fa01 f506 	lsl.w	r5, r1, r6
 800a9a2:	1d6a      	adds	r2, r5, #5
 800a9a4:	0092      	lsls	r2, r2, #2
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 fabf 	bl	800af2a <_calloc_r>
 800a9ac:	b160      	cbz	r0, 800a9c8 <_Balloc+0x56>
 800a9ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a9b2:	e00e      	b.n	800a9d2 <_Balloc+0x60>
 800a9b4:	2221      	movs	r2, #33	; 0x21
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fab6 	bl	800af2a <_calloc_r>
 800a9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9c0:	60e8      	str	r0, [r5, #12]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e4      	bne.n	800a992 <_Balloc+0x20>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	6802      	ldr	r2, [r0, #0]
 800a9ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9d8:	e7f7      	b.n	800a9ca <_Balloc+0x58>

0800a9da <_Bfree>:
 800a9da:	b570      	push	{r4, r5, r6, lr}
 800a9dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	b93c      	cbnz	r4, 800a9f4 <_Bfree+0x1a>
 800a9e4:	2010      	movs	r0, #16
 800a9e6:	f7ff ffa3 	bl	800a930 <malloc>
 800a9ea:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9f0:	6004      	str	r4, [r0, #0]
 800a9f2:	60c4      	str	r4, [r0, #12]
 800a9f4:	b13d      	cbz	r5, 800aa06 <_Bfree+0x2c>
 800a9f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a9f8:	686a      	ldr	r2, [r5, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa00:	6029      	str	r1, [r5, #0]
 800aa02:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa06:	bd70      	pop	{r4, r5, r6, pc}

0800aa08 <__multadd>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	461f      	mov	r7, r3
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	2300      	movs	r3, #0
 800aa14:	690d      	ldr	r5, [r1, #16]
 800aa16:	f101 0c14 	add.w	ip, r1, #20
 800aa1a:	f8dc 0000 	ldr.w	r0, [ip]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	b281      	uxth	r1, r0
 800aa22:	fb02 7101 	mla	r1, r2, r1, r7
 800aa26:	0c00      	lsrs	r0, r0, #16
 800aa28:	0c0f      	lsrs	r7, r1, #16
 800aa2a:	fb02 7000 	mla	r0, r2, r0, r7
 800aa2e:	b289      	uxth	r1, r1
 800aa30:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aa34:	429d      	cmp	r5, r3
 800aa36:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aa3a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa3e:	dcec      	bgt.n	800aa1a <__multadd+0x12>
 800aa40:	b1d7      	cbz	r7, 800aa78 <__multadd+0x70>
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dc12      	bgt.n	800aa6e <__multadd+0x66>
 800aa48:	6861      	ldr	r1, [r4, #4]
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	3101      	adds	r1, #1
 800aa4e:	f7ff ff90 	bl	800a972 <_Balloc>
 800aa52:	4680      	mov	r8, r0
 800aa54:	6922      	ldr	r2, [r4, #16]
 800aa56:	f104 010c 	add.w	r1, r4, #12
 800aa5a:	3202      	adds	r2, #2
 800aa5c:	0092      	lsls	r2, r2, #2
 800aa5e:	300c      	adds	r0, #12
 800aa60:	f7ff ff7c 	bl	800a95c <memcpy>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ffb7 	bl	800a9da <_Bfree>
 800aa6c:	4644      	mov	r4, r8
 800aa6e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa72:	3501      	adds	r5, #1
 800aa74:	615f      	str	r7, [r3, #20]
 800aa76:	6125      	str	r5, [r4, #16]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa7e <__hi0bits>:
 800aa7e:	0c02      	lsrs	r2, r0, #16
 800aa80:	0412      	lsls	r2, r2, #16
 800aa82:	4603      	mov	r3, r0
 800aa84:	b9b2      	cbnz	r2, 800aab4 <__hi0bits+0x36>
 800aa86:	0403      	lsls	r3, r0, #16
 800aa88:	2010      	movs	r0, #16
 800aa8a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa8e:	bf04      	itt	eq
 800aa90:	021b      	lsleq	r3, r3, #8
 800aa92:	3008      	addeq	r0, #8
 800aa94:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa98:	bf04      	itt	eq
 800aa9a:	011b      	lsleq	r3, r3, #4
 800aa9c:	3004      	addeq	r0, #4
 800aa9e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aaa2:	bf04      	itt	eq
 800aaa4:	009b      	lsleq	r3, r3, #2
 800aaa6:	3002      	addeq	r0, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	db06      	blt.n	800aaba <__hi0bits+0x3c>
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	d503      	bpl.n	800aab8 <__hi0bits+0x3a>
 800aab0:	3001      	adds	r0, #1
 800aab2:	4770      	bx	lr
 800aab4:	2000      	movs	r0, #0
 800aab6:	e7e8      	b.n	800aa8a <__hi0bits+0xc>
 800aab8:	2020      	movs	r0, #32
 800aaba:	4770      	bx	lr

0800aabc <__lo0bits>:
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	4601      	mov	r1, r0
 800aac0:	f013 0207 	ands.w	r2, r3, #7
 800aac4:	d00b      	beq.n	800aade <__lo0bits+0x22>
 800aac6:	07da      	lsls	r2, r3, #31
 800aac8:	d423      	bmi.n	800ab12 <__lo0bits+0x56>
 800aaca:	0798      	lsls	r0, r3, #30
 800aacc:	bf49      	itett	mi
 800aace:	085b      	lsrmi	r3, r3, #1
 800aad0:	089b      	lsrpl	r3, r3, #2
 800aad2:	2001      	movmi	r0, #1
 800aad4:	600b      	strmi	r3, [r1, #0]
 800aad6:	bf5c      	itt	pl
 800aad8:	600b      	strpl	r3, [r1, #0]
 800aada:	2002      	movpl	r0, #2
 800aadc:	4770      	bx	lr
 800aade:	b298      	uxth	r0, r3
 800aae0:	b9a8      	cbnz	r0, 800ab0e <__lo0bits+0x52>
 800aae2:	2010      	movs	r0, #16
 800aae4:	0c1b      	lsrs	r3, r3, #16
 800aae6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aaea:	bf04      	itt	eq
 800aaec:	0a1b      	lsreq	r3, r3, #8
 800aaee:	3008      	addeq	r0, #8
 800aaf0:	071a      	lsls	r2, r3, #28
 800aaf2:	bf04      	itt	eq
 800aaf4:	091b      	lsreq	r3, r3, #4
 800aaf6:	3004      	addeq	r0, #4
 800aaf8:	079a      	lsls	r2, r3, #30
 800aafa:	bf04      	itt	eq
 800aafc:	089b      	lsreq	r3, r3, #2
 800aafe:	3002      	addeq	r0, #2
 800ab00:	07da      	lsls	r2, r3, #31
 800ab02:	d402      	bmi.n	800ab0a <__lo0bits+0x4e>
 800ab04:	085b      	lsrs	r3, r3, #1
 800ab06:	d006      	beq.n	800ab16 <__lo0bits+0x5a>
 800ab08:	3001      	adds	r0, #1
 800ab0a:	600b      	str	r3, [r1, #0]
 800ab0c:	4770      	bx	lr
 800ab0e:	4610      	mov	r0, r2
 800ab10:	e7e9      	b.n	800aae6 <__lo0bits+0x2a>
 800ab12:	2000      	movs	r0, #0
 800ab14:	4770      	bx	lr
 800ab16:	2020      	movs	r0, #32
 800ab18:	4770      	bx	lr

0800ab1a <__i2b>:
 800ab1a:	b510      	push	{r4, lr}
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	2101      	movs	r1, #1
 800ab20:	f7ff ff27 	bl	800a972 <_Balloc>
 800ab24:	2201      	movs	r2, #1
 800ab26:	6144      	str	r4, [r0, #20]
 800ab28:	6102      	str	r2, [r0, #16]
 800ab2a:	bd10      	pop	{r4, pc}

0800ab2c <__multiply>:
 800ab2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	4614      	mov	r4, r2
 800ab32:	690a      	ldr	r2, [r1, #16]
 800ab34:	6923      	ldr	r3, [r4, #16]
 800ab36:	4688      	mov	r8, r1
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	bfbe      	ittt	lt
 800ab3c:	460b      	movlt	r3, r1
 800ab3e:	46a0      	movlt	r8, r4
 800ab40:	461c      	movlt	r4, r3
 800ab42:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab52:	eb07 0609 	add.w	r6, r7, r9
 800ab56:	42b3      	cmp	r3, r6
 800ab58:	bfb8      	it	lt
 800ab5a:	3101      	addlt	r1, #1
 800ab5c:	f7ff ff09 	bl	800a972 <_Balloc>
 800ab60:	f100 0514 	add.w	r5, r0, #20
 800ab64:	462b      	mov	r3, r5
 800ab66:	2200      	movs	r2, #0
 800ab68:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ab6c:	4573      	cmp	r3, lr
 800ab6e:	d316      	bcc.n	800ab9e <__multiply+0x72>
 800ab70:	f104 0214 	add.w	r2, r4, #20
 800ab74:	f108 0114 	add.w	r1, r8, #20
 800ab78:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ab7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	9b00      	ldr	r3, [sp, #0]
 800ab84:	9201      	str	r2, [sp, #4]
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d80c      	bhi.n	800aba4 <__multiply+0x78>
 800ab8a:	2e00      	cmp	r6, #0
 800ab8c:	dd03      	ble.n	800ab96 <__multiply+0x6a>
 800ab8e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d05d      	beq.n	800ac52 <__multiply+0x126>
 800ab96:	6106      	str	r6, [r0, #16]
 800ab98:	b003      	add	sp, #12
 800ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9e:	f843 2b04 	str.w	r2, [r3], #4
 800aba2:	e7e3      	b.n	800ab6c <__multiply+0x40>
 800aba4:	f8b2 b000 	ldrh.w	fp, [r2]
 800aba8:	f1bb 0f00 	cmp.w	fp, #0
 800abac:	d023      	beq.n	800abf6 <__multiply+0xca>
 800abae:	4689      	mov	r9, r1
 800abb0:	46ac      	mov	ip, r5
 800abb2:	f04f 0800 	mov.w	r8, #0
 800abb6:	f859 4b04 	ldr.w	r4, [r9], #4
 800abba:	f8dc a000 	ldr.w	sl, [ip]
 800abbe:	b2a3      	uxth	r3, r4
 800abc0:	fa1f fa8a 	uxth.w	sl, sl
 800abc4:	fb0b a303 	mla	r3, fp, r3, sl
 800abc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abcc:	f8dc 4000 	ldr.w	r4, [ip]
 800abd0:	4443      	add	r3, r8
 800abd2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800abd6:	fb0b 840a 	mla	r4, fp, sl, r8
 800abda:	46e2      	mov	sl, ip
 800abdc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800abe6:	454f      	cmp	r7, r9
 800abe8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800abec:	f84a 3b04 	str.w	r3, [sl], #4
 800abf0:	d82b      	bhi.n	800ac4a <__multiply+0x11e>
 800abf2:	f8cc 8004 	str.w	r8, [ip, #4]
 800abf6:	9b01      	ldr	r3, [sp, #4]
 800abf8:	3204      	adds	r2, #4
 800abfa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	d020      	beq.n	800ac46 <__multiply+0x11a>
 800ac04:	4689      	mov	r9, r1
 800ac06:	46a8      	mov	r8, r5
 800ac08:	f04f 0b00 	mov.w	fp, #0
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac12:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac1c:	46c4      	mov	ip, r8
 800ac1e:	445c      	add	r4, fp
 800ac20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac24:	f84c 3b04 	str.w	r3, [ip], #4
 800ac28:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac2c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac30:	0c1b      	lsrs	r3, r3, #16
 800ac32:	fb0a b303 	mla	r3, sl, r3, fp
 800ac36:	454f      	cmp	r7, r9
 800ac38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac3c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ac40:	d805      	bhi.n	800ac4e <__multiply+0x122>
 800ac42:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac46:	3504      	adds	r5, #4
 800ac48:	e79b      	b.n	800ab82 <__multiply+0x56>
 800ac4a:	46d4      	mov	ip, sl
 800ac4c:	e7b3      	b.n	800abb6 <__multiply+0x8a>
 800ac4e:	46e0      	mov	r8, ip
 800ac50:	e7dd      	b.n	800ac0e <__multiply+0xe2>
 800ac52:	3e01      	subs	r6, #1
 800ac54:	e799      	b.n	800ab8a <__multiply+0x5e>
	...

0800ac58 <__pow5mult>:
 800ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	f012 0203 	ands.w	r2, r2, #3
 800ac62:	4606      	mov	r6, r0
 800ac64:	460f      	mov	r7, r1
 800ac66:	d007      	beq.n	800ac78 <__pow5mult+0x20>
 800ac68:	4c21      	ldr	r4, [pc, #132]	; (800acf0 <__pow5mult+0x98>)
 800ac6a:	3a01      	subs	r2, #1
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac72:	f7ff fec9 	bl	800aa08 <__multadd>
 800ac76:	4607      	mov	r7, r0
 800ac78:	10ad      	asrs	r5, r5, #2
 800ac7a:	d035      	beq.n	800ace8 <__pow5mult+0x90>
 800ac7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac7e:	b93c      	cbnz	r4, 800ac90 <__pow5mult+0x38>
 800ac80:	2010      	movs	r0, #16
 800ac82:	f7ff fe55 	bl	800a930 <malloc>
 800ac86:	6270      	str	r0, [r6, #36]	; 0x24
 800ac88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac8c:	6004      	str	r4, [r0, #0]
 800ac8e:	60c4      	str	r4, [r0, #12]
 800ac90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac98:	b94c      	cbnz	r4, 800acae <__pow5mult+0x56>
 800ac9a:	f240 2171 	movw	r1, #625	; 0x271
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7ff ff3b 	bl	800ab1a <__i2b>
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	f8c8 0008 	str.w	r0, [r8, #8]
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	07eb      	lsls	r3, r5, #31
 800acb4:	d50a      	bpl.n	800accc <__pow5mult+0x74>
 800acb6:	4639      	mov	r1, r7
 800acb8:	4622      	mov	r2, r4
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff ff36 	bl	800ab2c <__multiply>
 800acc0:	4681      	mov	r9, r0
 800acc2:	4639      	mov	r1, r7
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff fe88 	bl	800a9da <_Bfree>
 800acca:	464f      	mov	r7, r9
 800accc:	106d      	asrs	r5, r5, #1
 800acce:	d00b      	beq.n	800ace8 <__pow5mult+0x90>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	b938      	cbnz	r0, 800ace4 <__pow5mult+0x8c>
 800acd4:	4622      	mov	r2, r4
 800acd6:	4621      	mov	r1, r4
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ff27 	bl	800ab2c <__multiply>
 800acde:	6020      	str	r0, [r4, #0]
 800ace0:	f8c0 8000 	str.w	r8, [r0]
 800ace4:	4604      	mov	r4, r0
 800ace6:	e7e4      	b.n	800acb2 <__pow5mult+0x5a>
 800ace8:	4638      	mov	r0, r7
 800acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acee:	bf00      	nop
 800acf0:	0800d318 	.word	0x0800d318

0800acf4 <__lshift>:
 800acf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf8:	460c      	mov	r4, r1
 800acfa:	4607      	mov	r7, r0
 800acfc:	4616      	mov	r6, r2
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad04:	eb0a 0903 	add.w	r9, sl, r3
 800ad08:	6849      	ldr	r1, [r1, #4]
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	f109 0501 	add.w	r5, r9, #1
 800ad10:	42ab      	cmp	r3, r5
 800ad12:	db32      	blt.n	800ad7a <__lshift+0x86>
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff fe2c 	bl	800a972 <_Balloc>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f100 0114 	add.w	r1, r0, #20
 800ad24:	4553      	cmp	r3, sl
 800ad26:	db2b      	blt.n	800ad80 <__lshift+0x8c>
 800ad28:	6920      	ldr	r0, [r4, #16]
 800ad2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad2e:	f104 0314 	add.w	r3, r4, #20
 800ad32:	f016 021f 	ands.w	r2, r6, #31
 800ad36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad3e:	d025      	beq.n	800ad8c <__lshift+0x98>
 800ad40:	2000      	movs	r0, #0
 800ad42:	f1c2 0e20 	rsb	lr, r2, #32
 800ad46:	468a      	mov	sl, r1
 800ad48:	681e      	ldr	r6, [r3, #0]
 800ad4a:	4096      	lsls	r6, r2
 800ad4c:	4330      	orrs	r0, r6
 800ad4e:	f84a 0b04 	str.w	r0, [sl], #4
 800ad52:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad56:	459c      	cmp	ip, r3
 800ad58:	fa20 f00e 	lsr.w	r0, r0, lr
 800ad5c:	d814      	bhi.n	800ad88 <__lshift+0x94>
 800ad5e:	6048      	str	r0, [r1, #4]
 800ad60:	b108      	cbz	r0, 800ad66 <__lshift+0x72>
 800ad62:	f109 0502 	add.w	r5, r9, #2
 800ad66:	3d01      	subs	r5, #1
 800ad68:	4638      	mov	r0, r7
 800ad6a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ad6e:	4621      	mov	r1, r4
 800ad70:	f7ff fe33 	bl	800a9da <_Bfree>
 800ad74:	4640      	mov	r0, r8
 800ad76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7a:	3101      	adds	r1, #1
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	e7c7      	b.n	800ad10 <__lshift+0x1c>
 800ad80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad84:	3301      	adds	r3, #1
 800ad86:	e7cd      	b.n	800ad24 <__lshift+0x30>
 800ad88:	4651      	mov	r1, sl
 800ad8a:	e7dc      	b.n	800ad46 <__lshift+0x52>
 800ad8c:	3904      	subs	r1, #4
 800ad8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad92:	459c      	cmp	ip, r3
 800ad94:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad98:	d8f9      	bhi.n	800ad8e <__lshift+0x9a>
 800ad9a:	e7e4      	b.n	800ad66 <__lshift+0x72>

0800ad9c <__mcmp>:
 800ad9c:	6903      	ldr	r3, [r0, #16]
 800ad9e:	690a      	ldr	r2, [r1, #16]
 800ada0:	b530      	push	{r4, r5, lr}
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	d10c      	bne.n	800adc0 <__mcmp+0x24>
 800ada6:	0092      	lsls	r2, r2, #2
 800ada8:	3014      	adds	r0, #20
 800adaa:	3114      	adds	r1, #20
 800adac:	1884      	adds	r4, r0, r2
 800adae:	4411      	add	r1, r2
 800adb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adb8:	4295      	cmp	r5, r2
 800adba:	d003      	beq.n	800adc4 <__mcmp+0x28>
 800adbc:	d305      	bcc.n	800adca <__mcmp+0x2e>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4618      	mov	r0, r3
 800adc2:	bd30      	pop	{r4, r5, pc}
 800adc4:	42a0      	cmp	r0, r4
 800adc6:	d3f3      	bcc.n	800adb0 <__mcmp+0x14>
 800adc8:	e7fa      	b.n	800adc0 <__mcmp+0x24>
 800adca:	f04f 33ff 	mov.w	r3, #4294967295
 800adce:	e7f7      	b.n	800adc0 <__mcmp+0x24>

0800add0 <__mdiff>:
 800add0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	460d      	mov	r5, r1
 800add6:	4607      	mov	r7, r0
 800add8:	4611      	mov	r1, r2
 800adda:	4628      	mov	r0, r5
 800addc:	4614      	mov	r4, r2
 800adde:	f7ff ffdd 	bl	800ad9c <__mcmp>
 800ade2:	1e06      	subs	r6, r0, #0
 800ade4:	d108      	bne.n	800adf8 <__mdiff+0x28>
 800ade6:	4631      	mov	r1, r6
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff fdc2 	bl	800a972 <_Balloc>
 800adee:	2301      	movs	r3, #1
 800adf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800adf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf8:	bfa4      	itt	ge
 800adfa:	4623      	movge	r3, r4
 800adfc:	462c      	movge	r4, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	6861      	ldr	r1, [r4, #4]
 800ae02:	bfa6      	itte	ge
 800ae04:	461d      	movge	r5, r3
 800ae06:	2600      	movge	r6, #0
 800ae08:	2601      	movlt	r6, #1
 800ae0a:	f7ff fdb2 	bl	800a972 <_Balloc>
 800ae0e:	f04f 0e00 	mov.w	lr, #0
 800ae12:	60c6      	str	r6, [r0, #12]
 800ae14:	692b      	ldr	r3, [r5, #16]
 800ae16:	6926      	ldr	r6, [r4, #16]
 800ae18:	f104 0214 	add.w	r2, r4, #20
 800ae1c:	f105 0914 	add.w	r9, r5, #20
 800ae20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae28:	f100 0114 	add.w	r1, r0, #20
 800ae2c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae30:	f859 5b04 	ldr.w	r5, [r9], #4
 800ae34:	fa1f f38a 	uxth.w	r3, sl
 800ae38:	4473      	add	r3, lr
 800ae3a:	b2ac      	uxth	r4, r5
 800ae3c:	1b1b      	subs	r3, r3, r4
 800ae3e:	0c2c      	lsrs	r4, r5, #16
 800ae40:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ae44:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ae4e:	45c8      	cmp	r8, r9
 800ae50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ae54:	4694      	mov	ip, r2
 800ae56:	f841 4b04 	str.w	r4, [r1], #4
 800ae5a:	d8e7      	bhi.n	800ae2c <__mdiff+0x5c>
 800ae5c:	45bc      	cmp	ip, r7
 800ae5e:	d304      	bcc.n	800ae6a <__mdiff+0x9a>
 800ae60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ae64:	b183      	cbz	r3, 800ae88 <__mdiff+0xb8>
 800ae66:	6106      	str	r6, [r0, #16]
 800ae68:	e7c4      	b.n	800adf4 <__mdiff+0x24>
 800ae6a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ae6e:	b2a2      	uxth	r2, r4
 800ae70:	4472      	add	r2, lr
 800ae72:	1413      	asrs	r3, r2, #16
 800ae74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae78:	b292      	uxth	r2, r2
 800ae7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae7e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ae82:	f841 2b04 	str.w	r2, [r1], #4
 800ae86:	e7e9      	b.n	800ae5c <__mdiff+0x8c>
 800ae88:	3e01      	subs	r6, #1
 800ae8a:	e7e9      	b.n	800ae60 <__mdiff+0x90>

0800ae8c <__d2b>:
 800ae8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae90:	461c      	mov	r4, r3
 800ae92:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ae96:	2101      	movs	r1, #1
 800ae98:	4690      	mov	r8, r2
 800ae9a:	f7ff fd6a 	bl	800a972 <_Balloc>
 800ae9e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800aea2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aea6:	4607      	mov	r7, r0
 800aea8:	bb34      	cbnz	r4, 800aef8 <__d2b+0x6c>
 800aeaa:	9201      	str	r2, [sp, #4]
 800aeac:	f1b8 0200 	subs.w	r2, r8, #0
 800aeb0:	d027      	beq.n	800af02 <__d2b+0x76>
 800aeb2:	a802      	add	r0, sp, #8
 800aeb4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800aeb8:	f7ff fe00 	bl	800aabc <__lo0bits>
 800aebc:	9900      	ldr	r1, [sp, #0]
 800aebe:	b1f0      	cbz	r0, 800aefe <__d2b+0x72>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	f1c0 0320 	rsb	r3, r0, #32
 800aec6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeca:	430b      	orrs	r3, r1
 800aecc:	40c2      	lsrs	r2, r0
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	9201      	str	r2, [sp, #4]
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bf14      	ite	ne
 800aed8:	2102      	movne	r1, #2
 800aeda:	2101      	moveq	r1, #1
 800aedc:	61bb      	str	r3, [r7, #24]
 800aede:	6139      	str	r1, [r7, #16]
 800aee0:	b1c4      	cbz	r4, 800af14 <__d2b+0x88>
 800aee2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aee6:	4404      	add	r4, r0
 800aee8:	6034      	str	r4, [r6, #0]
 800aeea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aeee:	6028      	str	r0, [r5, #0]
 800aef0:	4638      	mov	r0, r7
 800aef2:	b002      	add	sp, #8
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aefc:	e7d5      	b.n	800aeaa <__d2b+0x1e>
 800aefe:	6179      	str	r1, [r7, #20]
 800af00:	e7e7      	b.n	800aed2 <__d2b+0x46>
 800af02:	a801      	add	r0, sp, #4
 800af04:	f7ff fdda 	bl	800aabc <__lo0bits>
 800af08:	2101      	movs	r1, #1
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	6139      	str	r1, [r7, #16]
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	3020      	adds	r0, #32
 800af12:	e7e5      	b.n	800aee0 <__d2b+0x54>
 800af14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800af1c:	6030      	str	r0, [r6, #0]
 800af1e:	6918      	ldr	r0, [r3, #16]
 800af20:	f7ff fdad 	bl	800aa7e <__hi0bits>
 800af24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800af28:	e7e1      	b.n	800aeee <__d2b+0x62>

0800af2a <_calloc_r>:
 800af2a:	b538      	push	{r3, r4, r5, lr}
 800af2c:	fb02 f401 	mul.w	r4, r2, r1
 800af30:	4621      	mov	r1, r4
 800af32:	f000 f855 	bl	800afe0 <_malloc_r>
 800af36:	4605      	mov	r5, r0
 800af38:	b118      	cbz	r0, 800af42 <_calloc_r+0x18>
 800af3a:	4622      	mov	r2, r4
 800af3c:	2100      	movs	r1, #0
 800af3e:	f7fd ff35 	bl	8008dac <memset>
 800af42:	4628      	mov	r0, r5
 800af44:	bd38      	pop	{r3, r4, r5, pc}
	...

0800af48 <_free_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4605      	mov	r5, r0
 800af4c:	2900      	cmp	r1, #0
 800af4e:	d043      	beq.n	800afd8 <_free_r+0x90>
 800af50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af54:	1f0c      	subs	r4, r1, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfb8      	it	lt
 800af5a:	18e4      	addlt	r4, r4, r3
 800af5c:	f000 fa94 	bl	800b488 <__malloc_lock>
 800af60:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <_free_r+0x94>)
 800af62:	6813      	ldr	r3, [r2, #0]
 800af64:	4610      	mov	r0, r2
 800af66:	b933      	cbnz	r3, 800af76 <_free_r+0x2e>
 800af68:	6063      	str	r3, [r4, #4]
 800af6a:	6014      	str	r4, [r2, #0]
 800af6c:	4628      	mov	r0, r5
 800af6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af72:	f000 ba8a 	b.w	800b48a <__malloc_unlock>
 800af76:	42a3      	cmp	r3, r4
 800af78:	d90b      	bls.n	800af92 <_free_r+0x4a>
 800af7a:	6821      	ldr	r1, [r4, #0]
 800af7c:	1862      	adds	r2, r4, r1
 800af7e:	4293      	cmp	r3, r2
 800af80:	bf01      	itttt	eq
 800af82:	681a      	ldreq	r2, [r3, #0]
 800af84:	685b      	ldreq	r3, [r3, #4]
 800af86:	1852      	addeq	r2, r2, r1
 800af88:	6022      	streq	r2, [r4, #0]
 800af8a:	6063      	str	r3, [r4, #4]
 800af8c:	6004      	str	r4, [r0, #0]
 800af8e:	e7ed      	b.n	800af6c <_free_r+0x24>
 800af90:	4613      	mov	r3, r2
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	b10a      	cbz	r2, 800af9a <_free_r+0x52>
 800af96:	42a2      	cmp	r2, r4
 800af98:	d9fa      	bls.n	800af90 <_free_r+0x48>
 800af9a:	6819      	ldr	r1, [r3, #0]
 800af9c:	1858      	adds	r0, r3, r1
 800af9e:	42a0      	cmp	r0, r4
 800afa0:	d10b      	bne.n	800afba <_free_r+0x72>
 800afa2:	6820      	ldr	r0, [r4, #0]
 800afa4:	4401      	add	r1, r0
 800afa6:	1858      	adds	r0, r3, r1
 800afa8:	4282      	cmp	r2, r0
 800afaa:	6019      	str	r1, [r3, #0]
 800afac:	d1de      	bne.n	800af6c <_free_r+0x24>
 800afae:	6810      	ldr	r0, [r2, #0]
 800afb0:	6852      	ldr	r2, [r2, #4]
 800afb2:	4401      	add	r1, r0
 800afb4:	6019      	str	r1, [r3, #0]
 800afb6:	605a      	str	r2, [r3, #4]
 800afb8:	e7d8      	b.n	800af6c <_free_r+0x24>
 800afba:	d902      	bls.n	800afc2 <_free_r+0x7a>
 800afbc:	230c      	movs	r3, #12
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	e7d4      	b.n	800af6c <_free_r+0x24>
 800afc2:	6820      	ldr	r0, [r4, #0]
 800afc4:	1821      	adds	r1, r4, r0
 800afc6:	428a      	cmp	r2, r1
 800afc8:	bf01      	itttt	eq
 800afca:	6811      	ldreq	r1, [r2, #0]
 800afcc:	6852      	ldreq	r2, [r2, #4]
 800afce:	1809      	addeq	r1, r1, r0
 800afd0:	6021      	streq	r1, [r4, #0]
 800afd2:	6062      	str	r2, [r4, #4]
 800afd4:	605c      	str	r4, [r3, #4]
 800afd6:	e7c9      	b.n	800af6c <_free_r+0x24>
 800afd8:	bd38      	pop	{r3, r4, r5, pc}
 800afda:	bf00      	nop
 800afdc:	2000028c 	.word	0x2000028c

0800afe0 <_malloc_r>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	1ccd      	adds	r5, r1, #3
 800afe4:	f025 0503 	bic.w	r5, r5, #3
 800afe8:	3508      	adds	r5, #8
 800afea:	2d0c      	cmp	r5, #12
 800afec:	bf38      	it	cc
 800afee:	250c      	movcc	r5, #12
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	db01      	blt.n	800affa <_malloc_r+0x1a>
 800aff6:	42a9      	cmp	r1, r5
 800aff8:	d903      	bls.n	800b002 <_malloc_r+0x22>
 800affa:	230c      	movs	r3, #12
 800affc:	6033      	str	r3, [r6, #0]
 800affe:	2000      	movs	r0, #0
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	f000 fa41 	bl	800b488 <__malloc_lock>
 800b006:	4a21      	ldr	r2, [pc, #132]	; (800b08c <_malloc_r+0xac>)
 800b008:	6814      	ldr	r4, [r2, #0]
 800b00a:	4621      	mov	r1, r4
 800b00c:	b991      	cbnz	r1, 800b034 <_malloc_r+0x54>
 800b00e:	4c20      	ldr	r4, [pc, #128]	; (800b090 <_malloc_r+0xb0>)
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	b91b      	cbnz	r3, 800b01c <_malloc_r+0x3c>
 800b014:	4630      	mov	r0, r6
 800b016:	f000 f97b 	bl	800b310 <_sbrk_r>
 800b01a:	6020      	str	r0, [r4, #0]
 800b01c:	4629      	mov	r1, r5
 800b01e:	4630      	mov	r0, r6
 800b020:	f000 f976 	bl	800b310 <_sbrk_r>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d124      	bne.n	800b072 <_malloc_r+0x92>
 800b028:	230c      	movs	r3, #12
 800b02a:	4630      	mov	r0, r6
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	f000 fa2c 	bl	800b48a <__malloc_unlock>
 800b032:	e7e4      	b.n	800affe <_malloc_r+0x1e>
 800b034:	680b      	ldr	r3, [r1, #0]
 800b036:	1b5b      	subs	r3, r3, r5
 800b038:	d418      	bmi.n	800b06c <_malloc_r+0x8c>
 800b03a:	2b0b      	cmp	r3, #11
 800b03c:	d90f      	bls.n	800b05e <_malloc_r+0x7e>
 800b03e:	600b      	str	r3, [r1, #0]
 800b040:	18cc      	adds	r4, r1, r3
 800b042:	50cd      	str	r5, [r1, r3]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 fa20 	bl	800b48a <__malloc_unlock>
 800b04a:	f104 000b 	add.w	r0, r4, #11
 800b04e:	1d23      	adds	r3, r4, #4
 800b050:	f020 0007 	bic.w	r0, r0, #7
 800b054:	1ac3      	subs	r3, r0, r3
 800b056:	d0d3      	beq.n	800b000 <_malloc_r+0x20>
 800b058:	425a      	negs	r2, r3
 800b05a:	50e2      	str	r2, [r4, r3]
 800b05c:	e7d0      	b.n	800b000 <_malloc_r+0x20>
 800b05e:	684b      	ldr	r3, [r1, #4]
 800b060:	428c      	cmp	r4, r1
 800b062:	bf16      	itet	ne
 800b064:	6063      	strne	r3, [r4, #4]
 800b066:	6013      	streq	r3, [r2, #0]
 800b068:	460c      	movne	r4, r1
 800b06a:	e7eb      	b.n	800b044 <_malloc_r+0x64>
 800b06c:	460c      	mov	r4, r1
 800b06e:	6849      	ldr	r1, [r1, #4]
 800b070:	e7cc      	b.n	800b00c <_malloc_r+0x2c>
 800b072:	1cc4      	adds	r4, r0, #3
 800b074:	f024 0403 	bic.w	r4, r4, #3
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d005      	beq.n	800b088 <_malloc_r+0xa8>
 800b07c:	1a21      	subs	r1, r4, r0
 800b07e:	4630      	mov	r0, r6
 800b080:	f000 f946 	bl	800b310 <_sbrk_r>
 800b084:	3001      	adds	r0, #1
 800b086:	d0cf      	beq.n	800b028 <_malloc_r+0x48>
 800b088:	6025      	str	r5, [r4, #0]
 800b08a:	e7db      	b.n	800b044 <_malloc_r+0x64>
 800b08c:	2000028c 	.word	0x2000028c
 800b090:	20000290 	.word	0x20000290

0800b094 <__sfputc_r>:
 800b094:	6893      	ldr	r3, [r2, #8]
 800b096:	b410      	push	{r4}
 800b098:	3b01      	subs	r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	6093      	str	r3, [r2, #8]
 800b09e:	da07      	bge.n	800b0b0 <__sfputc_r+0x1c>
 800b0a0:	6994      	ldr	r4, [r2, #24]
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	db01      	blt.n	800b0aa <__sfputc_r+0x16>
 800b0a6:	290a      	cmp	r1, #10
 800b0a8:	d102      	bne.n	800b0b0 <__sfputc_r+0x1c>
 800b0aa:	bc10      	pop	{r4}
 800b0ac:	f7fe bb52 	b.w	8009754 <__swbuf_r>
 800b0b0:	6813      	ldr	r3, [r2, #0]
 800b0b2:	1c58      	adds	r0, r3, #1
 800b0b4:	6010      	str	r0, [r2, #0]
 800b0b6:	7019      	strb	r1, [r3, #0]
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	bc10      	pop	{r4}
 800b0bc:	4770      	bx	lr

0800b0be <__sfputs_r>:
 800b0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	18d5      	adds	r5, r2, r3
 800b0c8:	42ac      	cmp	r4, r5
 800b0ca:	d101      	bne.n	800b0d0 <__sfputs_r+0x12>
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e007      	b.n	800b0e0 <__sfputs_r+0x22>
 800b0d0:	463a      	mov	r2, r7
 800b0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f7ff ffdc 	bl	800b094 <__sfputc_r>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d1f3      	bne.n	800b0c8 <__sfputs_r+0xa>
 800b0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0e4 <_vfiprintf_r>:
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	b09d      	sub	sp, #116	; 0x74
 800b0ec:	4617      	mov	r7, r2
 800b0ee:	461d      	mov	r5, r3
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	b118      	cbz	r0, 800b0fc <_vfiprintf_r+0x18>
 800b0f4:	6983      	ldr	r3, [r0, #24]
 800b0f6:	b90b      	cbnz	r3, 800b0fc <_vfiprintf_r+0x18>
 800b0f8:	f7ff fb1e 	bl	800a738 <__sinit>
 800b0fc:	4b7c      	ldr	r3, [pc, #496]	; (800b2f0 <_vfiprintf_r+0x20c>)
 800b0fe:	429c      	cmp	r4, r3
 800b100:	d158      	bne.n	800b1b4 <_vfiprintf_r+0xd0>
 800b102:	6874      	ldr	r4, [r6, #4]
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	0718      	lsls	r0, r3, #28
 800b108:	d55e      	bpl.n	800b1c8 <_vfiprintf_r+0xe4>
 800b10a:	6923      	ldr	r3, [r4, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05b      	beq.n	800b1c8 <_vfiprintf_r+0xe4>
 800b110:	2300      	movs	r3, #0
 800b112:	9309      	str	r3, [sp, #36]	; 0x24
 800b114:	2320      	movs	r3, #32
 800b116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b11a:	2330      	movs	r3, #48	; 0x30
 800b11c:	f04f 0b01 	mov.w	fp, #1
 800b120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b124:	9503      	str	r5, [sp, #12]
 800b126:	46b8      	mov	r8, r7
 800b128:	4645      	mov	r5, r8
 800b12a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b12e:	b10b      	cbz	r3, 800b134 <_vfiprintf_r+0x50>
 800b130:	2b25      	cmp	r3, #37	; 0x25
 800b132:	d154      	bne.n	800b1de <_vfiprintf_r+0xfa>
 800b134:	ebb8 0a07 	subs.w	sl, r8, r7
 800b138:	d00b      	beq.n	800b152 <_vfiprintf_r+0x6e>
 800b13a:	4653      	mov	r3, sl
 800b13c:	463a      	mov	r2, r7
 800b13e:	4621      	mov	r1, r4
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff ffbc 	bl	800b0be <__sfputs_r>
 800b146:	3001      	adds	r0, #1
 800b148:	f000 80c2 	beq.w	800b2d0 <_vfiprintf_r+0x1ec>
 800b14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14e:	4453      	add	r3, sl
 800b150:	9309      	str	r3, [sp, #36]	; 0x24
 800b152:	f898 3000 	ldrb.w	r3, [r8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80ba 	beq.w	800b2d0 <_vfiprintf_r+0x1ec>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f04f 32ff 	mov.w	r2, #4294967295
 800b162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	9307      	str	r3, [sp, #28]
 800b16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b16e:	931a      	str	r3, [sp, #104]	; 0x68
 800b170:	46a8      	mov	r8, r5
 800b172:	2205      	movs	r2, #5
 800b174:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b178:	485e      	ldr	r0, [pc, #376]	; (800b2f4 <_vfiprintf_r+0x210>)
 800b17a:	f7ff fbe1 	bl	800a940 <memchr>
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	bb78      	cbnz	r0, 800b1e2 <_vfiprintf_r+0xfe>
 800b182:	06d9      	lsls	r1, r3, #27
 800b184:	bf44      	itt	mi
 800b186:	2220      	movmi	r2, #32
 800b188:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b18c:	071a      	lsls	r2, r3, #28
 800b18e:	bf44      	itt	mi
 800b190:	222b      	movmi	r2, #43	; 0x2b
 800b192:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b196:	782a      	ldrb	r2, [r5, #0]
 800b198:	2a2a      	cmp	r2, #42	; 0x2a
 800b19a:	d02a      	beq.n	800b1f2 <_vfiprintf_r+0x10e>
 800b19c:	46a8      	mov	r8, r5
 800b19e:	2000      	movs	r0, #0
 800b1a0:	250a      	movs	r5, #10
 800b1a2:	9a07      	ldr	r2, [sp, #28]
 800b1a4:	4641      	mov	r1, r8
 800b1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1aa:	3b30      	subs	r3, #48	; 0x30
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	d969      	bls.n	800b284 <_vfiprintf_r+0x1a0>
 800b1b0:	b360      	cbz	r0, 800b20c <_vfiprintf_r+0x128>
 800b1b2:	e024      	b.n	800b1fe <_vfiprintf_r+0x11a>
 800b1b4:	4b50      	ldr	r3, [pc, #320]	; (800b2f8 <_vfiprintf_r+0x214>)
 800b1b6:	429c      	cmp	r4, r3
 800b1b8:	d101      	bne.n	800b1be <_vfiprintf_r+0xda>
 800b1ba:	68b4      	ldr	r4, [r6, #8]
 800b1bc:	e7a2      	b.n	800b104 <_vfiprintf_r+0x20>
 800b1be:	4b4f      	ldr	r3, [pc, #316]	; (800b2fc <_vfiprintf_r+0x218>)
 800b1c0:	429c      	cmp	r4, r3
 800b1c2:	bf08      	it	eq
 800b1c4:	68f4      	ldreq	r4, [r6, #12]
 800b1c6:	e79d      	b.n	800b104 <_vfiprintf_r+0x20>
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7fe fb14 	bl	80097f8 <__swsetup_r>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d09d      	beq.n	800b110 <_vfiprintf_r+0x2c>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	; 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	46a8      	mov	r8, r5
 800b1e0:	e7a2      	b.n	800b128 <_vfiprintf_r+0x44>
 800b1e2:	4a44      	ldr	r2, [pc, #272]	; (800b2f4 <_vfiprintf_r+0x210>)
 800b1e4:	4645      	mov	r5, r8
 800b1e6:	1a80      	subs	r0, r0, r2
 800b1e8:	fa0b f000 	lsl.w	r0, fp, r0
 800b1ec:	4318      	orrs	r0, r3
 800b1ee:	9004      	str	r0, [sp, #16]
 800b1f0:	e7be      	b.n	800b170 <_vfiprintf_r+0x8c>
 800b1f2:	9a03      	ldr	r2, [sp, #12]
 800b1f4:	1d11      	adds	r1, r2, #4
 800b1f6:	6812      	ldr	r2, [r2, #0]
 800b1f8:	9103      	str	r1, [sp, #12]
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	db01      	blt.n	800b202 <_vfiprintf_r+0x11e>
 800b1fe:	9207      	str	r2, [sp, #28]
 800b200:	e004      	b.n	800b20c <_vfiprintf_r+0x128>
 800b202:	4252      	negs	r2, r2
 800b204:	f043 0302 	orr.w	r3, r3, #2
 800b208:	9207      	str	r2, [sp, #28]
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	f898 3000 	ldrb.w	r3, [r8]
 800b210:	2b2e      	cmp	r3, #46	; 0x2e
 800b212:	d10e      	bne.n	800b232 <_vfiprintf_r+0x14e>
 800b214:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b218:	2b2a      	cmp	r3, #42	; 0x2a
 800b21a:	d138      	bne.n	800b28e <_vfiprintf_r+0x1aa>
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	f108 0802 	add.w	r8, r8, #2
 800b222:	1d1a      	adds	r2, r3, #4
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	9203      	str	r2, [sp, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bfb8      	it	lt
 800b22c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	4d33      	ldr	r5, [pc, #204]	; (800b300 <_vfiprintf_r+0x21c>)
 800b234:	2203      	movs	r2, #3
 800b236:	f898 1000 	ldrb.w	r1, [r8]
 800b23a:	4628      	mov	r0, r5
 800b23c:	f7ff fb80 	bl	800a940 <memchr>
 800b240:	b140      	cbz	r0, 800b254 <_vfiprintf_r+0x170>
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	1b40      	subs	r0, r0, r5
 800b246:	fa03 f000 	lsl.w	r0, r3, r0
 800b24a:	9b04      	ldr	r3, [sp, #16]
 800b24c:	f108 0801 	add.w	r8, r8, #1
 800b250:	4303      	orrs	r3, r0
 800b252:	9304      	str	r3, [sp, #16]
 800b254:	f898 1000 	ldrb.w	r1, [r8]
 800b258:	2206      	movs	r2, #6
 800b25a:	482a      	ldr	r0, [pc, #168]	; (800b304 <_vfiprintf_r+0x220>)
 800b25c:	f108 0701 	add.w	r7, r8, #1
 800b260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b264:	f7ff fb6c 	bl	800a940 <memchr>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d037      	beq.n	800b2dc <_vfiprintf_r+0x1f8>
 800b26c:	4b26      	ldr	r3, [pc, #152]	; (800b308 <_vfiprintf_r+0x224>)
 800b26e:	bb1b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x1d4>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3307      	adds	r3, #7
 800b274:	f023 0307 	bic.w	r3, r3, #7
 800b278:	3308      	adds	r3, #8
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	444b      	add	r3, r9
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	e750      	b.n	800b126 <_vfiprintf_r+0x42>
 800b284:	fb05 3202 	mla	r2, r5, r2, r3
 800b288:	2001      	movs	r0, #1
 800b28a:	4688      	mov	r8, r1
 800b28c:	e78a      	b.n	800b1a4 <_vfiprintf_r+0xc0>
 800b28e:	2300      	movs	r3, #0
 800b290:	250a      	movs	r5, #10
 800b292:	4619      	mov	r1, r3
 800b294:	f108 0801 	add.w	r8, r8, #1
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	4640      	mov	r0, r8
 800b29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a0:	3a30      	subs	r2, #48	; 0x30
 800b2a2:	2a09      	cmp	r2, #9
 800b2a4:	d903      	bls.n	800b2ae <_vfiprintf_r+0x1ca>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c3      	beq.n	800b232 <_vfiprintf_r+0x14e>
 800b2aa:	9105      	str	r1, [sp, #20]
 800b2ac:	e7c1      	b.n	800b232 <_vfiprintf_r+0x14e>
 800b2ae:	fb05 2101 	mla	r1, r5, r1, r2
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	e7f0      	b.n	800b29a <_vfiprintf_r+0x1b6>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4622      	mov	r2, r4
 800b2be:	4b13      	ldr	r3, [pc, #76]	; (800b30c <_vfiprintf_r+0x228>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7fd fe0c 	bl	8008ee0 <_printf_float>
 800b2c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2cc:	4681      	mov	r9, r0
 800b2ce:	d1d5      	bne.n	800b27c <_vfiprintf_r+0x198>
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	065b      	lsls	r3, r3, #25
 800b2d4:	f53f af7e 	bmi.w	800b1d4 <_vfiprintf_r+0xf0>
 800b2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2da:	e77d      	b.n	800b1d8 <_vfiprintf_r+0xf4>
 800b2dc:	ab03      	add	r3, sp, #12
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <_vfiprintf_r+0x228>)
 800b2e4:	a904      	add	r1, sp, #16
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7fe f8a6 	bl	8009438 <_printf_i>
 800b2ec:	e7ec      	b.n	800b2c8 <_vfiprintf_r+0x1e4>
 800b2ee:	bf00      	nop
 800b2f0:	0800d1e8 	.word	0x0800d1e8
 800b2f4:	0800d324 	.word	0x0800d324
 800b2f8:	0800d208 	.word	0x0800d208
 800b2fc:	0800d1c8 	.word	0x0800d1c8
 800b300:	0800d32a 	.word	0x0800d32a
 800b304:	0800d32e 	.word	0x0800d32e
 800b308:	08008ee1 	.word	0x08008ee1
 800b30c:	0800b0bf 	.word	0x0800b0bf

0800b310 <_sbrk_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	2300      	movs	r3, #0
 800b314:	4c05      	ldr	r4, [pc, #20]	; (800b32c <_sbrk_r+0x1c>)
 800b316:	4605      	mov	r5, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	f7f8 fa26 	bl	800376c <_sbrk>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_sbrk_r+0x1a>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	b103      	cbz	r3, 800b32a <_sbrk_r+0x1a>
 800b328:	602b      	str	r3, [r5, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	200005f4 	.word	0x200005f4

0800b330 <__sread>:
 800b330:	b510      	push	{r4, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b338:	f000 f8a8 	bl	800b48c <_read_r>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	bfab      	itete	ge
 800b340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b342:	89a3      	ldrhlt	r3, [r4, #12]
 800b344:	181b      	addge	r3, r3, r0
 800b346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b34a:	bfac      	ite	ge
 800b34c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b34e:	81a3      	strhlt	r3, [r4, #12]
 800b350:	bd10      	pop	{r4, pc}

0800b352 <__swrite>:
 800b352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	461f      	mov	r7, r3
 800b358:	898b      	ldrh	r3, [r1, #12]
 800b35a:	4605      	mov	r5, r0
 800b35c:	05db      	lsls	r3, r3, #23
 800b35e:	460c      	mov	r4, r1
 800b360:	4616      	mov	r6, r2
 800b362:	d505      	bpl.n	800b370 <__swrite+0x1e>
 800b364:	2302      	movs	r3, #2
 800b366:	2200      	movs	r2, #0
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	f000 f868 	bl	800b440 <_lseek_r>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	4632      	mov	r2, r6
 800b374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b378:	81a3      	strh	r3, [r4, #12]
 800b37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b37e:	463b      	mov	r3, r7
 800b380:	4628      	mov	r0, r5
 800b382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	f000 b817 	b.w	800b3b8 <_write_r>

0800b38a <__sseek>:
 800b38a:	b510      	push	{r4, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b392:	f000 f855 	bl	800b440 <_lseek_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	bf15      	itete	ne
 800b39c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b39e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3a6:	81a3      	strheq	r3, [r4, #12]
 800b3a8:	bf18      	it	ne
 800b3aa:	81a3      	strhne	r3, [r4, #12]
 800b3ac:	bd10      	pop	{r4, pc}

0800b3ae <__sclose>:
 800b3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b2:	f000 b813 	b.w	800b3dc <_close_r>
	...

0800b3b8 <_write_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4c05      	ldr	r4, [pc, #20]	; (800b3d8 <_write_r+0x20>)
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f8 f983 	bl	80036d2 <_write>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_write_r+0x1e>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_write_r+0x1e>
 800b3d4:	602b      	str	r3, [r5, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	200005f4 	.word	0x200005f4

0800b3dc <_close_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	2300      	movs	r3, #0
 800b3e0:	4c05      	ldr	r4, [pc, #20]	; (800b3f8 <_close_r+0x1c>)
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	f7f8 f98f 	bl	800370a <_close>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_close_r+0x1a>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_close_r+0x1a>
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	200005f4 	.word	0x200005f4

0800b3fc <_fstat_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	2300      	movs	r3, #0
 800b400:	4c06      	ldr	r4, [pc, #24]	; (800b41c <_fstat_r+0x20>)
 800b402:	4605      	mov	r5, r0
 800b404:	4608      	mov	r0, r1
 800b406:	4611      	mov	r1, r2
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	f7f8 f989 	bl	8003720 <_fstat>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	d102      	bne.n	800b418 <_fstat_r+0x1c>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	b103      	cbz	r3, 800b418 <_fstat_r+0x1c>
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop
 800b41c:	200005f4 	.word	0x200005f4

0800b420 <_isatty_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	2300      	movs	r3, #0
 800b424:	4c05      	ldr	r4, [pc, #20]	; (800b43c <_isatty_r+0x1c>)
 800b426:	4605      	mov	r5, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	f7f8 f987 	bl	800373e <_isatty>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_isatty_r+0x1a>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	b103      	cbz	r3, 800b43a <_isatty_r+0x1a>
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	200005f4 	.word	0x200005f4

0800b440 <_lseek_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4605      	mov	r5, r0
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	2200      	movs	r2, #0
 800b44a:	4c05      	ldr	r4, [pc, #20]	; (800b460 <_lseek_r+0x20>)
 800b44c:	6022      	str	r2, [r4, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f8 f97f 	bl	8003752 <_lseek>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_lseek_r+0x1e>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_lseek_r+0x1e>
 800b45c:	602b      	str	r3, [r5, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200005f4 	.word	0x200005f4

0800b464 <__ascii_mbtowc>:
 800b464:	b082      	sub	sp, #8
 800b466:	b901      	cbnz	r1, 800b46a <__ascii_mbtowc+0x6>
 800b468:	a901      	add	r1, sp, #4
 800b46a:	b142      	cbz	r2, 800b47e <__ascii_mbtowc+0x1a>
 800b46c:	b14b      	cbz	r3, 800b482 <__ascii_mbtowc+0x1e>
 800b46e:	7813      	ldrb	r3, [r2, #0]
 800b470:	600b      	str	r3, [r1, #0]
 800b472:	7812      	ldrb	r2, [r2, #0]
 800b474:	1c10      	adds	r0, r2, #0
 800b476:	bf18      	it	ne
 800b478:	2001      	movne	r0, #1
 800b47a:	b002      	add	sp, #8
 800b47c:	4770      	bx	lr
 800b47e:	4610      	mov	r0, r2
 800b480:	e7fb      	b.n	800b47a <__ascii_mbtowc+0x16>
 800b482:	f06f 0001 	mvn.w	r0, #1
 800b486:	e7f8      	b.n	800b47a <__ascii_mbtowc+0x16>

0800b488 <__malloc_lock>:
 800b488:	4770      	bx	lr

0800b48a <__malloc_unlock>:
 800b48a:	4770      	bx	lr

0800b48c <_read_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4605      	mov	r5, r0
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	2200      	movs	r2, #0
 800b496:	4c05      	ldr	r4, [pc, #20]	; (800b4ac <_read_r+0x20>)
 800b498:	6022      	str	r2, [r4, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f8 f8fc 	bl	8003698 <_read>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_read_r+0x1e>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_read_r+0x1e>
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	200005f4 	.word	0x200005f4

0800b4b0 <__ascii_wctomb>:
 800b4b0:	b149      	cbz	r1, 800b4c6 <__ascii_wctomb+0x16>
 800b4b2:	2aff      	cmp	r2, #255	; 0xff
 800b4b4:	bf8b      	itete	hi
 800b4b6:	238a      	movhi	r3, #138	; 0x8a
 800b4b8:	700a      	strbls	r2, [r1, #0]
 800b4ba:	6003      	strhi	r3, [r0, #0]
 800b4bc:	2001      	movls	r0, #1
 800b4be:	bf88      	it	hi
 800b4c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4c4:	4770      	bx	lr
 800b4c6:	4608      	mov	r0, r1
 800b4c8:	4770      	bx	lr
 800b4ca:	0000      	movs	r0, r0
 800b4cc:	0000      	movs	r0, r0
	...

0800b4d0 <atan>:
 800b4d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	4bb6      	ldr	r3, [pc, #728]	; (800b7b0 <atan+0x2e0>)
 800b4d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	4604      	mov	r4, r0
 800b4de:	460d      	mov	r5, r1
 800b4e0:	468b      	mov	fp, r1
 800b4e2:	dd17      	ble.n	800b514 <atan+0x44>
 800b4e4:	4bb3      	ldr	r3, [pc, #716]	; (800b7b4 <atan+0x2e4>)
 800b4e6:	429e      	cmp	r6, r3
 800b4e8:	dc01      	bgt.n	800b4ee <atan+0x1e>
 800b4ea:	d109      	bne.n	800b500 <atan+0x30>
 800b4ec:	b140      	cbz	r0, 800b500 <atan+0x30>
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f4 fe39 	bl	800016c <__adddf3>
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	e005      	b.n	800b50c <atan+0x3c>
 800b500:	f1bb 0f00 	cmp.w	fp, #0
 800b504:	4cac      	ldr	r4, [pc, #688]	; (800b7b8 <atan+0x2e8>)
 800b506:	f340 8121 	ble.w	800b74c <atan+0x27c>
 800b50a:	4dac      	ldr	r5, [pc, #688]	; (800b7bc <atan+0x2ec>)
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	4baa      	ldr	r3, [pc, #680]	; (800b7c0 <atan+0x2f0>)
 800b516:	429e      	cmp	r6, r3
 800b518:	dc11      	bgt.n	800b53e <atan+0x6e>
 800b51a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b51e:	429e      	cmp	r6, r3
 800b520:	dc0a      	bgt.n	800b538 <atan+0x68>
 800b522:	a38b      	add	r3, pc, #556	; (adr r3, 800b750 <atan+0x280>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f4 fe20 	bl	800016c <__adddf3>
 800b52c:	2200      	movs	r2, #0
 800b52e:	4ba5      	ldr	r3, [pc, #660]	; (800b7c4 <atan+0x2f4>)
 800b530:	f7f5 fa62 	bl	80009f8 <__aeabi_dcmpgt>
 800b534:	2800      	cmp	r0, #0
 800b536:	d1e9      	bne.n	800b50c <atan+0x3c>
 800b538:	f04f 3aff 	mov.w	sl, #4294967295
 800b53c:	e027      	b.n	800b58e <atan+0xbe>
 800b53e:	f000 f987 	bl	800b850 <fabs>
 800b542:	4ba1      	ldr	r3, [pc, #644]	; (800b7c8 <atan+0x2f8>)
 800b544:	4604      	mov	r4, r0
 800b546:	429e      	cmp	r6, r3
 800b548:	460d      	mov	r5, r1
 800b54a:	f300 80b8 	bgt.w	800b6be <atan+0x1ee>
 800b54e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b552:	429e      	cmp	r6, r3
 800b554:	f300 809c 	bgt.w	800b690 <atan+0x1c0>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	f7f4 fe06 	bl	800016c <__adddf3>
 800b560:	2200      	movs	r2, #0
 800b562:	4b98      	ldr	r3, [pc, #608]	; (800b7c4 <atan+0x2f4>)
 800b564:	f7f4 fe00 	bl	8000168 <__aeabi_dsub>
 800b568:	2200      	movs	r2, #0
 800b56a:	4606      	mov	r6, r0
 800b56c:	460f      	mov	r7, r1
 800b56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f4 fdf9 	bl	800016c <__adddf3>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4630      	mov	r0, r6
 800b580:	4639      	mov	r1, r7
 800b582:	f7f5 f8d3 	bl	800072c <__aeabi_ddiv>
 800b586:	f04f 0a00 	mov.w	sl, #0
 800b58a:	4604      	mov	r4, r0
 800b58c:	460d      	mov	r5, r1
 800b58e:	4622      	mov	r2, r4
 800b590:	462b      	mov	r3, r5
 800b592:	4620      	mov	r0, r4
 800b594:	4629      	mov	r1, r5
 800b596:	f7f4 ff9f 	bl	80004d8 <__aeabi_dmul>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	f7f4 ff99 	bl	80004d8 <__aeabi_dmul>
 800b5a6:	a36c      	add	r3, pc, #432	; (adr r3, 800b758 <atan+0x288>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460f      	mov	r7, r1
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	a36a      	add	r3, pc, #424	; (adr r3, 800b760 <atan+0x290>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	f7f4 fdd7 	bl	800016c <__adddf3>
 800b5be:	4632      	mov	r2, r6
 800b5c0:	463b      	mov	r3, r7
 800b5c2:	f7f4 ff89 	bl	80004d8 <__aeabi_dmul>
 800b5c6:	a368      	add	r3, pc, #416	; (adr r3, 800b768 <atan+0x298>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f4 fdce 	bl	800016c <__adddf3>
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	f7f4 ff80 	bl	80004d8 <__aeabi_dmul>
 800b5d8:	a365      	add	r3, pc, #404	; (adr r3, 800b770 <atan+0x2a0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f7f4 fdc5 	bl	800016c <__adddf3>
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	f7f4 ff77 	bl	80004d8 <__aeabi_dmul>
 800b5ea:	a363      	add	r3, pc, #396	; (adr r3, 800b778 <atan+0x2a8>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f4 fdbc 	bl	800016c <__adddf3>
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	463b      	mov	r3, r7
 800b5f8:	f7f4 ff6e 	bl	80004d8 <__aeabi_dmul>
 800b5fc:	a360      	add	r3, pc, #384	; (adr r3, 800b780 <atan+0x2b0>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f7f4 fdb3 	bl	800016c <__adddf3>
 800b606:	4642      	mov	r2, r8
 800b608:	464b      	mov	r3, r9
 800b60a:	f7f4 ff65 	bl	80004d8 <__aeabi_dmul>
 800b60e:	a35e      	add	r3, pc, #376	; (adr r3, 800b788 <atan+0x2b8>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	4680      	mov	r8, r0
 800b616:	4689      	mov	r9, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f4 ff5c 	bl	80004d8 <__aeabi_dmul>
 800b620:	a35b      	add	r3, pc, #364	; (adr r3, 800b790 <atan+0x2c0>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f7f4 fd9f 	bl	8000168 <__aeabi_dsub>
 800b62a:	4632      	mov	r2, r6
 800b62c:	463b      	mov	r3, r7
 800b62e:	f7f4 ff53 	bl	80004d8 <__aeabi_dmul>
 800b632:	a359      	add	r3, pc, #356	; (adr r3, 800b798 <atan+0x2c8>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f7f4 fd96 	bl	8000168 <__aeabi_dsub>
 800b63c:	4632      	mov	r2, r6
 800b63e:	463b      	mov	r3, r7
 800b640:	f7f4 ff4a 	bl	80004d8 <__aeabi_dmul>
 800b644:	a356      	add	r3, pc, #344	; (adr r3, 800b7a0 <atan+0x2d0>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f4 fd8d 	bl	8000168 <__aeabi_dsub>
 800b64e:	4632      	mov	r2, r6
 800b650:	463b      	mov	r3, r7
 800b652:	f7f4 ff41 	bl	80004d8 <__aeabi_dmul>
 800b656:	a354      	add	r3, pc, #336	; (adr r3, 800b7a8 <atan+0x2d8>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 fd84 	bl	8000168 <__aeabi_dsub>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	f7f4 ff38 	bl	80004d8 <__aeabi_dmul>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4640      	mov	r0, r8
 800b66e:	4649      	mov	r1, r9
 800b670:	f7f4 fd7c 	bl	800016c <__adddf3>
 800b674:	4622      	mov	r2, r4
 800b676:	462b      	mov	r3, r5
 800b678:	f7f4 ff2e 	bl	80004d8 <__aeabi_dmul>
 800b67c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	d144      	bne.n	800b710 <atan+0x240>
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f4 fd6d 	bl	8000168 <__aeabi_dsub>
 800b68e:	e734      	b.n	800b4fa <atan+0x2a>
 800b690:	2200      	movs	r2, #0
 800b692:	4b4c      	ldr	r3, [pc, #304]	; (800b7c4 <atan+0x2f4>)
 800b694:	f7f4 fd68 	bl	8000168 <__aeabi_dsub>
 800b698:	2200      	movs	r2, #0
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	4b49      	ldr	r3, [pc, #292]	; (800b7c4 <atan+0x2f4>)
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f4 fd62 	bl	800016c <__adddf3>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f5 f83c 	bl	800072c <__aeabi_ddiv>
 800b6b4:	f04f 0a01 	mov.w	sl, #1
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	460d      	mov	r5, r1
 800b6bc:	e767      	b.n	800b58e <atan+0xbe>
 800b6be:	4b43      	ldr	r3, [pc, #268]	; (800b7cc <atan+0x2fc>)
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	dc1a      	bgt.n	800b6fa <atan+0x22a>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4b42      	ldr	r3, [pc, #264]	; (800b7d0 <atan+0x300>)
 800b6c8:	f7f4 fd4e 	bl	8000168 <__aeabi_dsub>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	4b3f      	ldr	r3, [pc, #252]	; (800b7d0 <atan+0x300>)
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f4 fefe 	bl	80004d8 <__aeabi_dmul>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4b39      	ldr	r3, [pc, #228]	; (800b7c4 <atan+0x2f4>)
 800b6e0:	f7f4 fd44 	bl	800016c <__adddf3>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7f5 f81e 	bl	800072c <__aeabi_ddiv>
 800b6f0:	f04f 0a02 	mov.w	sl, #2
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	e749      	b.n	800b58e <atan+0xbe>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	2000      	movs	r0, #0
 800b700:	4934      	ldr	r1, [pc, #208]	; (800b7d4 <atan+0x304>)
 800b702:	f7f5 f813 	bl	800072c <__aeabi_ddiv>
 800b706:	f04f 0a03 	mov.w	sl, #3
 800b70a:	4604      	mov	r4, r0
 800b70c:	460d      	mov	r5, r1
 800b70e:	e73e      	b.n	800b58e <atan+0xbe>
 800b710:	4b31      	ldr	r3, [pc, #196]	; (800b7d8 <atan+0x308>)
 800b712:	4e32      	ldr	r6, [pc, #200]	; (800b7dc <atan+0x30c>)
 800b714:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b718:	4456      	add	r6, sl
 800b71a:	449a      	add	sl, r3
 800b71c:	e9da 2300 	ldrd	r2, r3, [sl]
 800b720:	f7f4 fd22 	bl	8000168 <__aeabi_dsub>
 800b724:	4622      	mov	r2, r4
 800b726:	462b      	mov	r3, r5
 800b728:	f7f4 fd1e 	bl	8000168 <__aeabi_dsub>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b734:	f7f4 fd18 	bl	8000168 <__aeabi_dsub>
 800b738:	f1bb 0f00 	cmp.w	fp, #0
 800b73c:	4604      	mov	r4, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	f6bf aee4 	bge.w	800b50c <atan+0x3c>
 800b744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b748:	461d      	mov	r5, r3
 800b74a:	e6df      	b.n	800b50c <atan+0x3c>
 800b74c:	4d24      	ldr	r5, [pc, #144]	; (800b7e0 <atan+0x310>)
 800b74e:	e6dd      	b.n	800b50c <atan+0x3c>
 800b750:	8800759c 	.word	0x8800759c
 800b754:	7e37e43c 	.word	0x7e37e43c
 800b758:	e322da11 	.word	0xe322da11
 800b75c:	3f90ad3a 	.word	0x3f90ad3a
 800b760:	24760deb 	.word	0x24760deb
 800b764:	3fa97b4b 	.word	0x3fa97b4b
 800b768:	a0d03d51 	.word	0xa0d03d51
 800b76c:	3fb10d66 	.word	0x3fb10d66
 800b770:	c54c206e 	.word	0xc54c206e
 800b774:	3fb745cd 	.word	0x3fb745cd
 800b778:	920083ff 	.word	0x920083ff
 800b77c:	3fc24924 	.word	0x3fc24924
 800b780:	5555550d 	.word	0x5555550d
 800b784:	3fd55555 	.word	0x3fd55555
 800b788:	2c6a6c2f 	.word	0x2c6a6c2f
 800b78c:	bfa2b444 	.word	0xbfa2b444
 800b790:	52defd9a 	.word	0x52defd9a
 800b794:	3fadde2d 	.word	0x3fadde2d
 800b798:	af749a6d 	.word	0xaf749a6d
 800b79c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b7a0:	fe231671 	.word	0xfe231671
 800b7a4:	3fbc71c6 	.word	0x3fbc71c6
 800b7a8:	9998ebc4 	.word	0x9998ebc4
 800b7ac:	3fc99999 	.word	0x3fc99999
 800b7b0:	440fffff 	.word	0x440fffff
 800b7b4:	7ff00000 	.word	0x7ff00000
 800b7b8:	54442d18 	.word	0x54442d18
 800b7bc:	3ff921fb 	.word	0x3ff921fb
 800b7c0:	3fdbffff 	.word	0x3fdbffff
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	3ff2ffff 	.word	0x3ff2ffff
 800b7cc:	40037fff 	.word	0x40037fff
 800b7d0:	3ff80000 	.word	0x3ff80000
 800b7d4:	bff00000 	.word	0xbff00000
 800b7d8:	0800d460 	.word	0x0800d460
 800b7dc:	0800d440 	.word	0x0800d440
 800b7e0:	bff921fb 	.word	0xbff921fb

0800b7e4 <cos>:
 800b7e4:	b530      	push	{r4, r5, lr}
 800b7e6:	4a18      	ldr	r2, [pc, #96]	; (800b848 <cos+0x64>)
 800b7e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	dc04      	bgt.n	800b7fc <cos+0x18>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f000 fcbf 	bl	800c178 <__kernel_cos>
 800b7fa:	e006      	b.n	800b80a <cos+0x26>
 800b7fc:	4a13      	ldr	r2, [pc, #76]	; (800b84c <cos+0x68>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	dd05      	ble.n	800b80e <cos+0x2a>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	f7f4 fcaf 	bl	8000168 <__aeabi_dsub>
 800b80a:	b007      	add	sp, #28
 800b80c:	bd30      	pop	{r4, r5, pc}
 800b80e:	aa02      	add	r2, sp, #8
 800b810:	f000 fa16 	bl	800bc40 <__ieee754_rem_pio2>
 800b814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b818:	f000 0403 	and.w	r4, r0, #3
 800b81c:	2c01      	cmp	r4, #1
 800b81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b822:	d008      	beq.n	800b836 <cos+0x52>
 800b824:	2c02      	cmp	r4, #2
 800b826:	d00c      	beq.n	800b842 <cos+0x5e>
 800b828:	2c00      	cmp	r4, #0
 800b82a:	d0e4      	beq.n	800b7f6 <cos+0x12>
 800b82c:	2401      	movs	r4, #1
 800b82e:	9400      	str	r4, [sp, #0]
 800b830:	f001 f8aa 	bl	800c988 <__kernel_sin>
 800b834:	e7e9      	b.n	800b80a <cos+0x26>
 800b836:	9400      	str	r4, [sp, #0]
 800b838:	f001 f8a6 	bl	800c988 <__kernel_sin>
 800b83c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b840:	e7e3      	b.n	800b80a <cos+0x26>
 800b842:	f000 fc99 	bl	800c178 <__kernel_cos>
 800b846:	e7f9      	b.n	800b83c <cos+0x58>
 800b848:	3fe921fb 	.word	0x3fe921fb
 800b84c:	7fefffff 	.word	0x7fefffff

0800b850 <fabs>:
 800b850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b854:	4619      	mov	r1, r3
 800b856:	4770      	bx	lr

0800b858 <sin>:
 800b858:	b530      	push	{r4, r5, lr}
 800b85a:	4a1a      	ldr	r2, [pc, #104]	; (800b8c4 <sin+0x6c>)
 800b85c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b860:	4293      	cmp	r3, r2
 800b862:	b087      	sub	sp, #28
 800b864:	dc06      	bgt.n	800b874 <sin+0x1c>
 800b866:	2300      	movs	r3, #0
 800b868:	2200      	movs	r2, #0
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	2300      	movs	r3, #0
 800b86e:	f001 f88b 	bl	800c988 <__kernel_sin>
 800b872:	e006      	b.n	800b882 <sin+0x2a>
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <sin+0x70>)
 800b876:	4293      	cmp	r3, r2
 800b878:	dd05      	ble.n	800b886 <sin+0x2e>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	f7f4 fc73 	bl	8000168 <__aeabi_dsub>
 800b882:	b007      	add	sp, #28
 800b884:	bd30      	pop	{r4, r5, pc}
 800b886:	aa02      	add	r2, sp, #8
 800b888:	f000 f9da 	bl	800bc40 <__ieee754_rem_pio2>
 800b88c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b890:	f000 0403 	and.w	r4, r0, #3
 800b894:	2c01      	cmp	r4, #1
 800b896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89a:	d005      	beq.n	800b8a8 <sin+0x50>
 800b89c:	2c02      	cmp	r4, #2
 800b89e:	d006      	beq.n	800b8ae <sin+0x56>
 800b8a0:	b964      	cbnz	r4, 800b8bc <sin+0x64>
 800b8a2:	2401      	movs	r4, #1
 800b8a4:	9400      	str	r4, [sp, #0]
 800b8a6:	e7e2      	b.n	800b86e <sin+0x16>
 800b8a8:	f000 fc66 	bl	800c178 <__kernel_cos>
 800b8ac:	e7e9      	b.n	800b882 <sin+0x2a>
 800b8ae:	2401      	movs	r4, #1
 800b8b0:	9400      	str	r4, [sp, #0]
 800b8b2:	f001 f869 	bl	800c988 <__kernel_sin>
 800b8b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b8ba:	e7e2      	b.n	800b882 <sin+0x2a>
 800b8bc:	f000 fc5c 	bl	800c178 <__kernel_cos>
 800b8c0:	e7f9      	b.n	800b8b6 <sin+0x5e>
 800b8c2:	bf00      	nop
 800b8c4:	3fe921fb 	.word	0x3fe921fb
 800b8c8:	7fefffff 	.word	0x7fefffff

0800b8cc <fmod>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	b08b      	sub	sp, #44	; 0x2c
 800b8d2:	461f      	mov	r7, r3
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	460d      	mov	r5, r1
 800b8d8:	4616      	mov	r6, r2
 800b8da:	f000 f8a7 	bl	800ba2c <__ieee754_fmod>
 800b8de:	4b27      	ldr	r3, [pc, #156]	; (800b97c <fmod+0xb0>)
 800b8e0:	4680      	mov	r8, r0
 800b8e2:	f993 a000 	ldrsb.w	sl, [r3]
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b8ec:	d030      	beq.n	800b950 <fmod+0x84>
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	463b      	mov	r3, r7
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	f7f5 f889 	bl	8000a0c <__aeabi_dcmpun>
 800b8fa:	bb48      	cbnz	r0, 800b950 <fmod+0x84>
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	462b      	mov	r3, r5
 800b900:	4620      	mov	r0, r4
 800b902:	4629      	mov	r1, r5
 800b904:	f7f5 f882 	bl	8000a0c <__aeabi_dcmpun>
 800b908:	4683      	mov	fp, r0
 800b90a:	bb08      	cbnz	r0, 800b950 <fmod+0x84>
 800b90c:	2200      	movs	r2, #0
 800b90e:	2300      	movs	r3, #0
 800b910:	4630      	mov	r0, r6
 800b912:	4639      	mov	r1, r7
 800b914:	f7f5 f848 	bl	80009a8 <__aeabi_dcmpeq>
 800b918:	b1d0      	cbz	r0, 800b950 <fmod+0x84>
 800b91a:	2301      	movs	r3, #1
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4b18      	ldr	r3, [pc, #96]	; (800b980 <fmod+0xb4>)
 800b920:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b92a:	f8cd b020 	str.w	fp, [sp, #32]
 800b92e:	f1ba 0f00 	cmp.w	sl, #0
 800b932:	d112      	bne.n	800b95a <fmod+0x8e>
 800b934:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b938:	4668      	mov	r0, sp
 800b93a:	f001 f961 	bl	800cc00 <matherr>
 800b93e:	b1b8      	cbz	r0, 800b970 <fmod+0xa4>
 800b940:	9b08      	ldr	r3, [sp, #32]
 800b942:	b11b      	cbz	r3, 800b94c <fmod+0x80>
 800b944:	f7fd fa08 	bl	8008d58 <__errno>
 800b948:	9b08      	ldr	r3, [sp, #32]
 800b94a:	6003      	str	r3, [r0, #0]
 800b94c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b950:	4640      	mov	r0, r8
 800b952:	4649      	mov	r1, r9
 800b954:	b00b      	add	sp, #44	; 0x2c
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	2200      	movs	r2, #0
 800b95c:	2300      	movs	r3, #0
 800b95e:	4610      	mov	r0, r2
 800b960:	4619      	mov	r1, r3
 800b962:	f7f4 fee3 	bl	800072c <__aeabi_ddiv>
 800b966:	f1ba 0f02 	cmp.w	sl, #2
 800b96a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b96e:	d1e3      	bne.n	800b938 <fmod+0x6c>
 800b970:	f7fd f9f2 	bl	8008d58 <__errno>
 800b974:	2321      	movs	r3, #33	; 0x21
 800b976:	6003      	str	r3, [r0, #0]
 800b978:	e7e2      	b.n	800b940 <fmod+0x74>
 800b97a:	bf00      	nop
 800b97c:	20000208 	.word	0x20000208
 800b980:	0800d480 	.word	0x0800d480

0800b984 <sqrt>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	b08b      	sub	sp, #44	; 0x2c
 800b98a:	4604      	mov	r4, r0
 800b98c:	460d      	mov	r5, r1
 800b98e:	f000 fb47 	bl	800c020 <__ieee754_sqrt>
 800b992:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <sqrt+0xa0>)
 800b994:	4680      	mov	r8, r0
 800b996:	f993 a000 	ldrsb.w	sl, [r3]
 800b99a:	4689      	mov	r9, r1
 800b99c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b9a0:	d02b      	beq.n	800b9fa <sqrt+0x76>
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7f5 f82f 	bl	8000a0c <__aeabi_dcmpun>
 800b9ae:	4683      	mov	fp, r0
 800b9b0:	bb18      	cbnz	r0, 800b9fa <sqrt+0x76>
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	2700      	movs	r7, #0
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	f7f4 fffd 	bl	80009bc <__aeabi_dcmplt>
 800b9c2:	b1d0      	cbz	r0, 800b9fa <sqrt+0x76>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <sqrt+0xa4>)
 800b9ca:	f8cd b020 	str.w	fp, [sp, #32]
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b9d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b9d8:	f1ba 0f00 	cmp.w	sl, #0
 800b9dc:	d112      	bne.n	800ba04 <sqrt+0x80>
 800b9de:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b9e2:	4668      	mov	r0, sp
 800b9e4:	f001 f90c 	bl	800cc00 <matherr>
 800b9e8:	b1b8      	cbz	r0, 800ba1a <sqrt+0x96>
 800b9ea:	9b08      	ldr	r3, [sp, #32]
 800b9ec:	b11b      	cbz	r3, 800b9f6 <sqrt+0x72>
 800b9ee:	f7fd f9b3 	bl	8008d58 <__errno>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	6003      	str	r3, [r0, #0]
 800b9f6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	b00b      	add	sp, #44	; 0x2c
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	4632      	mov	r2, r6
 800ba06:	463b      	mov	r3, r7
 800ba08:	4630      	mov	r0, r6
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	f7f4 fe8e 	bl	800072c <__aeabi_ddiv>
 800ba10:	f1ba 0f02 	cmp.w	sl, #2
 800ba14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba18:	d1e3      	bne.n	800b9e2 <sqrt+0x5e>
 800ba1a:	f7fd f99d 	bl	8008d58 <__errno>
 800ba1e:	2321      	movs	r3, #33	; 0x21
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	e7e2      	b.n	800b9ea <sqrt+0x66>
 800ba24:	20000208 	.word	0x20000208
 800ba28:	0800d485 	.word	0x0800d485

0800ba2c <__ieee754_fmod>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ba34:	4682      	mov	sl, r0
 800ba36:	ea54 0002 	orrs.w	r0, r4, r2
 800ba3a:	461e      	mov	r6, r3
 800ba3c:	4694      	mov	ip, r2
 800ba3e:	4696      	mov	lr, r2
 800ba40:	d00c      	beq.n	800ba5c <__ieee754_fmod+0x30>
 800ba42:	4d78      	ldr	r5, [pc, #480]	; (800bc24 <__ieee754_fmod+0x1f8>)
 800ba44:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ba48:	45a8      	cmp	r8, r5
 800ba4a:	4689      	mov	r9, r1
 800ba4c:	dc06      	bgt.n	800ba5c <__ieee754_fmod+0x30>
 800ba4e:	4255      	negs	r5, r2
 800ba50:	4315      	orrs	r5, r2
 800ba52:	4f75      	ldr	r7, [pc, #468]	; (800bc28 <__ieee754_fmod+0x1fc>)
 800ba54:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800ba58:	42bd      	cmp	r5, r7
 800ba5a:	d908      	bls.n	800ba6e <__ieee754_fmod+0x42>
 800ba5c:	4650      	mov	r0, sl
 800ba5e:	f7f4 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	f7f4 fe61 	bl	800072c <__aeabi_ddiv>
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	e00f      	b.n	800ba8e <__ieee754_fmod+0x62>
 800ba6e:	45a0      	cmp	r8, r4
 800ba70:	4652      	mov	r2, sl
 800ba72:	4657      	mov	r7, sl
 800ba74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ba78:	dc0c      	bgt.n	800ba94 <__ieee754_fmod+0x68>
 800ba7a:	db08      	blt.n	800ba8e <__ieee754_fmod+0x62>
 800ba7c:	45e2      	cmp	sl, ip
 800ba7e:	d306      	bcc.n	800ba8e <__ieee754_fmod+0x62>
 800ba80:	d108      	bne.n	800ba94 <__ieee754_fmod+0x68>
 800ba82:	496a      	ldr	r1, [pc, #424]	; (800bc2c <__ieee754_fmod+0x200>)
 800ba84:	0fed      	lsrs	r5, r5, #31
 800ba86:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ba8a:	e9d5 a100 	ldrd	sl, r1, [r5]
 800ba8e:	4650      	mov	r0, sl
 800ba90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba94:	4b66      	ldr	r3, [pc, #408]	; (800bc30 <__ieee754_fmod+0x204>)
 800ba96:	4598      	cmp	r8, r3
 800ba98:	dc48      	bgt.n	800bb2c <__ieee754_fmod+0x100>
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	d13c      	bne.n	800bb1a <__ieee754_fmod+0xee>
 800baa0:	4611      	mov	r1, r2
 800baa2:	4864      	ldr	r0, [pc, #400]	; (800bc34 <__ieee754_fmod+0x208>)
 800baa4:	2900      	cmp	r1, #0
 800baa6:	dc35      	bgt.n	800bb14 <__ieee754_fmod+0xe8>
 800baa8:	429c      	cmp	r4, r3
 800baaa:	dc4f      	bgt.n	800bb4c <__ieee754_fmod+0x120>
 800baac:	2c00      	cmp	r4, #0
 800baae:	d145      	bne.n	800bb3c <__ieee754_fmod+0x110>
 800bab0:	4661      	mov	r1, ip
 800bab2:	4b60      	ldr	r3, [pc, #384]	; (800bc34 <__ieee754_fmod+0x208>)
 800bab4:	2900      	cmp	r1, #0
 800bab6:	dc3e      	bgt.n	800bb36 <__ieee754_fmod+0x10a>
 800bab8:	495f      	ldr	r1, [pc, #380]	; (800bc38 <__ieee754_fmod+0x20c>)
 800baba:	4288      	cmp	r0, r1
 800babc:	db4a      	blt.n	800bb54 <__ieee754_fmod+0x128>
 800babe:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800bac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bac6:	4a5c      	ldr	r2, [pc, #368]	; (800bc38 <__ieee754_fmod+0x20c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	db57      	blt.n	800bb7c <__ieee754_fmod+0x150>
 800bacc:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800bad0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800bad4:	1ac0      	subs	r0, r0, r3
 800bad6:	1b8a      	subs	r2, r1, r6
 800bad8:	eba7 040e 	sub.w	r4, r7, lr
 800badc:	2800      	cmp	r0, #0
 800bade:	d163      	bne.n	800bba8 <__ieee754_fmod+0x17c>
 800bae0:	4577      	cmp	r7, lr
 800bae2:	bf38      	it	cc
 800bae4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800bae8:	2a00      	cmp	r2, #0
 800baea:	bfbc      	itt	lt
 800baec:	463c      	movlt	r4, r7
 800baee:	460a      	movlt	r2, r1
 800baf0:	ea52 0104 	orrs.w	r1, r2, r4
 800baf4:	d0c5      	beq.n	800ba82 <__ieee754_fmod+0x56>
 800baf6:	494e      	ldr	r1, [pc, #312]	; (800bc30 <__ieee754_fmod+0x204>)
 800baf8:	428a      	cmp	r2, r1
 800bafa:	dd6a      	ble.n	800bbd2 <__ieee754_fmod+0x1a6>
 800bafc:	494e      	ldr	r1, [pc, #312]	; (800bc38 <__ieee754_fmod+0x20c>)
 800bafe:	428b      	cmp	r3, r1
 800bb00:	db6d      	blt.n	800bbde <__ieee754_fmod+0x1b2>
 800bb02:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800bb06:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bb0a:	4315      	orrs	r5, r2
 800bb0c:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800bb10:	4620      	mov	r0, r4
 800bb12:	e7aa      	b.n	800ba6a <__ieee754_fmod+0x3e>
 800bb14:	3801      	subs	r0, #1
 800bb16:	0049      	lsls	r1, r1, #1
 800bb18:	e7c4      	b.n	800baa4 <__ieee754_fmod+0x78>
 800bb1a:	4847      	ldr	r0, [pc, #284]	; (800bc38 <__ieee754_fmod+0x20c>)
 800bb1c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800bb20:	0049      	lsls	r1, r1, #1
 800bb22:	2900      	cmp	r1, #0
 800bb24:	f100 30ff 	add.w	r0, r0, #4294967295
 800bb28:	dcfa      	bgt.n	800bb20 <__ieee754_fmod+0xf4>
 800bb2a:	e7bd      	b.n	800baa8 <__ieee754_fmod+0x7c>
 800bb2c:	ea4f 5028 	mov.w	r0, r8, asr #20
 800bb30:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800bb34:	e7b8      	b.n	800baa8 <__ieee754_fmod+0x7c>
 800bb36:	3b01      	subs	r3, #1
 800bb38:	0049      	lsls	r1, r1, #1
 800bb3a:	e7bb      	b.n	800bab4 <__ieee754_fmod+0x88>
 800bb3c:	4b3e      	ldr	r3, [pc, #248]	; (800bc38 <__ieee754_fmod+0x20c>)
 800bb3e:	02e1      	lsls	r1, r4, #11
 800bb40:	0049      	lsls	r1, r1, #1
 800bb42:	2900      	cmp	r1, #0
 800bb44:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb48:	dcfa      	bgt.n	800bb40 <__ieee754_fmod+0x114>
 800bb4a:	e7b5      	b.n	800bab8 <__ieee754_fmod+0x8c>
 800bb4c:	1523      	asrs	r3, r4, #20
 800bb4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb52:	e7b1      	b.n	800bab8 <__ieee754_fmod+0x8c>
 800bb54:	1a0f      	subs	r7, r1, r0
 800bb56:	2f1f      	cmp	r7, #31
 800bb58:	dc0a      	bgt.n	800bb70 <__ieee754_fmod+0x144>
 800bb5a:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800bb5e:	fa08 f807 	lsl.w	r8, r8, r7
 800bb62:	fa22 f101 	lsr.w	r1, r2, r1
 800bb66:	ea41 0108 	orr.w	r1, r1, r8
 800bb6a:	fa02 f707 	lsl.w	r7, r2, r7
 800bb6e:	e7aa      	b.n	800bac6 <__ieee754_fmod+0x9a>
 800bb70:	4932      	ldr	r1, [pc, #200]	; (800bc3c <__ieee754_fmod+0x210>)
 800bb72:	2700      	movs	r7, #0
 800bb74:	1a09      	subs	r1, r1, r0
 800bb76:	fa02 f101 	lsl.w	r1, r2, r1
 800bb7a:	e7a4      	b.n	800bac6 <__ieee754_fmod+0x9a>
 800bb7c:	eba2 0e03 	sub.w	lr, r2, r3
 800bb80:	f1be 0f1f 	cmp.w	lr, #31
 800bb84:	dc09      	bgt.n	800bb9a <__ieee754_fmod+0x16e>
 800bb86:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800bb8a:	fa04 f40e 	lsl.w	r4, r4, lr
 800bb8e:	fa2c f606 	lsr.w	r6, ip, r6
 800bb92:	4326      	orrs	r6, r4
 800bb94:	fa0c fe0e 	lsl.w	lr, ip, lr
 800bb98:	e79c      	b.n	800bad4 <__ieee754_fmod+0xa8>
 800bb9a:	4e28      	ldr	r6, [pc, #160]	; (800bc3c <__ieee754_fmod+0x210>)
 800bb9c:	f04f 0e00 	mov.w	lr, #0
 800bba0:	1af6      	subs	r6, r6, r3
 800bba2:	fa0c f606 	lsl.w	r6, ip, r6
 800bba6:	e795      	b.n	800bad4 <__ieee754_fmod+0xa8>
 800bba8:	4577      	cmp	r7, lr
 800bbaa:	bf38      	it	cc
 800bbac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	da05      	bge.n	800bbc0 <__ieee754_fmod+0x194>
 800bbb4:	0ffa      	lsrs	r2, r7, #31
 800bbb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bbba:	007f      	lsls	r7, r7, #1
 800bbbc:	3801      	subs	r0, #1
 800bbbe:	e78a      	b.n	800bad6 <__ieee754_fmod+0xaa>
 800bbc0:	ea52 0104 	orrs.w	r1, r2, r4
 800bbc4:	f43f af5d 	beq.w	800ba82 <__ieee754_fmod+0x56>
 800bbc8:	0fe1      	lsrs	r1, r4, #31
 800bbca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800bbce:	0067      	lsls	r7, r4, #1
 800bbd0:	e7f4      	b.n	800bbbc <__ieee754_fmod+0x190>
 800bbd2:	0fe0      	lsrs	r0, r4, #31
 800bbd4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800bbd8:	0064      	lsls	r4, r4, #1
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	e78c      	b.n	800baf8 <__ieee754_fmod+0xcc>
 800bbde:	1ac9      	subs	r1, r1, r3
 800bbe0:	2914      	cmp	r1, #20
 800bbe2:	dc0a      	bgt.n	800bbfa <__ieee754_fmod+0x1ce>
 800bbe4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800bbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbec:	40cc      	lsrs	r4, r1
 800bbee:	4323      	orrs	r3, r4
 800bbf0:	410a      	asrs	r2, r1
 800bbf2:	ea42 0105 	orr.w	r1, r2, r5
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	e737      	b.n	800ba6a <__ieee754_fmod+0x3e>
 800bbfa:	291f      	cmp	r1, #31
 800bbfc:	dc07      	bgt.n	800bc0e <__ieee754_fmod+0x1e2>
 800bbfe:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800bc02:	40cc      	lsrs	r4, r1
 800bc04:	fa02 f303 	lsl.w	r3, r2, r3
 800bc08:	4323      	orrs	r3, r4
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	e7f1      	b.n	800bbf2 <__ieee754_fmod+0x1c6>
 800bc0e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800bc12:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800bc16:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800bc1a:	33e2      	adds	r3, #226	; 0xe2
 800bc1c:	fa42 f303 	asr.w	r3, r2, r3
 800bc20:	e7f3      	b.n	800bc0a <__ieee754_fmod+0x1de>
 800bc22:	bf00      	nop
 800bc24:	7fefffff 	.word	0x7fefffff
 800bc28:	7ff00000 	.word	0x7ff00000
 800bc2c:	0800d490 	.word	0x0800d490
 800bc30:	000fffff 	.word	0x000fffff
 800bc34:	fffffbed 	.word	0xfffffbed
 800bc38:	fffffc02 	.word	0xfffffc02
 800bc3c:	fffffbe2 	.word	0xfffffbe2

0800bc40 <__ieee754_rem_pio2>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	4614      	mov	r4, r2
 800bc46:	4ac2      	ldr	r2, [pc, #776]	; (800bf50 <__ieee754_rem_pio2+0x310>)
 800bc48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bc4c:	4592      	cmp	sl, r2
 800bc4e:	b08d      	sub	sp, #52	; 0x34
 800bc50:	468b      	mov	fp, r1
 800bc52:	dc07      	bgt.n	800bc64 <__ieee754_rem_pio2+0x24>
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	e9c4 0100 	strd	r0, r1, [r4]
 800bc5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bc60:	2500      	movs	r5, #0
 800bc62:	e023      	b.n	800bcac <__ieee754_rem_pio2+0x6c>
 800bc64:	4abb      	ldr	r2, [pc, #748]	; (800bf54 <__ieee754_rem_pio2+0x314>)
 800bc66:	4592      	cmp	sl, r2
 800bc68:	dc71      	bgt.n	800bd4e <__ieee754_rem_pio2+0x10e>
 800bc6a:	a3ab      	add	r3, pc, #684	; (adr r3, 800bf18 <__ieee754_rem_pio2+0x2d8>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	2900      	cmp	r1, #0
 800bc72:	4db9      	ldr	r5, [pc, #740]	; (800bf58 <__ieee754_rem_pio2+0x318>)
 800bc74:	dd36      	ble.n	800bce4 <__ieee754_rem_pio2+0xa4>
 800bc76:	f7f4 fa77 	bl	8000168 <__aeabi_dsub>
 800bc7a:	45aa      	cmp	sl, r5
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	d018      	beq.n	800bcb4 <__ieee754_rem_pio2+0x74>
 800bc82:	a3a7      	add	r3, pc, #668	; (adr r3, 800bf20 <__ieee754_rem_pio2+0x2e0>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fa6e 	bl	8000168 <__aeabi_dsub>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4630      	mov	r0, r6
 800bc92:	e9c4 2300 	strd	r2, r3, [r4]
 800bc96:	4639      	mov	r1, r7
 800bc98:	f7f4 fa66 	bl	8000168 <__aeabi_dsub>
 800bc9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bf20 <__ieee754_rem_pio2+0x2e0>)
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f7f4 fa61 	bl	8000168 <__aeabi_dsub>
 800bca6:	2501      	movs	r5, #1
 800bca8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bcac:	4628      	mov	r0, r5
 800bcae:	b00d      	add	sp, #52	; 0x34
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	a39c      	add	r3, pc, #624	; (adr r3, 800bf28 <__ieee754_rem_pio2+0x2e8>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fa55 	bl	8000168 <__aeabi_dsub>
 800bcbe:	a39c      	add	r3, pc, #624	; (adr r3, 800bf30 <__ieee754_rem_pio2+0x2f0>)
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	460f      	mov	r7, r1
 800bcc8:	f7f4 fa4e 	bl	8000168 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	e9c4 2300 	strd	r2, r3, [r4]
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fa46 	bl	8000168 <__aeabi_dsub>
 800bcdc:	a394      	add	r3, pc, #592	; (adr r3, 800bf30 <__ieee754_rem_pio2+0x2f0>)
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	e7de      	b.n	800bca2 <__ieee754_rem_pio2+0x62>
 800bce4:	f7f4 fa42 	bl	800016c <__adddf3>
 800bce8:	45aa      	cmp	sl, r5
 800bcea:	4606      	mov	r6, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	d016      	beq.n	800bd1e <__ieee754_rem_pio2+0xde>
 800bcf0:	a38b      	add	r3, pc, #556	; (adr r3, 800bf20 <__ieee754_rem_pio2+0x2e0>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fa39 	bl	800016c <__adddf3>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4630      	mov	r0, r6
 800bd00:	e9c4 2300 	strd	r2, r3, [r4]
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fa2f 	bl	8000168 <__aeabi_dsub>
 800bd0a:	a385      	add	r3, pc, #532	; (adr r3, 800bf20 <__ieee754_rem_pio2+0x2e0>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fa2c 	bl	800016c <__adddf3>
 800bd14:	f04f 35ff 	mov.w	r5, #4294967295
 800bd18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd1c:	e7c6      	b.n	800bcac <__ieee754_rem_pio2+0x6c>
 800bd1e:	a382      	add	r3, pc, #520	; (adr r3, 800bf28 <__ieee754_rem_pio2+0x2e8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f4 fa22 	bl	800016c <__adddf3>
 800bd28:	a381      	add	r3, pc, #516	; (adr r3, 800bf30 <__ieee754_rem_pio2+0x2f0>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	4606      	mov	r6, r0
 800bd30:	460f      	mov	r7, r1
 800bd32:	f7f4 fa1b 	bl	800016c <__adddf3>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fa11 	bl	8000168 <__aeabi_dsub>
 800bd46:	a37a      	add	r3, pc, #488	; (adr r3, 800bf30 <__ieee754_rem_pio2+0x2f0>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	e7e0      	b.n	800bd10 <__ieee754_rem_pio2+0xd0>
 800bd4e:	4a83      	ldr	r2, [pc, #524]	; (800bf5c <__ieee754_rem_pio2+0x31c>)
 800bd50:	4592      	cmp	sl, r2
 800bd52:	f300 80d2 	bgt.w	800befa <__ieee754_rem_pio2+0x2ba>
 800bd56:	f7ff fd7b 	bl	800b850 <fabs>
 800bd5a:	a377      	add	r3, pc, #476	; (adr r3, 800bf38 <__ieee754_rem_pio2+0x2f8>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	f7f4 fbb8 	bl	80004d8 <__aeabi_dmul>
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4b7d      	ldr	r3, [pc, #500]	; (800bf60 <__ieee754_rem_pio2+0x320>)
 800bd6c:	f7f4 f9fe 	bl	800016c <__adddf3>
 800bd70:	f7f4 fe62 	bl	8000a38 <__aeabi_d2iz>
 800bd74:	4605      	mov	r5, r0
 800bd76:	f7f4 fb45 	bl	8000404 <__aeabi_i2d>
 800bd7a:	a367      	add	r3, pc, #412	; (adr r3, 800bf18 <__ieee754_rem_pio2+0x2d8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd84:	f7f4 fba8 	bl	80004d8 <__aeabi_dmul>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 f9ea 	bl	8000168 <__aeabi_dsub>
 800bd94:	a362      	add	r3, pc, #392	; (adr r3, 800bf20 <__ieee754_rem_pio2+0x2e0>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460f      	mov	r7, r1
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	f7f4 fb99 	bl	80004d8 <__aeabi_dmul>
 800bda6:	2d1f      	cmp	r5, #31
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	dc0e      	bgt.n	800bdcc <__ieee754_rem_pio2+0x18c>
 800bdae:	4b6d      	ldr	r3, [pc, #436]	; (800bf64 <__ieee754_rem_pio2+0x324>)
 800bdb0:	1e6a      	subs	r2, r5, #1
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	4553      	cmp	r3, sl
 800bdb8:	d008      	beq.n	800bdcc <__ieee754_rem_pio2+0x18c>
 800bdba:	4642      	mov	r2, r8
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 f9d1 	bl	8000168 <__aeabi_dsub>
 800bdc6:	e9c4 0100 	strd	r0, r1, [r4]
 800bdca:	e011      	b.n	800bdf0 <__ieee754_rem_pio2+0x1b0>
 800bdcc:	464b      	mov	r3, r9
 800bdce:	4642      	mov	r2, r8
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 f9c8 	bl	8000168 <__aeabi_dsub>
 800bdd8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bddc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bde0:	ebaa 0303 	sub.w	r3, sl, r3
 800bde4:	2b10      	cmp	r3, #16
 800bde6:	dc1f      	bgt.n	800be28 <__ieee754_rem_pio2+0x1e8>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	e9c4 2300 	strd	r2, r3, [r4]
 800bdf0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	4653      	mov	r3, sl
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	f7f4 f9b5 	bl	8000168 <__aeabi_dsub>
 800bdfe:	4642      	mov	r2, r8
 800be00:	464b      	mov	r3, r9
 800be02:	f7f4 f9b1 	bl	8000168 <__aeabi_dsub>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	f1bb 0f00 	cmp.w	fp, #0
 800be0e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800be12:	f6bf af4b 	bge.w	800bcac <__ieee754_rem_pio2+0x6c>
 800be16:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800be1a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800be1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be22:	60e1      	str	r1, [r4, #12]
 800be24:	426d      	negs	r5, r5
 800be26:	e741      	b.n	800bcac <__ieee754_rem_pio2+0x6c>
 800be28:	a33f      	add	r3, pc, #252	; (adr r3, 800bf28 <__ieee754_rem_pio2+0x2e8>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be32:	f7f4 fb51 	bl	80004d8 <__aeabi_dmul>
 800be36:	4680      	mov	r8, r0
 800be38:	4689      	mov	r9, r1
 800be3a:	4602      	mov	r2, r0
 800be3c:	460b      	mov	r3, r1
 800be3e:	4630      	mov	r0, r6
 800be40:	4639      	mov	r1, r7
 800be42:	f7f4 f991 	bl	8000168 <__aeabi_dsub>
 800be46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 f989 	bl	8000168 <__aeabi_dsub>
 800be56:	4642      	mov	r2, r8
 800be58:	464b      	mov	r3, r9
 800be5a:	f7f4 f985 	bl	8000168 <__aeabi_dsub>
 800be5e:	a334      	add	r3, pc, #208	; (adr r3, 800bf30 <__ieee754_rem_pio2+0x2f0>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	4606      	mov	r6, r0
 800be66:	460f      	mov	r7, r1
 800be68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be6c:	f7f4 fb34 	bl	80004d8 <__aeabi_dmul>
 800be70:	4632      	mov	r2, r6
 800be72:	463b      	mov	r3, r7
 800be74:	f7f4 f978 	bl	8000168 <__aeabi_dsub>
 800be78:	460b      	mov	r3, r1
 800be7a:	4602      	mov	r2, r0
 800be7c:	4680      	mov	r8, r0
 800be7e:	4689      	mov	r9, r1
 800be80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be84:	f7f4 f970 	bl	8000168 <__aeabi_dsub>
 800be88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be8c:	ebaa 0a03 	sub.w	sl, sl, r3
 800be90:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800be94:	dc06      	bgt.n	800bea4 <__ieee754_rem_pio2+0x264>
 800be96:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	e9c4 2300 	strd	r2, r3, [r4]
 800bea2:	e7a5      	b.n	800bdf0 <__ieee754_rem_pio2+0x1b0>
 800bea4:	a326      	add	r3, pc, #152	; (adr r3, 800bf40 <__ieee754_rem_pio2+0x300>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beae:	f7f4 fb13 	bl	80004d8 <__aeabi_dmul>
 800beb2:	4680      	mov	r8, r0
 800beb4:	4689      	mov	r9, r1
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bebe:	f7f4 f953 	bl	8000168 <__aeabi_dsub>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bece:	f7f4 f94b 	bl	8000168 <__aeabi_dsub>
 800bed2:	4642      	mov	r2, r8
 800bed4:	464b      	mov	r3, r9
 800bed6:	f7f4 f947 	bl	8000168 <__aeabi_dsub>
 800beda:	a31b      	add	r3, pc, #108	; (adr r3, 800bf48 <__ieee754_rem_pio2+0x308>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee8:	f7f4 faf6 	bl	80004d8 <__aeabi_dmul>
 800beec:	4642      	mov	r2, r8
 800beee:	464b      	mov	r3, r9
 800bef0:	f7f4 f93a 	bl	8000168 <__aeabi_dsub>
 800bef4:	4680      	mov	r8, r0
 800bef6:	4689      	mov	r9, r1
 800bef8:	e75f      	b.n	800bdba <__ieee754_rem_pio2+0x17a>
 800befa:	4a1b      	ldr	r2, [pc, #108]	; (800bf68 <__ieee754_rem_pio2+0x328>)
 800befc:	4592      	cmp	sl, r2
 800befe:	dd35      	ble.n	800bf6c <__ieee754_rem_pio2+0x32c>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	f7f4 f930 	bl	8000168 <__aeabi_dsub>
 800bf08:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf0c:	e9c4 0100 	strd	r0, r1, [r4]
 800bf10:	e6a6      	b.n	800bc60 <__ieee754_rem_pio2+0x20>
 800bf12:	bf00      	nop
 800bf14:	f3af 8000 	nop.w
 800bf18:	54400000 	.word	0x54400000
 800bf1c:	3ff921fb 	.word	0x3ff921fb
 800bf20:	1a626331 	.word	0x1a626331
 800bf24:	3dd0b461 	.word	0x3dd0b461
 800bf28:	1a600000 	.word	0x1a600000
 800bf2c:	3dd0b461 	.word	0x3dd0b461
 800bf30:	2e037073 	.word	0x2e037073
 800bf34:	3ba3198a 	.word	0x3ba3198a
 800bf38:	6dc9c883 	.word	0x6dc9c883
 800bf3c:	3fe45f30 	.word	0x3fe45f30
 800bf40:	2e000000 	.word	0x2e000000
 800bf44:	3ba3198a 	.word	0x3ba3198a
 800bf48:	252049c1 	.word	0x252049c1
 800bf4c:	397b839a 	.word	0x397b839a
 800bf50:	3fe921fb 	.word	0x3fe921fb
 800bf54:	4002d97b 	.word	0x4002d97b
 800bf58:	3ff921fb 	.word	0x3ff921fb
 800bf5c:	413921fb 	.word	0x413921fb
 800bf60:	3fe00000 	.word	0x3fe00000
 800bf64:	0800d4a0 	.word	0x0800d4a0
 800bf68:	7fefffff 	.word	0x7fefffff
 800bf6c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bf70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bf74:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bf78:	460f      	mov	r7, r1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	f7f4 fd5c 	bl	8000a38 <__aeabi_d2iz>
 800bf80:	f7f4 fa40 	bl	8000404 <__aeabi_i2d>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4630      	mov	r0, r6
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf90:	f7f4 f8ea 	bl	8000168 <__aeabi_dsub>
 800bf94:	2200      	movs	r2, #0
 800bf96:	4b20      	ldr	r3, [pc, #128]	; (800c018 <__ieee754_rem_pio2+0x3d8>)
 800bf98:	f7f4 fa9e 	bl	80004d8 <__aeabi_dmul>
 800bf9c:	460f      	mov	r7, r1
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	f7f4 fd4a 	bl	8000a38 <__aeabi_d2iz>
 800bfa4:	f7f4 fa2e 	bl	8000404 <__aeabi_i2d>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4630      	mov	r0, r6
 800bfae:	4639      	mov	r1, r7
 800bfb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfb4:	f7f4 f8d8 	bl	8000168 <__aeabi_dsub>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4b17      	ldr	r3, [pc, #92]	; (800c018 <__ieee754_rem_pio2+0x3d8>)
 800bfbc:	f7f4 fa8c 	bl	80004d8 <__aeabi_dmul>
 800bfc0:	f04f 0803 	mov.w	r8, #3
 800bfc4:	2600      	movs	r6, #0
 800bfc6:	2700      	movs	r7, #0
 800bfc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bfcc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bfd6:	463b      	mov	r3, r7
 800bfd8:	f108 3aff 	add.w	sl, r8, #4294967295
 800bfdc:	f7f4 fce4 	bl	80009a8 <__aeabi_dcmpeq>
 800bfe0:	b9b8      	cbnz	r0, 800c012 <__ieee754_rem_pio2+0x3d2>
 800bfe2:	4b0e      	ldr	r3, [pc, #56]	; (800c01c <__ieee754_rem_pio2+0x3dc>)
 800bfe4:	462a      	mov	r2, r5
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	2302      	movs	r3, #2
 800bfea:	4621      	mov	r1, r4
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	a806      	add	r0, sp, #24
 800bff0:	4643      	mov	r3, r8
 800bff2:	f000 f97f 	bl	800c2f4 <__kernel_rem_pio2>
 800bff6:	f1bb 0f00 	cmp.w	fp, #0
 800bffa:	4605      	mov	r5, r0
 800bffc:	f6bf ae56 	bge.w	800bcac <__ieee754_rem_pio2+0x6c>
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c006:	6063      	str	r3, [r4, #4]
 800c008:	68e3      	ldr	r3, [r4, #12]
 800c00a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c00e:	60e3      	str	r3, [r4, #12]
 800c010:	e708      	b.n	800be24 <__ieee754_rem_pio2+0x1e4>
 800c012:	46d0      	mov	r8, sl
 800c014:	e7dc      	b.n	800bfd0 <__ieee754_rem_pio2+0x390>
 800c016:	bf00      	nop
 800c018:	41700000 	.word	0x41700000
 800c01c:	0800d520 	.word	0x0800d520

0800c020 <__ieee754_sqrt>:
 800c020:	4b54      	ldr	r3, [pc, #336]	; (800c174 <__ieee754_sqrt+0x154>)
 800c022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c026:	438b      	bics	r3, r1
 800c028:	4606      	mov	r6, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	460a      	mov	r2, r1
 800c02e:	460c      	mov	r4, r1
 800c030:	d10f      	bne.n	800c052 <__ieee754_sqrt+0x32>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	f7f4 fa4f 	bl	80004d8 <__aeabi_dmul>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	4630      	mov	r0, r6
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 f893 	bl	800016c <__adddf3>
 800c046:	4606      	mov	r6, r0
 800c048:	460d      	mov	r5, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	4629      	mov	r1, r5
 800c04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c052:	2900      	cmp	r1, #0
 800c054:	4607      	mov	r7, r0
 800c056:	4603      	mov	r3, r0
 800c058:	dc0e      	bgt.n	800c078 <__ieee754_sqrt+0x58>
 800c05a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c05e:	ea5c 0707 	orrs.w	r7, ip, r7
 800c062:	d0f2      	beq.n	800c04a <__ieee754_sqrt+0x2a>
 800c064:	b141      	cbz	r1, 800c078 <__ieee754_sqrt+0x58>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	f7f4 f87d 	bl	8000168 <__aeabi_dsub>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	f7f4 fb5b 	bl	800072c <__aeabi_ddiv>
 800c076:	e7e6      	b.n	800c046 <__ieee754_sqrt+0x26>
 800c078:	1512      	asrs	r2, r2, #20
 800c07a:	d074      	beq.n	800c166 <__ieee754_sqrt+0x146>
 800c07c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c080:	07d5      	lsls	r5, r2, #31
 800c082:	f04f 0500 	mov.w	r5, #0
 800c086:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c08a:	bf48      	it	mi
 800c08c:	0fd9      	lsrmi	r1, r3, #31
 800c08e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c092:	bf44      	itt	mi
 800c094:	005b      	lslmi	r3, r3, #1
 800c096:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c09a:	1051      	asrs	r1, r2, #1
 800c09c:	0fda      	lsrs	r2, r3, #31
 800c09e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	2216      	movs	r2, #22
 800c0a6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	1987      	adds	r7, r0, r6
 800c0ae:	42a7      	cmp	r7, r4
 800c0b0:	bfde      	ittt	le
 800c0b2:	19b8      	addle	r0, r7, r6
 800c0b4:	1be4      	suble	r4, r4, r7
 800c0b6:	19ad      	addle	r5, r5, r6
 800c0b8:	0fdf      	lsrs	r7, r3, #31
 800c0ba:	3a01      	subs	r2, #1
 800c0bc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c0c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c0c8:	d1f0      	bne.n	800c0ac <__ieee754_sqrt+0x8c>
 800c0ca:	f04f 0c20 	mov.w	ip, #32
 800c0ce:	4696      	mov	lr, r2
 800c0d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c0d4:	4284      	cmp	r4, r0
 800c0d6:	eb06 070e 	add.w	r7, r6, lr
 800c0da:	dc02      	bgt.n	800c0e2 <__ieee754_sqrt+0xc2>
 800c0dc:	d112      	bne.n	800c104 <__ieee754_sqrt+0xe4>
 800c0de:	429f      	cmp	r7, r3
 800c0e0:	d810      	bhi.n	800c104 <__ieee754_sqrt+0xe4>
 800c0e2:	2f00      	cmp	r7, #0
 800c0e4:	eb07 0e06 	add.w	lr, r7, r6
 800c0e8:	da42      	bge.n	800c170 <__ieee754_sqrt+0x150>
 800c0ea:	f1be 0f00 	cmp.w	lr, #0
 800c0ee:	db3f      	blt.n	800c170 <__ieee754_sqrt+0x150>
 800c0f0:	f100 0801 	add.w	r8, r0, #1
 800c0f4:	1a24      	subs	r4, r4, r0
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	429f      	cmp	r7, r3
 800c0fa:	bf88      	it	hi
 800c0fc:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800c100:	1bdb      	subs	r3, r3, r7
 800c102:	4432      	add	r2, r6
 800c104:	0064      	lsls	r4, r4, #1
 800c106:	f1bc 0c01 	subs.w	ip, ip, #1
 800c10a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c10e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c112:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c116:	d1dd      	bne.n	800c0d4 <__ieee754_sqrt+0xb4>
 800c118:	4323      	orrs	r3, r4
 800c11a:	d006      	beq.n	800c12a <__ieee754_sqrt+0x10a>
 800c11c:	1c54      	adds	r4, r2, #1
 800c11e:	bf0b      	itete	eq
 800c120:	4662      	moveq	r2, ip
 800c122:	3201      	addne	r2, #1
 800c124:	3501      	addeq	r5, #1
 800c126:	f022 0201 	bicne.w	r2, r2, #1
 800c12a:	106b      	asrs	r3, r5, #1
 800c12c:	0852      	lsrs	r2, r2, #1
 800c12e:	07e8      	lsls	r0, r5, #31
 800c130:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c134:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c138:	bf48      	it	mi
 800c13a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c13e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c142:	4616      	mov	r6, r2
 800c144:	e781      	b.n	800c04a <__ieee754_sqrt+0x2a>
 800c146:	0adc      	lsrs	r4, r3, #11
 800c148:	3915      	subs	r1, #21
 800c14a:	055b      	lsls	r3, r3, #21
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d0fa      	beq.n	800c146 <__ieee754_sqrt+0x126>
 800c150:	02e6      	lsls	r6, r4, #11
 800c152:	d50a      	bpl.n	800c16a <__ieee754_sqrt+0x14a>
 800c154:	f1c2 0020 	rsb	r0, r2, #32
 800c158:	fa23 f000 	lsr.w	r0, r3, r0
 800c15c:	1e55      	subs	r5, r2, #1
 800c15e:	4093      	lsls	r3, r2
 800c160:	4304      	orrs	r4, r0
 800c162:	1b4a      	subs	r2, r1, r5
 800c164:	e78a      	b.n	800c07c <__ieee754_sqrt+0x5c>
 800c166:	4611      	mov	r1, r2
 800c168:	e7f0      	b.n	800c14c <__ieee754_sqrt+0x12c>
 800c16a:	0064      	lsls	r4, r4, #1
 800c16c:	3201      	adds	r2, #1
 800c16e:	e7ef      	b.n	800c150 <__ieee754_sqrt+0x130>
 800c170:	4680      	mov	r8, r0
 800c172:	e7bf      	b.n	800c0f4 <__ieee754_sqrt+0xd4>
 800c174:	7ff00000 	.word	0x7ff00000

0800c178 <__kernel_cos>:
 800c178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c180:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c184:	4680      	mov	r8, r0
 800c186:	460f      	mov	r7, r1
 800c188:	e9cd 2300 	strd	r2, r3, [sp]
 800c18c:	da04      	bge.n	800c198 <__kernel_cos+0x20>
 800c18e:	f7f4 fc53 	bl	8000a38 <__aeabi_d2iz>
 800c192:	2800      	cmp	r0, #0
 800c194:	f000 8086 	beq.w	800c2a4 <__kernel_cos+0x12c>
 800c198:	4642      	mov	r2, r8
 800c19a:	463b      	mov	r3, r7
 800c19c:	4640      	mov	r0, r8
 800c19e:	4639      	mov	r1, r7
 800c1a0:	f7f4 f99a 	bl	80004d8 <__aeabi_dmul>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4b4e      	ldr	r3, [pc, #312]	; (800c2e0 <__kernel_cos+0x168>)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	f7f4 f994 	bl	80004d8 <__aeabi_dmul>
 800c1b0:	a33f      	add	r3, pc, #252	; (adr r3, 800c2b0 <__kernel_cos+0x138>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	4682      	mov	sl, r0
 800c1b8:	468b      	mov	fp, r1
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	f7f4 f98b 	bl	80004d8 <__aeabi_dmul>
 800c1c2:	a33d      	add	r3, pc, #244	; (adr r3, 800c2b8 <__kernel_cos+0x140>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f3 ffd0 	bl	800016c <__adddf3>
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	f7f4 f982 	bl	80004d8 <__aeabi_dmul>
 800c1d4:	a33a      	add	r3, pc, #232	; (adr r3, 800c2c0 <__kernel_cos+0x148>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f3 ffc5 	bl	8000168 <__aeabi_dsub>
 800c1de:	4622      	mov	r2, r4
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	f7f4 f979 	bl	80004d8 <__aeabi_dmul>
 800c1e6:	a338      	add	r3, pc, #224	; (adr r3, 800c2c8 <__kernel_cos+0x150>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f3 ffbe 	bl	800016c <__adddf3>
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	462b      	mov	r3, r5
 800c1f4:	f7f4 f970 	bl	80004d8 <__aeabi_dmul>
 800c1f8:	a335      	add	r3, pc, #212	; (adr r3, 800c2d0 <__kernel_cos+0x158>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f3 ffb3 	bl	8000168 <__aeabi_dsub>
 800c202:	4622      	mov	r2, r4
 800c204:	462b      	mov	r3, r5
 800c206:	f7f4 f967 	bl	80004d8 <__aeabi_dmul>
 800c20a:	a333      	add	r3, pc, #204	; (adr r3, 800c2d8 <__kernel_cos+0x160>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f3 ffac 	bl	800016c <__adddf3>
 800c214:	4622      	mov	r2, r4
 800c216:	462b      	mov	r3, r5
 800c218:	f7f4 f95e 	bl	80004d8 <__aeabi_dmul>
 800c21c:	4622      	mov	r2, r4
 800c21e:	462b      	mov	r3, r5
 800c220:	f7f4 f95a 	bl	80004d8 <__aeabi_dmul>
 800c224:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c228:	4604      	mov	r4, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	4640      	mov	r0, r8
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 f952 	bl	80004d8 <__aeabi_dmul>
 800c234:	460b      	mov	r3, r1
 800c236:	4602      	mov	r2, r0
 800c238:	4629      	mov	r1, r5
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7f3 ff94 	bl	8000168 <__aeabi_dsub>
 800c240:	4b28      	ldr	r3, [pc, #160]	; (800c2e4 <__kernel_cos+0x16c>)
 800c242:	4680      	mov	r8, r0
 800c244:	429e      	cmp	r6, r3
 800c246:	4689      	mov	r9, r1
 800c248:	dc0e      	bgt.n	800c268 <__kernel_cos+0xf0>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4650      	mov	r0, sl
 800c250:	4659      	mov	r1, fp
 800c252:	f7f3 ff89 	bl	8000168 <__aeabi_dsub>
 800c256:	4602      	mov	r2, r0
 800c258:	2000      	movs	r0, #0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4922      	ldr	r1, [pc, #136]	; (800c2e8 <__kernel_cos+0x170>)
 800c25e:	f7f3 ff83 	bl	8000168 <__aeabi_dsub>
 800c262:	b003      	add	sp, #12
 800c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c268:	2400      	movs	r4, #0
 800c26a:	4b20      	ldr	r3, [pc, #128]	; (800c2ec <__kernel_cos+0x174>)
 800c26c:	4622      	mov	r2, r4
 800c26e:	429e      	cmp	r6, r3
 800c270:	bfcc      	ite	gt
 800c272:	4d1f      	ldrgt	r5, [pc, #124]	; (800c2f0 <__kernel_cos+0x178>)
 800c274:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c278:	462b      	mov	r3, r5
 800c27a:	2000      	movs	r0, #0
 800c27c:	491a      	ldr	r1, [pc, #104]	; (800c2e8 <__kernel_cos+0x170>)
 800c27e:	f7f3 ff73 	bl	8000168 <__aeabi_dsub>
 800c282:	4622      	mov	r2, r4
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	462b      	mov	r3, r5
 800c28a:	4650      	mov	r0, sl
 800c28c:	4659      	mov	r1, fp
 800c28e:	f7f3 ff6b 	bl	8000168 <__aeabi_dsub>
 800c292:	4642      	mov	r2, r8
 800c294:	464b      	mov	r3, r9
 800c296:	f7f3 ff67 	bl	8000168 <__aeabi_dsub>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	e7dc      	b.n	800c25e <__kernel_cos+0xe6>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	4910      	ldr	r1, [pc, #64]	; (800c2e8 <__kernel_cos+0x170>)
 800c2a8:	e7db      	b.n	800c262 <__kernel_cos+0xea>
 800c2aa:	bf00      	nop
 800c2ac:	f3af 8000 	nop.w
 800c2b0:	be8838d4 	.word	0xbe8838d4
 800c2b4:	bda8fae9 	.word	0xbda8fae9
 800c2b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2bc:	3e21ee9e 	.word	0x3e21ee9e
 800c2c0:	809c52ad 	.word	0x809c52ad
 800c2c4:	3e927e4f 	.word	0x3e927e4f
 800c2c8:	19cb1590 	.word	0x19cb1590
 800c2cc:	3efa01a0 	.word	0x3efa01a0
 800c2d0:	16c15177 	.word	0x16c15177
 800c2d4:	3f56c16c 	.word	0x3f56c16c
 800c2d8:	5555554c 	.word	0x5555554c
 800c2dc:	3fa55555 	.word	0x3fa55555
 800c2e0:	3fe00000 	.word	0x3fe00000
 800c2e4:	3fd33332 	.word	0x3fd33332
 800c2e8:	3ff00000 	.word	0x3ff00000
 800c2ec:	3fe90000 	.word	0x3fe90000
 800c2f0:	3fd20000 	.word	0x3fd20000

0800c2f4 <__kernel_rem_pio2>:
 800c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c2fc:	9307      	str	r3, [sp, #28]
 800c2fe:	9104      	str	r1, [sp, #16]
 800c300:	4bbf      	ldr	r3, [pc, #764]	; (800c600 <__kernel_rem_pio2+0x30c>)
 800c302:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c304:	1ed4      	subs	r4, r2, #3
 800c306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c30a:	2500      	movs	r5, #0
 800c30c:	9302      	str	r3, [sp, #8]
 800c30e:	9b07      	ldr	r3, [sp, #28]
 800c310:	9008      	str	r0, [sp, #32]
 800c312:	3b01      	subs	r3, #1
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	2318      	movs	r3, #24
 800c318:	fb94 f4f3 	sdiv	r4, r4, r3
 800c31c:	f06f 0317 	mvn.w	r3, #23
 800c320:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c324:	fb04 3303 	mla	r3, r4, r3, r3
 800c328:	eb03 0a02 	add.w	sl, r3, r2
 800c32c:	9a06      	ldr	r2, [sp, #24]
 800c32e:	9b02      	ldr	r3, [sp, #8]
 800c330:	1aa7      	subs	r7, r4, r2
 800c332:	eb03 0802 	add.w	r8, r3, r2
 800c336:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c338:	2200      	movs	r2, #0
 800c33a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c33e:	2300      	movs	r3, #0
 800c340:	ae1e      	add	r6, sp, #120	; 0x78
 800c342:	4545      	cmp	r5, r8
 800c344:	dd14      	ble.n	800c370 <__kernel_rem_pio2+0x7c>
 800c346:	2600      	movs	r6, #0
 800c348:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	429e      	cmp	r6, r3
 800c350:	dc39      	bgt.n	800c3c6 <__kernel_rem_pio2+0xd2>
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	f04f 0800 	mov.w	r8, #0
 800c358:	3b08      	subs	r3, #8
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	f04f 0900 	mov.w	r9, #0
 800c362:	199d      	adds	r5, r3, r6
 800c364:	ab20      	add	r3, sp, #128	; 0x80
 800c366:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	2700      	movs	r7, #0
 800c36e:	e023      	b.n	800c3b8 <__kernel_rem_pio2+0xc4>
 800c370:	42ef      	cmn	r7, r5
 800c372:	d40b      	bmi.n	800c38c <__kernel_rem_pio2+0x98>
 800c374:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c378:	e9cd 2300 	strd	r2, r3, [sp]
 800c37c:	f7f4 f842 	bl	8000404 <__aeabi_i2d>
 800c380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c384:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800c388:	3501      	adds	r5, #1
 800c38a:	e7da      	b.n	800c342 <__kernel_rem_pio2+0x4e>
 800c38c:	4610      	mov	r0, r2
 800c38e:	4619      	mov	r1, r3
 800c390:	e7f8      	b.n	800c384 <__kernel_rem_pio2+0x90>
 800c392:	9905      	ldr	r1, [sp, #20]
 800c394:	9d00      	ldr	r5, [sp, #0]
 800c396:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c39a:	9105      	str	r1, [sp, #20]
 800c39c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c3a0:	9500      	str	r5, [sp, #0]
 800c3a2:	f7f4 f899 	bl	80004d8 <__aeabi_dmul>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f3 fedd 	bl	800016c <__adddf3>
 800c3b2:	4680      	mov	r8, r0
 800c3b4:	4689      	mov	r9, r1
 800c3b6:	3701      	adds	r7, #1
 800c3b8:	9b06      	ldr	r3, [sp, #24]
 800c3ba:	429f      	cmp	r7, r3
 800c3bc:	dde9      	ble.n	800c392 <__kernel_rem_pio2+0x9e>
 800c3be:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c3c2:	3601      	adds	r6, #1
 800c3c4:	e7c2      	b.n	800c34c <__kernel_rem_pio2+0x58>
 800c3c6:	9b02      	ldr	r3, [sp, #8]
 800c3c8:	aa0c      	add	r2, sp, #48	; 0x30
 800c3ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3d0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c3d2:	9f02      	ldr	r7, [sp, #8]
 800c3d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c3da:	2600      	movs	r6, #0
 800c3dc:	ab98      	add	r3, sp, #608	; 0x260
 800c3de:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800c3e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3ea:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c3ee:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c3f2:	ab98      	add	r3, sp, #608	; 0x260
 800c3f4:	445b      	add	r3, fp
 800c3f6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800c3fa:	1bbb      	subs	r3, r7, r6
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dc71      	bgt.n	800c4e4 <__kernel_rem_pio2+0x1f0>
 800c400:	4652      	mov	r2, sl
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f000 fbff 	bl	800cc08 <scalbn>
 800c40a:	2200      	movs	r2, #0
 800c40c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c410:	4604      	mov	r4, r0
 800c412:	460d      	mov	r5, r1
 800c414:	f7f4 f860 	bl	80004d8 <__aeabi_dmul>
 800c418:	f000 fb6e 	bl	800caf8 <floor>
 800c41c:	2200      	movs	r2, #0
 800c41e:	4b79      	ldr	r3, [pc, #484]	; (800c604 <__kernel_rem_pio2+0x310>)
 800c420:	f7f4 f85a 	bl	80004d8 <__aeabi_dmul>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	4620      	mov	r0, r4
 800c42a:	4629      	mov	r1, r5
 800c42c:	f7f3 fe9c 	bl	8000168 <__aeabi_dsub>
 800c430:	460d      	mov	r5, r1
 800c432:	4604      	mov	r4, r0
 800c434:	f7f4 fb00 	bl	8000a38 <__aeabi_d2iz>
 800c438:	9005      	str	r0, [sp, #20]
 800c43a:	f7f3 ffe3 	bl	8000404 <__aeabi_i2d>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f3 fe8f 	bl	8000168 <__aeabi_dsub>
 800c44a:	f1ba 0f00 	cmp.w	sl, #0
 800c44e:	4680      	mov	r8, r0
 800c450:	4689      	mov	r9, r1
 800c452:	dd6c      	ble.n	800c52e <__kernel_rem_pio2+0x23a>
 800c454:	1e7a      	subs	r2, r7, #1
 800c456:	ab0c      	add	r3, sp, #48	; 0x30
 800c458:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c45c:	f1ca 0118 	rsb	r1, sl, #24
 800c460:	9c05      	ldr	r4, [sp, #20]
 800c462:	fa40 f301 	asr.w	r3, r0, r1
 800c466:	441c      	add	r4, r3
 800c468:	408b      	lsls	r3, r1
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	ab0c      	add	r3, sp, #48	; 0x30
 800c46e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c472:	f1ca 0317 	rsb	r3, sl, #23
 800c476:	9405      	str	r4, [sp, #20]
 800c478:	fa40 f303 	asr.w	r3, r0, r3
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	9b00      	ldr	r3, [sp, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	dd62      	ble.n	800c54a <__kernel_rem_pio2+0x256>
 800c484:	2200      	movs	r2, #0
 800c486:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c48a:	4614      	mov	r4, r2
 800c48c:	9b05      	ldr	r3, [sp, #20]
 800c48e:	3301      	adds	r3, #1
 800c490:	9305      	str	r3, [sp, #20]
 800c492:	4297      	cmp	r7, r2
 800c494:	f300 809f 	bgt.w	800c5d6 <__kernel_rem_pio2+0x2e2>
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	dd07      	ble.n	800c4ae <__kernel_rem_pio2+0x1ba>
 800c49e:	f1ba 0f01 	cmp.w	sl, #1
 800c4a2:	f000 80bb 	beq.w	800c61c <__kernel_rem_pio2+0x328>
 800c4a6:	f1ba 0f02 	cmp.w	sl, #2
 800c4aa:	f000 80c1 	beq.w	800c630 <__kernel_rem_pio2+0x33c>
 800c4ae:	9b00      	ldr	r3, [sp, #0]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d14a      	bne.n	800c54a <__kernel_rem_pio2+0x256>
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	464b      	mov	r3, r9
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	4953      	ldr	r1, [pc, #332]	; (800c608 <__kernel_rem_pio2+0x314>)
 800c4bc:	f7f3 fe54 	bl	8000168 <__aeabi_dsub>
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	4689      	mov	r9, r1
 800c4c4:	2c00      	cmp	r4, #0
 800c4c6:	d040      	beq.n	800c54a <__kernel_rem_pio2+0x256>
 800c4c8:	4652      	mov	r2, sl
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	494e      	ldr	r1, [pc, #312]	; (800c608 <__kernel_rem_pio2+0x314>)
 800c4ce:	f000 fb9b 	bl	800cc08 <scalbn>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	4649      	mov	r1, r9
 800c4da:	f7f3 fe45 	bl	8000168 <__aeabi_dsub>
 800c4de:	4680      	mov	r8, r0
 800c4e0:	4689      	mov	r9, r1
 800c4e2:	e032      	b.n	800c54a <__kernel_rem_pio2+0x256>
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4b49      	ldr	r3, [pc, #292]	; (800c60c <__kernel_rem_pio2+0x318>)
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f7f3 fff4 	bl	80004d8 <__aeabi_dmul>
 800c4f0:	f7f4 faa2 	bl	8000a38 <__aeabi_d2iz>
 800c4f4:	f7f3 ff86 	bl	8000404 <__aeabi_i2d>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4b45      	ldr	r3, [pc, #276]	; (800c610 <__kernel_rem_pio2+0x31c>)
 800c4fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c500:	f7f3 ffea 	bl	80004d8 <__aeabi_dmul>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4640      	mov	r0, r8
 800c50a:	4649      	mov	r1, r9
 800c50c:	f7f3 fe2c 	bl	8000168 <__aeabi_dsub>
 800c510:	f7f4 fa92 	bl	8000a38 <__aeabi_d2iz>
 800c514:	ab0c      	add	r3, sp, #48	; 0x30
 800c516:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c51a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c522:	f7f3 fe23 	bl	800016c <__adddf3>
 800c526:	3601      	adds	r6, #1
 800c528:	4680      	mov	r8, r0
 800c52a:	4689      	mov	r9, r1
 800c52c:	e765      	b.n	800c3fa <__kernel_rem_pio2+0x106>
 800c52e:	d105      	bne.n	800c53c <__kernel_rem_pio2+0x248>
 800c530:	1e7b      	subs	r3, r7, #1
 800c532:	aa0c      	add	r2, sp, #48	; 0x30
 800c534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c538:	15c3      	asrs	r3, r0, #23
 800c53a:	e79f      	b.n	800c47c <__kernel_rem_pio2+0x188>
 800c53c:	2200      	movs	r2, #0
 800c53e:	4b35      	ldr	r3, [pc, #212]	; (800c614 <__kernel_rem_pio2+0x320>)
 800c540:	f7f4 fa50 	bl	80009e4 <__aeabi_dcmpge>
 800c544:	2800      	cmp	r0, #0
 800c546:	d143      	bne.n	800c5d0 <__kernel_rem_pio2+0x2dc>
 800c548:	9000      	str	r0, [sp, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	2300      	movs	r3, #0
 800c54e:	4640      	mov	r0, r8
 800c550:	4649      	mov	r1, r9
 800c552:	f7f4 fa29 	bl	80009a8 <__aeabi_dcmpeq>
 800c556:	2800      	cmp	r0, #0
 800c558:	f000 80c3 	beq.w	800c6e2 <__kernel_rem_pio2+0x3ee>
 800c55c:	1e7c      	subs	r4, r7, #1
 800c55e:	4623      	mov	r3, r4
 800c560:	2200      	movs	r2, #0
 800c562:	9902      	ldr	r1, [sp, #8]
 800c564:	428b      	cmp	r3, r1
 800c566:	da6a      	bge.n	800c63e <__kernel_rem_pio2+0x34a>
 800c568:	2a00      	cmp	r2, #0
 800c56a:	f000 8084 	beq.w	800c676 <__kernel_rem_pio2+0x382>
 800c56e:	ab0c      	add	r3, sp, #48	; 0x30
 800c570:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c574:	f1aa 0a18 	sub.w	sl, sl, #24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80b0 	beq.w	800c6de <__kernel_rem_pio2+0x3ea>
 800c57e:	4652      	mov	r2, sl
 800c580:	2000      	movs	r0, #0
 800c582:	4921      	ldr	r1, [pc, #132]	; (800c608 <__kernel_rem_pio2+0x314>)
 800c584:	f000 fb40 	bl	800cc08 <scalbn>
 800c588:	4625      	mov	r5, r4
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	f04f 0a00 	mov.w	sl, #0
 800c592:	00e3      	lsls	r3, r4, #3
 800c594:	aa98      	add	r2, sp, #608	; 0x260
 800c596:	eb02 0803 	add.w	r8, r2, r3
 800c59a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800c60c <__kernel_rem_pio2+0x318>
 800c59e:	9306      	str	r3, [sp, #24]
 800c5a0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800c5a4:	2d00      	cmp	r5, #0
 800c5a6:	f280 80d2 	bge.w	800c74e <__kernel_rem_pio2+0x45a>
 800c5aa:	2500      	movs	r5, #0
 800c5ac:	9a06      	ldr	r2, [sp, #24]
 800c5ae:	ab98      	add	r3, sp, #608	; 0x260
 800c5b0:	189e      	adds	r6, r3, r2
 800c5b2:	3ea8      	subs	r6, #168	; 0xa8
 800c5b4:	1b63      	subs	r3, r4, r5
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f2c0 80f9 	blt.w	800c7ae <__kernel_rem_pio2+0x4ba>
 800c5bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800c618 <__kernel_rem_pio2+0x324>
 800c5c0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800c5c4:	f04f 0a00 	mov.w	sl, #0
 800c5c8:	f04f 0b00 	mov.w	fp, #0
 800c5cc:	2700      	movs	r7, #0
 800c5ce:	e0e2      	b.n	800c796 <__kernel_rem_pio2+0x4a2>
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	e756      	b.n	800c484 <__kernel_rem_pio2+0x190>
 800c5d6:	ab0c      	add	r3, sp, #48	; 0x30
 800c5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5dc:	b94c      	cbnz	r4, 800c5f2 <__kernel_rem_pio2+0x2fe>
 800c5de:	b12b      	cbz	r3, 800c5ec <__kernel_rem_pio2+0x2f8>
 800c5e0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c5e4:	a80c      	add	r0, sp, #48	; 0x30
 800c5e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	461c      	mov	r4, r3
 800c5f0:	e74f      	b.n	800c492 <__kernel_rem_pio2+0x19e>
 800c5f2:	1acb      	subs	r3, r1, r3
 800c5f4:	a80c      	add	r0, sp, #48	; 0x30
 800c5f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	e7f6      	b.n	800c5ec <__kernel_rem_pio2+0x2f8>
 800c5fe:	bf00      	nop
 800c600:	0800d668 	.word	0x0800d668
 800c604:	40200000 	.word	0x40200000
 800c608:	3ff00000 	.word	0x3ff00000
 800c60c:	3e700000 	.word	0x3e700000
 800c610:	41700000 	.word	0x41700000
 800c614:	3fe00000 	.word	0x3fe00000
 800c618:	0800d620 	.word	0x0800d620
 800c61c:	1e7a      	subs	r2, r7, #1
 800c61e:	ab0c      	add	r3, sp, #48	; 0x30
 800c620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c624:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c628:	a90c      	add	r1, sp, #48	; 0x30
 800c62a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c62e:	e73e      	b.n	800c4ae <__kernel_rem_pio2+0x1ba>
 800c630:	1e7a      	subs	r2, r7, #1
 800c632:	ab0c      	add	r3, sp, #48	; 0x30
 800c634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c638:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c63c:	e7f4      	b.n	800c628 <__kernel_rem_pio2+0x334>
 800c63e:	a90c      	add	r1, sp, #48	; 0x30
 800c640:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c644:	3b01      	subs	r3, #1
 800c646:	430a      	orrs	r2, r1
 800c648:	e78b      	b.n	800c562 <__kernel_rem_pio2+0x26e>
 800c64a:	3401      	adds	r4, #1
 800c64c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c650:	2a00      	cmp	r2, #0
 800c652:	d0fa      	beq.n	800c64a <__kernel_rem_pio2+0x356>
 800c654:	ab98      	add	r3, sp, #608	; 0x260
 800c656:	449b      	add	fp, r3
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	1c7e      	adds	r6, r7, #1
 800c65c:	19dd      	adds	r5, r3, r7
 800c65e:	ab98      	add	r3, sp, #608	; 0x260
 800c660:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c664:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800c668:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800c66c:	443c      	add	r4, r7
 800c66e:	42b4      	cmp	r4, r6
 800c670:	da04      	bge.n	800c67c <__kernel_rem_pio2+0x388>
 800c672:	4627      	mov	r7, r4
 800c674:	e6b1      	b.n	800c3da <__kernel_rem_pio2+0xe6>
 800c676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c678:	2401      	movs	r4, #1
 800c67a:	e7e7      	b.n	800c64c <__kernel_rem_pio2+0x358>
 800c67c:	f105 0308 	add.w	r3, r5, #8
 800c680:	9309      	str	r3, [sp, #36]	; 0x24
 800c682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c684:	2700      	movs	r7, #0
 800c686:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c68a:	f7f3 febb 	bl	8000404 <__aeabi_i2d>
 800c68e:	f04f 0800 	mov.w	r8, #0
 800c692:	f04f 0900 	mov.w	r9, #0
 800c696:	9b08      	ldr	r3, [sp, #32]
 800c698:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c69c:	3b08      	subs	r3, #8
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	f105 0310 	add.w	r3, r5, #16
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	9b06      	ldr	r3, [sp, #24]
 800c6a8:	429f      	cmp	r7, r3
 800c6aa:	dd04      	ble.n	800c6b6 <__kernel_rem_pio2+0x3c2>
 800c6ac:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c6b0:	3601      	adds	r6, #1
 800c6b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6b4:	e7db      	b.n	800c66e <__kernel_rem_pio2+0x37a>
 800c6b6:	9905      	ldr	r1, [sp, #20]
 800c6b8:	9d00      	ldr	r5, [sp, #0]
 800c6ba:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c6be:	9105      	str	r1, [sp, #20]
 800c6c0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c6c4:	9500      	str	r5, [sp, #0]
 800c6c6:	f7f3 ff07 	bl	80004d8 <__aeabi_dmul>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	f7f3 fd4b 	bl	800016c <__adddf3>
 800c6d6:	3701      	adds	r7, #1
 800c6d8:	4680      	mov	r8, r0
 800c6da:	4689      	mov	r9, r1
 800c6dc:	e7e3      	b.n	800c6a6 <__kernel_rem_pio2+0x3b2>
 800c6de:	3c01      	subs	r4, #1
 800c6e0:	e745      	b.n	800c56e <__kernel_rem_pio2+0x27a>
 800c6e2:	f1ca 0200 	rsb	r2, sl, #0
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f000 fa8d 	bl	800cc08 <scalbn>
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	4ba3      	ldr	r3, [pc, #652]	; (800c980 <__kernel_rem_pio2+0x68c>)
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	f7f4 f975 	bl	80009e4 <__aeabi_dcmpge>
 800c6fa:	b1f8      	cbz	r0, 800c73c <__kernel_rem_pio2+0x448>
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4ba1      	ldr	r3, [pc, #644]	; (800c984 <__kernel_rem_pio2+0x690>)
 800c700:	4620      	mov	r0, r4
 800c702:	4629      	mov	r1, r5
 800c704:	f7f3 fee8 	bl	80004d8 <__aeabi_dmul>
 800c708:	f7f4 f996 	bl	8000a38 <__aeabi_d2iz>
 800c70c:	4606      	mov	r6, r0
 800c70e:	f7f3 fe79 	bl	8000404 <__aeabi_i2d>
 800c712:	2200      	movs	r2, #0
 800c714:	4b9a      	ldr	r3, [pc, #616]	; (800c980 <__kernel_rem_pio2+0x68c>)
 800c716:	f7f3 fedf 	bl	80004d8 <__aeabi_dmul>
 800c71a:	460b      	mov	r3, r1
 800c71c:	4602      	mov	r2, r0
 800c71e:	4629      	mov	r1, r5
 800c720:	4620      	mov	r0, r4
 800c722:	f7f3 fd21 	bl	8000168 <__aeabi_dsub>
 800c726:	f7f4 f987 	bl	8000a38 <__aeabi_d2iz>
 800c72a:	1c7c      	adds	r4, r7, #1
 800c72c:	ab0c      	add	r3, sp, #48	; 0x30
 800c72e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c732:	f10a 0a18 	add.w	sl, sl, #24
 800c736:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800c73a:	e720      	b.n	800c57e <__kernel_rem_pio2+0x28a>
 800c73c:	4620      	mov	r0, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	f7f4 f97a 	bl	8000a38 <__aeabi_d2iz>
 800c744:	ab0c      	add	r3, sp, #48	; 0x30
 800c746:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c74a:	463c      	mov	r4, r7
 800c74c:	e717      	b.n	800c57e <__kernel_rem_pio2+0x28a>
 800c74e:	ab0c      	add	r3, sp, #48	; 0x30
 800c750:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c754:	f7f3 fe56 	bl	8000404 <__aeabi_i2d>
 800c758:	4632      	mov	r2, r6
 800c75a:	463b      	mov	r3, r7
 800c75c:	f7f3 febc 	bl	80004d8 <__aeabi_dmul>
 800c760:	4652      	mov	r2, sl
 800c762:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c766:	465b      	mov	r3, fp
 800c768:	4630      	mov	r0, r6
 800c76a:	4639      	mov	r1, r7
 800c76c:	f7f3 feb4 	bl	80004d8 <__aeabi_dmul>
 800c770:	3d01      	subs	r5, #1
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	e715      	b.n	800c5a4 <__kernel_rem_pio2+0x2b0>
 800c778:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800c77c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c780:	f7f3 feaa 	bl	80004d8 <__aeabi_dmul>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4650      	mov	r0, sl
 800c78a:	4659      	mov	r1, fp
 800c78c:	f7f3 fcee 	bl	800016c <__adddf3>
 800c790:	4682      	mov	sl, r0
 800c792:	468b      	mov	fp, r1
 800c794:	3701      	adds	r7, #1
 800c796:	9b02      	ldr	r3, [sp, #8]
 800c798:	429f      	cmp	r7, r3
 800c79a:	dc01      	bgt.n	800c7a0 <__kernel_rem_pio2+0x4ac>
 800c79c:	42bd      	cmp	r5, r7
 800c79e:	daeb      	bge.n	800c778 <__kernel_rem_pio2+0x484>
 800c7a0:	ab48      	add	r3, sp, #288	; 0x120
 800c7a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c7a6:	e9c3 ab00 	strd	sl, fp, [r3]
 800c7aa:	3501      	adds	r5, #1
 800c7ac:	e702      	b.n	800c5b4 <__kernel_rem_pio2+0x2c0>
 800c7ae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d86c      	bhi.n	800c88e <__kernel_rem_pio2+0x59a>
 800c7b4:	e8df f003 	tbb	[pc, r3]
 800c7b8:	022f2f59 	.word	0x022f2f59
 800c7bc:	9a06      	ldr	r2, [sp, #24]
 800c7be:	ab48      	add	r3, sp, #288	; 0x120
 800c7c0:	189d      	adds	r5, r3, r2
 800c7c2:	46aa      	mov	sl, r5
 800c7c4:	46a3      	mov	fp, r4
 800c7c6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ca:	f300 8087 	bgt.w	800c8dc <__kernel_rem_pio2+0x5e8>
 800c7ce:	46a2      	mov	sl, r4
 800c7d0:	f1ba 0f01 	cmp.w	sl, #1
 800c7d4:	f300 809f 	bgt.w	800c916 <__kernel_rem_pio2+0x622>
 800c7d8:	2700      	movs	r7, #0
 800c7da:	463e      	mov	r6, r7
 800c7dc:	9d06      	ldr	r5, [sp, #24]
 800c7de:	ab48      	add	r3, sp, #288	; 0x120
 800c7e0:	3508      	adds	r5, #8
 800c7e2:	441d      	add	r5, r3
 800c7e4:	2c01      	cmp	r4, #1
 800c7e6:	f300 80b3 	bgt.w	800c950 <__kernel_rem_pio2+0x65c>
 800c7ea:	9b00      	ldr	r3, [sp, #0]
 800c7ec:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800c7ee:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c7f0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800c7f2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f040 80b5 	bne.w	800c964 <__kernel_rem_pio2+0x670>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	9804      	ldr	r0, [sp, #16]
 800c800:	e9c0 2300 	strd	r2, r3, [r0]
 800c804:	4622      	mov	r2, r4
 800c806:	460b      	mov	r3, r1
 800c808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c80c:	463a      	mov	r2, r7
 800c80e:	4633      	mov	r3, r6
 800c810:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c814:	e03b      	b.n	800c88e <__kernel_rem_pio2+0x59a>
 800c816:	f04f 0c00 	mov.w	ip, #0
 800c81a:	4626      	mov	r6, r4
 800c81c:	4667      	mov	r7, ip
 800c81e:	9d06      	ldr	r5, [sp, #24]
 800c820:	ab48      	add	r3, sp, #288	; 0x120
 800c822:	3508      	adds	r5, #8
 800c824:	441d      	add	r5, r3
 800c826:	2e00      	cmp	r6, #0
 800c828:	da42      	bge.n	800c8b0 <__kernel_rem_pio2+0x5bc>
 800c82a:	9b00      	ldr	r3, [sp, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d049      	beq.n	800c8c4 <__kernel_rem_pio2+0x5d0>
 800c830:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800c834:	4662      	mov	r2, ip
 800c836:	460b      	mov	r3, r1
 800c838:	9904      	ldr	r1, [sp, #16]
 800c83a:	2601      	movs	r6, #1
 800c83c:	e9c1 2300 	strd	r2, r3, [r1]
 800c840:	a948      	add	r1, sp, #288	; 0x120
 800c842:	463b      	mov	r3, r7
 800c844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c848:	f7f3 fc8e 	bl	8000168 <__aeabi_dsub>
 800c84c:	4684      	mov	ip, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	ad48      	add	r5, sp, #288	; 0x120
 800c852:	42b4      	cmp	r4, r6
 800c854:	da38      	bge.n	800c8c8 <__kernel_rem_pio2+0x5d4>
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	b10b      	cbz	r3, 800c85e <__kernel_rem_pio2+0x56a>
 800c85a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c85e:	4662      	mov	r2, ip
 800c860:	463b      	mov	r3, r7
 800c862:	9904      	ldr	r1, [sp, #16]
 800c864:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c868:	e011      	b.n	800c88e <__kernel_rem_pio2+0x59a>
 800c86a:	2700      	movs	r7, #0
 800c86c:	463d      	mov	r5, r7
 800c86e:	9b06      	ldr	r3, [sp, #24]
 800c870:	aa98      	add	r2, sp, #608	; 0x260
 800c872:	4413      	add	r3, r2
 800c874:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800c878:	2c00      	cmp	r4, #0
 800c87a:	da0f      	bge.n	800c89c <__kernel_rem_pio2+0x5a8>
 800c87c:	9b00      	ldr	r3, [sp, #0]
 800c87e:	b10b      	cbz	r3, 800c884 <__kernel_rem_pio2+0x590>
 800c880:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c884:	463a      	mov	r2, r7
 800c886:	462b      	mov	r3, r5
 800c888:	9904      	ldr	r1, [sp, #16]
 800c88a:	e9c1 2300 	strd	r2, r3, [r1]
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	f003 0007 	and.w	r0, r3, #7
 800c894:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89c:	4638      	mov	r0, r7
 800c89e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fc62 	bl	800016c <__adddf3>
 800c8a8:	3c01      	subs	r4, #1
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	460d      	mov	r5, r1
 800c8ae:	e7e3      	b.n	800c878 <__kernel_rem_pio2+0x584>
 800c8b0:	4660      	mov	r0, ip
 800c8b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 fc58 	bl	800016c <__adddf3>
 800c8bc:	3e01      	subs	r6, #1
 800c8be:	4684      	mov	ip, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	e7b0      	b.n	800c826 <__kernel_rem_pio2+0x532>
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	e7b5      	b.n	800c834 <__kernel_rem_pio2+0x540>
 800c8c8:	4660      	mov	r0, ip
 800c8ca:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	f7f3 fc4c 	bl	800016c <__adddf3>
 800c8d4:	3601      	adds	r6, #1
 800c8d6:	4684      	mov	ip, r0
 800c8d8:	460f      	mov	r7, r1
 800c8da:	e7ba      	b.n	800c852 <__kernel_rem_pio2+0x55e>
 800c8dc:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800c8e0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4649      	mov	r1, r9
 800c8e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8ec:	f7f3 fc3e 	bl	800016c <__adddf3>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	460f      	mov	r7, r1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fc34 	bl	8000168 <__aeabi_dsub>
 800c900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c904:	f7f3 fc32 	bl	800016c <__adddf3>
 800c908:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c90c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c910:	e9ca 6700 	strd	r6, r7, [sl]
 800c914:	e757      	b.n	800c7c6 <__kernel_rem_pio2+0x4d2>
 800c916:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800c91a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c926:	f7f3 fc21 	bl	800016c <__adddf3>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4680      	mov	r8, r0
 800c930:	4689      	mov	r9, r1
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fc17 	bl	8000168 <__aeabi_dsub>
 800c93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c93e:	f7f3 fc15 	bl	800016c <__adddf3>
 800c942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c946:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c94a:	e9c5 8900 	strd	r8, r9, [r5]
 800c94e:	e73f      	b.n	800c7d0 <__kernel_rem_pio2+0x4dc>
 800c950:	4638      	mov	r0, r7
 800c952:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c956:	4631      	mov	r1, r6
 800c958:	f7f3 fc08 	bl	800016c <__adddf3>
 800c95c:	3c01      	subs	r4, #1
 800c95e:	4607      	mov	r7, r0
 800c960:	460e      	mov	r6, r1
 800c962:	e73f      	b.n	800c7e4 <__kernel_rem_pio2+0x4f0>
 800c964:	9b04      	ldr	r3, [sp, #16]
 800c966:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c96a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c96e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c972:	601d      	str	r5, [r3, #0]
 800c974:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c978:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c97c:	615e      	str	r6, [r3, #20]
 800c97e:	e786      	b.n	800c88e <__kernel_rem_pio2+0x59a>
 800c980:	41700000 	.word	0x41700000
 800c984:	3e700000 	.word	0x3e700000

0800c988 <__kernel_sin>:
 800c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98c:	b086      	sub	sp, #24
 800c98e:	e9cd 2300 	strd	r2, r3, [sp]
 800c992:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c996:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c99a:	4682      	mov	sl, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c9a0:	da03      	bge.n	800c9aa <__kernel_sin+0x22>
 800c9a2:	f7f4 f849 	bl	8000a38 <__aeabi_d2iz>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d050      	beq.n	800ca4c <__kernel_sin+0xc4>
 800c9aa:	4652      	mov	r2, sl
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	4650      	mov	r0, sl
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7f3 fd91 	bl	80004d8 <__aeabi_dmul>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4650      	mov	r0, sl
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	f7f3 fd89 	bl	80004d8 <__aeabi_dmul>
 800c9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800cac0 <__kernel_sin+0x138>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f3 fd80 	bl	80004d8 <__aeabi_dmul>
 800c9d8:	a33b      	add	r3, pc, #236	; (adr r3, 800cac8 <__kernel_sin+0x140>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fbc3 	bl	8000168 <__aeabi_dsub>
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	463b      	mov	r3, r7
 800c9e6:	f7f3 fd77 	bl	80004d8 <__aeabi_dmul>
 800c9ea:	a339      	add	r3, pc, #228	; (adr r3, 800cad0 <__kernel_sin+0x148>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fbbc 	bl	800016c <__adddf3>
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	463b      	mov	r3, r7
 800c9f8:	f7f3 fd6e 	bl	80004d8 <__aeabi_dmul>
 800c9fc:	a336      	add	r3, pc, #216	; (adr r3, 800cad8 <__kernel_sin+0x150>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 fbb1 	bl	8000168 <__aeabi_dsub>
 800ca06:	4632      	mov	r2, r6
 800ca08:	463b      	mov	r3, r7
 800ca0a:	f7f3 fd65 	bl	80004d8 <__aeabi_dmul>
 800ca0e:	a334      	add	r3, pc, #208	; (adr r3, 800cae0 <__kernel_sin+0x158>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fbaa 	bl	800016c <__adddf3>
 800ca18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1c:	b9dd      	cbnz	r5, 800ca56 <__kernel_sin+0xce>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fd57 	bl	80004d8 <__aeabi_dmul>
 800ca2a:	a32f      	add	r3, pc, #188	; (adr r3, 800cae8 <__kernel_sin+0x160>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	f7f3 fb9a 	bl	8000168 <__aeabi_dsub>
 800ca34:	4642      	mov	r2, r8
 800ca36:	464b      	mov	r3, r9
 800ca38:	f7f3 fd4e 	bl	80004d8 <__aeabi_dmul>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4650      	mov	r0, sl
 800ca42:	4621      	mov	r1, r4
 800ca44:	f7f3 fb92 	bl	800016c <__adddf3>
 800ca48:	4682      	mov	sl, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	4621      	mov	r1, r4
 800ca50:	b006      	add	sp, #24
 800ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca56:	2200      	movs	r2, #0
 800ca58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca5c:	4b24      	ldr	r3, [pc, #144]	; (800caf0 <__kernel_sin+0x168>)
 800ca5e:	f7f3 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ca62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	f7f3 fd33 	bl	80004d8 <__aeabi_dmul>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca7a:	f7f3 fb75 	bl	8000168 <__aeabi_dsub>
 800ca7e:	4632      	mov	r2, r6
 800ca80:	463b      	mov	r3, r7
 800ca82:	f7f3 fd29 	bl	80004d8 <__aeabi_dmul>
 800ca86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca8a:	f7f3 fb6d 	bl	8000168 <__aeabi_dsub>
 800ca8e:	a316      	add	r3, pc, #88	; (adr r3, 800cae8 <__kernel_sin+0x160>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	4606      	mov	r6, r0
 800ca96:	460f      	mov	r7, r1
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	f7f3 fd1c 	bl	80004d8 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fb60 	bl	800016c <__adddf3>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4650      	mov	r0, sl
 800cab2:	4621      	mov	r1, r4
 800cab4:	f7f3 fb58 	bl	8000168 <__aeabi_dsub>
 800cab8:	e7c6      	b.n	800ca48 <__kernel_sin+0xc0>
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w
 800cac0:	5acfd57c 	.word	0x5acfd57c
 800cac4:	3de5d93a 	.word	0x3de5d93a
 800cac8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cacc:	3e5ae5e6 	.word	0x3e5ae5e6
 800cad0:	57b1fe7d 	.word	0x57b1fe7d
 800cad4:	3ec71de3 	.word	0x3ec71de3
 800cad8:	19c161d5 	.word	0x19c161d5
 800cadc:	3f2a01a0 	.word	0x3f2a01a0
 800cae0:	1110f8a6 	.word	0x1110f8a6
 800cae4:	3f811111 	.word	0x3f811111
 800cae8:	55555549 	.word	0x55555549
 800caec:	3fc55555 	.word	0x3fc55555
 800caf0:	3fe00000 	.word	0x3fe00000
 800caf4:	00000000 	.word	0x00000000

0800caf8 <floor>:
 800caf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cb00:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cb04:	2e13      	cmp	r6, #19
 800cb06:	4607      	mov	r7, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	dc35      	bgt.n	800cb7c <floor+0x84>
 800cb10:	2e00      	cmp	r6, #0
 800cb12:	da16      	bge.n	800cb42 <floor+0x4a>
 800cb14:	a336      	add	r3, pc, #216	; (adr r3, 800cbf0 <floor+0xf8>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fb27 	bl	800016c <__adddf3>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2300      	movs	r3, #0
 800cb22:	f7f3 ff69 	bl	80009f8 <__aeabi_dcmpgt>
 800cb26:	b148      	cbz	r0, 800cb3c <floor+0x44>
 800cb28:	2c00      	cmp	r4, #0
 800cb2a:	da5b      	bge.n	800cbe4 <floor+0xec>
 800cb2c:	2500      	movs	r5, #0
 800cb2e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cb32:	4a31      	ldr	r2, [pc, #196]	; (800cbf8 <floor+0x100>)
 800cb34:	433b      	orrs	r3, r7
 800cb36:	42ab      	cmp	r3, r5
 800cb38:	bf18      	it	ne
 800cb3a:	4614      	movne	r4, r2
 800cb3c:	4623      	mov	r3, r4
 800cb3e:	462f      	mov	r7, r5
 800cb40:	e026      	b.n	800cb90 <floor+0x98>
 800cb42:	4a2e      	ldr	r2, [pc, #184]	; (800cbfc <floor+0x104>)
 800cb44:	fa42 f806 	asr.w	r8, r2, r6
 800cb48:	ea01 0208 	and.w	r2, r1, r8
 800cb4c:	4302      	orrs	r2, r0
 800cb4e:	d01f      	beq.n	800cb90 <floor+0x98>
 800cb50:	a327      	add	r3, pc, #156	; (adr r3, 800cbf0 <floor+0xf8>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f7f3 fb09 	bl	800016c <__adddf3>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f7f3 ff4b 	bl	80009f8 <__aeabi_dcmpgt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0ea      	beq.n	800cb3c <floor+0x44>
 800cb66:	2c00      	cmp	r4, #0
 800cb68:	bfbe      	ittt	lt
 800cb6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cb6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800cb72:	19a4      	addlt	r4, r4, r6
 800cb74:	ea24 0408 	bic.w	r4, r4, r8
 800cb78:	2500      	movs	r5, #0
 800cb7a:	e7df      	b.n	800cb3c <floor+0x44>
 800cb7c:	2e33      	cmp	r6, #51	; 0x33
 800cb7e:	dd0b      	ble.n	800cb98 <floor+0xa0>
 800cb80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cb84:	d104      	bne.n	800cb90 <floor+0x98>
 800cb86:	4602      	mov	r2, r0
 800cb88:	f7f3 faf0 	bl	800016c <__adddf3>
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4638      	mov	r0, r7
 800cb92:	4619      	mov	r1, r3
 800cb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb98:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cba0:	fa22 f808 	lsr.w	r8, r2, r8
 800cba4:	ea18 0f00 	tst.w	r8, r0
 800cba8:	d0f2      	beq.n	800cb90 <floor+0x98>
 800cbaa:	a311      	add	r3, pc, #68	; (adr r3, 800cbf0 <floor+0xf8>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fadc 	bl	800016c <__adddf3>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f7f3 ff1e 	bl	80009f8 <__aeabi_dcmpgt>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0bd      	beq.n	800cb3c <floor+0x44>
 800cbc0:	2c00      	cmp	r4, #0
 800cbc2:	da02      	bge.n	800cbca <floor+0xd2>
 800cbc4:	2e14      	cmp	r6, #20
 800cbc6:	d103      	bne.n	800cbd0 <floor+0xd8>
 800cbc8:	3401      	adds	r4, #1
 800cbca:	ea25 0508 	bic.w	r5, r5, r8
 800cbce:	e7b5      	b.n	800cb3c <floor+0x44>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cbd6:	fa03 f606 	lsl.w	r6, r3, r6
 800cbda:	4435      	add	r5, r6
 800cbdc:	42bd      	cmp	r5, r7
 800cbde:	bf38      	it	cc
 800cbe0:	18e4      	addcc	r4, r4, r3
 800cbe2:	e7f2      	b.n	800cbca <floor+0xd2>
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	462c      	mov	r4, r5
 800cbe8:	e7a8      	b.n	800cb3c <floor+0x44>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	8800759c 	.word	0x8800759c
 800cbf4:	7e37e43c 	.word	0x7e37e43c
 800cbf8:	bff00000 	.word	0xbff00000
 800cbfc:	000fffff 	.word	0x000fffff

0800cc00 <matherr>:
 800cc00:	2000      	movs	r0, #0
 800cc02:	4770      	bx	lr
 800cc04:	0000      	movs	r0, r0
	...

0800cc08 <scalbn>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	4616      	mov	r6, r2
 800cc0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc10:	4604      	mov	r4, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	460b      	mov	r3, r1
 800cc16:	b982      	cbnz	r2, 800cc3a <scalbn+0x32>
 800cc18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc1c:	4303      	orrs	r3, r0
 800cc1e:	d034      	beq.n	800cc8a <scalbn+0x82>
 800cc20:	4b2d      	ldr	r3, [pc, #180]	; (800ccd8 <scalbn+0xd0>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	f7f3 fc58 	bl	80004d8 <__aeabi_dmul>
 800cc28:	4b2c      	ldr	r3, [pc, #176]	; (800ccdc <scalbn+0xd4>)
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	429e      	cmp	r6, r3
 800cc2e:	460d      	mov	r5, r1
 800cc30:	da0d      	bge.n	800cc4e <scalbn+0x46>
 800cc32:	a325      	add	r3, pc, #148	; (adr r3, 800ccc8 <scalbn+0xc0>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	e01c      	b.n	800cc74 <scalbn+0x6c>
 800cc3a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800cc3e:	42ba      	cmp	r2, r7
 800cc40:	d109      	bne.n	800cc56 <scalbn+0x4e>
 800cc42:	4602      	mov	r2, r0
 800cc44:	f7f3 fa92 	bl	800016c <__adddf3>
 800cc48:	4604      	mov	r4, r0
 800cc4a:	460d      	mov	r5, r1
 800cc4c:	e01d      	b.n	800cc8a <scalbn+0x82>
 800cc4e:	460b      	mov	r3, r1
 800cc50:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc54:	3a36      	subs	r2, #54	; 0x36
 800cc56:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc5a:	4432      	add	r2, r6
 800cc5c:	428a      	cmp	r2, r1
 800cc5e:	dd0c      	ble.n	800cc7a <scalbn+0x72>
 800cc60:	4622      	mov	r2, r4
 800cc62:	462b      	mov	r3, r5
 800cc64:	a11a      	add	r1, pc, #104	; (adr r1, 800ccd0 <scalbn+0xc8>)
 800cc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc6a:	f000 f83b 	bl	800cce4 <copysign>
 800cc6e:	a318      	add	r3, pc, #96	; (adr r3, 800ccd0 <scalbn+0xc8>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 fc30 	bl	80004d8 <__aeabi_dmul>
 800cc78:	e7e6      	b.n	800cc48 <scalbn+0x40>
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	dd08      	ble.n	800cc90 <scalbn+0x88>
 800cc7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc86:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc94:	da0b      	bge.n	800ccae <scalbn+0xa6>
 800cc96:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc9a:	429e      	cmp	r6, r3
 800cc9c:	4622      	mov	r2, r4
 800cc9e:	462b      	mov	r3, r5
 800cca0:	dce0      	bgt.n	800cc64 <scalbn+0x5c>
 800cca2:	a109      	add	r1, pc, #36	; (adr r1, 800ccc8 <scalbn+0xc0>)
 800cca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca8:	f000 f81c 	bl	800cce4 <copysign>
 800ccac:	e7c1      	b.n	800cc32 <scalbn+0x2a>
 800ccae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccb2:	3236      	adds	r2, #54	; 0x36
 800ccb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <scalbn+0xd8>)
 800ccc4:	e7d6      	b.n	800cc74 <scalbn+0x6c>
 800ccc6:	bf00      	nop
 800ccc8:	c2f8f359 	.word	0xc2f8f359
 800cccc:	01a56e1f 	.word	0x01a56e1f
 800ccd0:	8800759c 	.word	0x8800759c
 800ccd4:	7e37e43c 	.word	0x7e37e43c
 800ccd8:	43500000 	.word	0x43500000
 800ccdc:	ffff3cb0 	.word	0xffff3cb0
 800cce0:	3c900000 	.word	0x3c900000

0800cce4 <copysign>:
 800cce4:	b530      	push	{r4, r5, lr}
 800cce6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccee:	ea42 0503 	orr.w	r5, r2, r3
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	bd30      	pop	{r4, r5, pc}
	...

0800ccf8 <_init>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr

0800cd04 <_fini>:
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd06:	bf00      	nop
 800cd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0a:	bc08      	pop	{r3}
 800cd0c:	469e      	mov	lr, r3
 800cd0e:	4770      	bx	lr
